
Bluepill_board_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000978c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f70  080098a0  080098a0  000198a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c810  0800c810  0001c810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c818  0800c818  0001c818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c81c  0800c81c  0001c81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  20000000  0800c820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005c0  200001fc  0800ca1c  000201fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200007bc  0800ca1c  000207bc  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011c5c  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002433  00000000  00000000  00031e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00008f14  00000000  00000000  000342b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ac8  00000000  00000000  0003d1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000ab0  00000000  00000000  0003dc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00015386  00000000  00000000  0003e740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f630  00000000  00000000  00053ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0006fc21  00000000  00000000  000630f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000d2d17  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003738  00000000  00000000  000d2d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	08009884 	.word	0x08009884

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	08009884 	.word	0x08009884

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_ldivmod>:
 8001024:	b97b      	cbnz	r3, 8001046 <__aeabi_ldivmod+0x22>
 8001026:	b972      	cbnz	r2, 8001046 <__aeabi_ldivmod+0x22>
 8001028:	2900      	cmp	r1, #0
 800102a:	bfbe      	ittt	lt
 800102c:	2000      	movlt	r0, #0
 800102e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8001032:	e006      	blt.n	8001042 <__aeabi_ldivmod+0x1e>
 8001034:	bf08      	it	eq
 8001036:	2800      	cmpeq	r0, #0
 8001038:	bf1c      	itt	ne
 800103a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800103e:	f04f 30ff 	movne.w	r0, #4294967295
 8001042:	f000 b9d9 	b.w	80013f8 <__aeabi_idiv0>
 8001046:	f1ad 0c08 	sub.w	ip, sp, #8
 800104a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800104e:	2900      	cmp	r1, #0
 8001050:	db09      	blt.n	8001066 <__aeabi_ldivmod+0x42>
 8001052:	2b00      	cmp	r3, #0
 8001054:	db1a      	blt.n	800108c <__aeabi_ldivmod+0x68>
 8001056:	f000 f86d 	bl	8001134 <__udivmoddi4>
 800105a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800105e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001062:	b004      	add	sp, #16
 8001064:	4770      	bx	lr
 8001066:	4240      	negs	r0, r0
 8001068:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	db1b      	blt.n	80010a8 <__aeabi_ldivmod+0x84>
 8001070:	f000 f860 	bl	8001134 <__udivmoddi4>
 8001074:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107c:	b004      	add	sp, #16
 800107e:	4240      	negs	r0, r0
 8001080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001084:	4252      	negs	r2, r2
 8001086:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800108a:	4770      	bx	lr
 800108c:	4252      	negs	r2, r2
 800108e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001092:	f000 f84f 	bl	8001134 <__udivmoddi4>
 8001096:	f8dd e004 	ldr.w	lr, [sp, #4]
 800109a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800109e:	b004      	add	sp, #16
 80010a0:	4240      	negs	r0, r0
 80010a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a6:	4770      	bx	lr
 80010a8:	4252      	negs	r2, r2
 80010aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ae:	f000 f841 	bl	8001134 <__udivmoddi4>
 80010b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ba:	b004      	add	sp, #16
 80010bc:	4252      	negs	r2, r2
 80010be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010c2:	4770      	bx	lr

080010c4 <__aeabi_d2lz>:
 80010c4:	b538      	push	{r3, r4, r5, lr}
 80010c6:	460c      	mov	r4, r1
 80010c8:	4605      	mov	r5, r0
 80010ca:	4621      	mov	r1, r4
 80010cc:	4628      	mov	r0, r5
 80010ce:	2200      	movs	r2, #0
 80010d0:	2300      	movs	r3, #0
 80010d2:	f7ff fc73 	bl	80009bc <__aeabi_dcmplt>
 80010d6:	b928      	cbnz	r0, 80010e4 <__aeabi_d2lz+0x20>
 80010d8:	4628      	mov	r0, r5
 80010da:	4621      	mov	r1, r4
 80010dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010e0:	f000 b80a 	b.w	80010f8 <__aeabi_d2ulz>
 80010e4:	4628      	mov	r0, r5
 80010e6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010ea:	f000 f805 	bl	80010f8 <__aeabi_d2ulz>
 80010ee:	4240      	negs	r0, r0
 80010f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010f4:	bd38      	pop	{r3, r4, r5, pc}
 80010f6:	bf00      	nop

080010f8 <__aeabi_d2ulz>:
 80010f8:	b5d0      	push	{r4, r6, r7, lr}
 80010fa:	2200      	movs	r2, #0
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <__aeabi_d2ulz+0x34>)
 80010fe:	4606      	mov	r6, r0
 8001100:	460f      	mov	r7, r1
 8001102:	f7ff f9e9 	bl	80004d8 <__aeabi_dmul>
 8001106:	f7ff fcbf 	bl	8000a88 <__aeabi_d2uiz>
 800110a:	4604      	mov	r4, r0
 800110c:	f7ff f96a 	bl	80003e4 <__aeabi_ui2d>
 8001110:	2200      	movs	r2, #0
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <__aeabi_d2ulz+0x38>)
 8001114:	f7ff f9e0 	bl	80004d8 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4630      	mov	r0, r6
 800111e:	4639      	mov	r1, r7
 8001120:	f7ff f822 	bl	8000168 <__aeabi_dsub>
 8001124:	f7ff fcb0 	bl	8000a88 <__aeabi_d2uiz>
 8001128:	4621      	mov	r1, r4
 800112a:	bdd0      	pop	{r4, r6, r7, pc}
 800112c:	3df00000 	.word	0x3df00000
 8001130:	41f00000 	.word	0x41f00000

08001134 <__udivmoddi4>:
 8001134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001138:	9e08      	ldr	r6, [sp, #32]
 800113a:	460d      	mov	r5, r1
 800113c:	4604      	mov	r4, r0
 800113e:	468e      	mov	lr, r1
 8001140:	2b00      	cmp	r3, #0
 8001142:	f040 8083 	bne.w	800124c <__udivmoddi4+0x118>
 8001146:	428a      	cmp	r2, r1
 8001148:	4617      	mov	r7, r2
 800114a:	d947      	bls.n	80011dc <__udivmoddi4+0xa8>
 800114c:	fab2 f382 	clz	r3, r2
 8001150:	b14b      	cbz	r3, 8001166 <__udivmoddi4+0x32>
 8001152:	f1c3 0120 	rsb	r1, r3, #32
 8001156:	fa05 fe03 	lsl.w	lr, r5, r3
 800115a:	fa20 f101 	lsr.w	r1, r0, r1
 800115e:	409f      	lsls	r7, r3
 8001160:	ea41 0e0e 	orr.w	lr, r1, lr
 8001164:	409c      	lsls	r4, r3
 8001166:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800116a:	fbbe fcf8 	udiv	ip, lr, r8
 800116e:	fa1f f987 	uxth.w	r9, r7
 8001172:	fb08 e21c 	mls	r2, r8, ip, lr
 8001176:	fb0c f009 	mul.w	r0, ip, r9
 800117a:	0c21      	lsrs	r1, r4, #16
 800117c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001180:	4290      	cmp	r0, r2
 8001182:	d90a      	bls.n	800119a <__udivmoddi4+0x66>
 8001184:	18ba      	adds	r2, r7, r2
 8001186:	f10c 31ff 	add.w	r1, ip, #4294967295
 800118a:	f080 8118 	bcs.w	80013be <__udivmoddi4+0x28a>
 800118e:	4290      	cmp	r0, r2
 8001190:	f240 8115 	bls.w	80013be <__udivmoddi4+0x28a>
 8001194:	f1ac 0c02 	sub.w	ip, ip, #2
 8001198:	443a      	add	r2, r7
 800119a:	1a12      	subs	r2, r2, r0
 800119c:	fbb2 f0f8 	udiv	r0, r2, r8
 80011a0:	fb08 2210 	mls	r2, r8, r0, r2
 80011a4:	fb00 f109 	mul.w	r1, r0, r9
 80011a8:	b2a4      	uxth	r4, r4
 80011aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011ae:	42a1      	cmp	r1, r4
 80011b0:	d909      	bls.n	80011c6 <__udivmoddi4+0x92>
 80011b2:	193c      	adds	r4, r7, r4
 80011b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80011b8:	f080 8103 	bcs.w	80013c2 <__udivmoddi4+0x28e>
 80011bc:	42a1      	cmp	r1, r4
 80011be:	f240 8100 	bls.w	80013c2 <__udivmoddi4+0x28e>
 80011c2:	3802      	subs	r0, #2
 80011c4:	443c      	add	r4, r7
 80011c6:	1a64      	subs	r4, r4, r1
 80011c8:	2100      	movs	r1, #0
 80011ca:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80011ce:	b11e      	cbz	r6, 80011d8 <__udivmoddi4+0xa4>
 80011d0:	2200      	movs	r2, #0
 80011d2:	40dc      	lsrs	r4, r3
 80011d4:	e9c6 4200 	strd	r4, r2, [r6]
 80011d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011dc:	b902      	cbnz	r2, 80011e0 <__udivmoddi4+0xac>
 80011de:	deff      	udf	#255	; 0xff
 80011e0:	fab2 f382 	clz	r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d14f      	bne.n	8001288 <__udivmoddi4+0x154>
 80011e8:	1a8d      	subs	r5, r1, r2
 80011ea:	2101      	movs	r1, #1
 80011ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80011f0:	fa1f f882 	uxth.w	r8, r2
 80011f4:	fbb5 fcfe 	udiv	ip, r5, lr
 80011f8:	fb0e 551c 	mls	r5, lr, ip, r5
 80011fc:	fb08 f00c 	mul.w	r0, r8, ip
 8001200:	0c22      	lsrs	r2, r4, #16
 8001202:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001206:	42a8      	cmp	r0, r5
 8001208:	d907      	bls.n	800121a <__udivmoddi4+0xe6>
 800120a:	197d      	adds	r5, r7, r5
 800120c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001210:	d202      	bcs.n	8001218 <__udivmoddi4+0xe4>
 8001212:	42a8      	cmp	r0, r5
 8001214:	f200 80e9 	bhi.w	80013ea <__udivmoddi4+0x2b6>
 8001218:	4694      	mov	ip, r2
 800121a:	1a2d      	subs	r5, r5, r0
 800121c:	fbb5 f0fe 	udiv	r0, r5, lr
 8001220:	fb0e 5510 	mls	r5, lr, r0, r5
 8001224:	fb08 f800 	mul.w	r8, r8, r0
 8001228:	b2a4      	uxth	r4, r4
 800122a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800122e:	45a0      	cmp	r8, r4
 8001230:	d907      	bls.n	8001242 <__udivmoddi4+0x10e>
 8001232:	193c      	adds	r4, r7, r4
 8001234:	f100 32ff 	add.w	r2, r0, #4294967295
 8001238:	d202      	bcs.n	8001240 <__udivmoddi4+0x10c>
 800123a:	45a0      	cmp	r8, r4
 800123c:	f200 80d9 	bhi.w	80013f2 <__udivmoddi4+0x2be>
 8001240:	4610      	mov	r0, r2
 8001242:	eba4 0408 	sub.w	r4, r4, r8
 8001246:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800124a:	e7c0      	b.n	80011ce <__udivmoddi4+0x9a>
 800124c:	428b      	cmp	r3, r1
 800124e:	d908      	bls.n	8001262 <__udivmoddi4+0x12e>
 8001250:	2e00      	cmp	r6, #0
 8001252:	f000 80b1 	beq.w	80013b8 <__udivmoddi4+0x284>
 8001256:	2100      	movs	r1, #0
 8001258:	e9c6 0500 	strd	r0, r5, [r6]
 800125c:	4608      	mov	r0, r1
 800125e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001262:	fab3 f183 	clz	r1, r3
 8001266:	2900      	cmp	r1, #0
 8001268:	d14b      	bne.n	8001302 <__udivmoddi4+0x1ce>
 800126a:	42ab      	cmp	r3, r5
 800126c:	d302      	bcc.n	8001274 <__udivmoddi4+0x140>
 800126e:	4282      	cmp	r2, r0
 8001270:	f200 80b9 	bhi.w	80013e6 <__udivmoddi4+0x2b2>
 8001274:	1a84      	subs	r4, r0, r2
 8001276:	eb65 0303 	sbc.w	r3, r5, r3
 800127a:	2001      	movs	r0, #1
 800127c:	469e      	mov	lr, r3
 800127e:	2e00      	cmp	r6, #0
 8001280:	d0aa      	beq.n	80011d8 <__udivmoddi4+0xa4>
 8001282:	e9c6 4e00 	strd	r4, lr, [r6]
 8001286:	e7a7      	b.n	80011d8 <__udivmoddi4+0xa4>
 8001288:	409f      	lsls	r7, r3
 800128a:	f1c3 0220 	rsb	r2, r3, #32
 800128e:	40d1      	lsrs	r1, r2
 8001290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001294:	fbb1 f0fe 	udiv	r0, r1, lr
 8001298:	fa1f f887 	uxth.w	r8, r7
 800129c:	fb0e 1110 	mls	r1, lr, r0, r1
 80012a0:	fa24 f202 	lsr.w	r2, r4, r2
 80012a4:	409d      	lsls	r5, r3
 80012a6:	fb00 fc08 	mul.w	ip, r0, r8
 80012aa:	432a      	orrs	r2, r5
 80012ac:	0c15      	lsrs	r5, r2, #16
 80012ae:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80012b2:	45ac      	cmp	ip, r5
 80012b4:	fa04 f403 	lsl.w	r4, r4, r3
 80012b8:	d909      	bls.n	80012ce <__udivmoddi4+0x19a>
 80012ba:	197d      	adds	r5, r7, r5
 80012bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80012c0:	f080 808f 	bcs.w	80013e2 <__udivmoddi4+0x2ae>
 80012c4:	45ac      	cmp	ip, r5
 80012c6:	f240 808c 	bls.w	80013e2 <__udivmoddi4+0x2ae>
 80012ca:	3802      	subs	r0, #2
 80012cc:	443d      	add	r5, r7
 80012ce:	eba5 050c 	sub.w	r5, r5, ip
 80012d2:	fbb5 f1fe 	udiv	r1, r5, lr
 80012d6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80012da:	fb01 f908 	mul.w	r9, r1, r8
 80012de:	b295      	uxth	r5, r2
 80012e0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80012e4:	45a9      	cmp	r9, r5
 80012e6:	d907      	bls.n	80012f8 <__udivmoddi4+0x1c4>
 80012e8:	197d      	adds	r5, r7, r5
 80012ea:	f101 32ff 	add.w	r2, r1, #4294967295
 80012ee:	d274      	bcs.n	80013da <__udivmoddi4+0x2a6>
 80012f0:	45a9      	cmp	r9, r5
 80012f2:	d972      	bls.n	80013da <__udivmoddi4+0x2a6>
 80012f4:	3902      	subs	r1, #2
 80012f6:	443d      	add	r5, r7
 80012f8:	eba5 0509 	sub.w	r5, r5, r9
 80012fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001300:	e778      	b.n	80011f4 <__udivmoddi4+0xc0>
 8001302:	f1c1 0720 	rsb	r7, r1, #32
 8001306:	408b      	lsls	r3, r1
 8001308:	fa22 fc07 	lsr.w	ip, r2, r7
 800130c:	ea4c 0c03 	orr.w	ip, ip, r3
 8001310:	fa25 f407 	lsr.w	r4, r5, r7
 8001314:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001318:	fbb4 f9fe 	udiv	r9, r4, lr
 800131c:	fa1f f88c 	uxth.w	r8, ip
 8001320:	fb0e 4419 	mls	r4, lr, r9, r4
 8001324:	fa20 f307 	lsr.w	r3, r0, r7
 8001328:	fb09 fa08 	mul.w	sl, r9, r8
 800132c:	408d      	lsls	r5, r1
 800132e:	431d      	orrs	r5, r3
 8001330:	0c2b      	lsrs	r3, r5, #16
 8001332:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001336:	45a2      	cmp	sl, r4
 8001338:	fa02 f201 	lsl.w	r2, r2, r1
 800133c:	fa00 f301 	lsl.w	r3, r0, r1
 8001340:	d909      	bls.n	8001356 <__udivmoddi4+0x222>
 8001342:	eb1c 0404 	adds.w	r4, ip, r4
 8001346:	f109 30ff 	add.w	r0, r9, #4294967295
 800134a:	d248      	bcs.n	80013de <__udivmoddi4+0x2aa>
 800134c:	45a2      	cmp	sl, r4
 800134e:	d946      	bls.n	80013de <__udivmoddi4+0x2aa>
 8001350:	f1a9 0902 	sub.w	r9, r9, #2
 8001354:	4464      	add	r4, ip
 8001356:	eba4 040a 	sub.w	r4, r4, sl
 800135a:	fbb4 f0fe 	udiv	r0, r4, lr
 800135e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001362:	fb00 fa08 	mul.w	sl, r0, r8
 8001366:	b2ad      	uxth	r5, r5
 8001368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800136c:	45a2      	cmp	sl, r4
 800136e:	d908      	bls.n	8001382 <__udivmoddi4+0x24e>
 8001370:	eb1c 0404 	adds.w	r4, ip, r4
 8001374:	f100 35ff 	add.w	r5, r0, #4294967295
 8001378:	d22d      	bcs.n	80013d6 <__udivmoddi4+0x2a2>
 800137a:	45a2      	cmp	sl, r4
 800137c:	d92b      	bls.n	80013d6 <__udivmoddi4+0x2a2>
 800137e:	3802      	subs	r0, #2
 8001380:	4464      	add	r4, ip
 8001382:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001386:	fba0 8902 	umull	r8, r9, r0, r2
 800138a:	eba4 040a 	sub.w	r4, r4, sl
 800138e:	454c      	cmp	r4, r9
 8001390:	46c6      	mov	lr, r8
 8001392:	464d      	mov	r5, r9
 8001394:	d319      	bcc.n	80013ca <__udivmoddi4+0x296>
 8001396:	d016      	beq.n	80013c6 <__udivmoddi4+0x292>
 8001398:	b15e      	cbz	r6, 80013b2 <__udivmoddi4+0x27e>
 800139a:	ebb3 020e 	subs.w	r2, r3, lr
 800139e:	eb64 0405 	sbc.w	r4, r4, r5
 80013a2:	fa04 f707 	lsl.w	r7, r4, r7
 80013a6:	fa22 f301 	lsr.w	r3, r2, r1
 80013aa:	431f      	orrs	r7, r3
 80013ac:	40cc      	lsrs	r4, r1
 80013ae:	e9c6 7400 	strd	r7, r4, [r6]
 80013b2:	2100      	movs	r1, #0
 80013b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013b8:	4631      	mov	r1, r6
 80013ba:	4630      	mov	r0, r6
 80013bc:	e70c      	b.n	80011d8 <__udivmoddi4+0xa4>
 80013be:	468c      	mov	ip, r1
 80013c0:	e6eb      	b.n	800119a <__udivmoddi4+0x66>
 80013c2:	4610      	mov	r0, r2
 80013c4:	e6ff      	b.n	80011c6 <__udivmoddi4+0x92>
 80013c6:	4543      	cmp	r3, r8
 80013c8:	d2e6      	bcs.n	8001398 <__udivmoddi4+0x264>
 80013ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80013ce:	eb69 050c 	sbc.w	r5, r9, ip
 80013d2:	3801      	subs	r0, #1
 80013d4:	e7e0      	b.n	8001398 <__udivmoddi4+0x264>
 80013d6:	4628      	mov	r0, r5
 80013d8:	e7d3      	b.n	8001382 <__udivmoddi4+0x24e>
 80013da:	4611      	mov	r1, r2
 80013dc:	e78c      	b.n	80012f8 <__udivmoddi4+0x1c4>
 80013de:	4681      	mov	r9, r0
 80013e0:	e7b9      	b.n	8001356 <__udivmoddi4+0x222>
 80013e2:	4608      	mov	r0, r1
 80013e4:	e773      	b.n	80012ce <__udivmoddi4+0x19a>
 80013e6:	4608      	mov	r0, r1
 80013e8:	e749      	b.n	800127e <__udivmoddi4+0x14a>
 80013ea:	f1ac 0c02 	sub.w	ip, ip, #2
 80013ee:	443d      	add	r5, r7
 80013f0:	e713      	b.n	800121a <__udivmoddi4+0xe6>
 80013f2:	3802      	subs	r0, #2
 80013f4:	443c      	add	r4, r7
 80013f6:	e724      	b.n	8001242 <__udivmoddi4+0x10e>

080013f8 <__aeabi_idiv0>:
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop

080013fc <Error>:
extern char str1[100];
BME280_CalibData CalibData;
int32_t temper_int;
//------------------------------------------------
void Error(void)
{
 80013fc:	b508      	push	{r3, lr}
  LED_OFF;
 80013fe:	2200      	movs	r2, #0
 8001400:	2120      	movs	r1, #32
 8001402:	4802      	ldr	r0, [pc, #8]	; (800140c <Error+0x10>)
 8001404:	f001 faa6 	bl	8002954 <HAL_GPIO_WritePin>
}
 8001408:	bd08      	pop	{r3, pc}
 800140a:	bf00      	nop
 800140c:	40010800 	.word	0x40010800

08001410 <I2Cx_WriteData>:
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001410:	b500      	push	{lr}
 8001412:	b087      	sub	sp, #28
 8001414:	f88d 2017 	strb.w	r2, [sp, #23]
  HAL_StatusTypeDef status = HAL_OK;
  status = HAL_I2C_Mem_Write(&hi2c2, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8001418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	2301      	movs	r3, #1
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	f10d 0217 	add.w	r2, sp, #23
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	460a      	mov	r2, r1
 800142a:	4601      	mov	r1, r0
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <I2Cx_WriteData+0x30>)
 800142e:	f001 fea7 	bl	8003180 <HAL_I2C_Mem_Write>
  if(status != HAL_OK) Error();
 8001432:	b910      	cbnz	r0, 800143a <I2Cx_WriteData+0x2a>
}
 8001434:	b007      	add	sp, #28
 8001436:	f85d fb04 	ldr.w	pc, [sp], #4
  if(status != HAL_OK) Error();
 800143a:	f7ff ffdf 	bl	80013fc <Error>
}
 800143e:	e7f9      	b.n	8001434 <I2Cx_WriteData+0x24>
 8001440:	200006b0 	.word	0x200006b0

08001444 <I2Cx_ReadData>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001444:	b500      	push	{lr}
 8001446:	b087      	sub	sp, #28
 8001448:	460a      	mov	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8001450:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001454:	9302      	str	r3, [sp, #8]
 8001456:	2301      	movs	r3, #1
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	f10d 0117 	add.w	r1, sp, #23
 800145e:	9100      	str	r1, [sp, #0]
 8001460:	4601      	mov	r1, r0
 8001462:	4806      	ldr	r0, [pc, #24]	; (800147c <I2Cx_ReadData+0x38>)
 8001464:	f001 ff3e 	bl	80032e4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK) Error();
 8001468:	b920      	cbnz	r0, 8001474 <I2Cx_ReadData+0x30>
  return value;
}
 800146a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800146e:	b007      	add	sp, #28
 8001470:	f85d fb04 	ldr.w	pc, [sp], #4
  if(status != HAL_OK) Error();
 8001474:	f7ff ffc2 	bl	80013fc <Error>
 8001478:	e7f7      	b.n	800146a <I2Cx_ReadData+0x26>
 800147a:	bf00      	nop
 800147c:	200006b0 	.word	0x200006b0

08001480 <I2Cx_ReadData16>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8001480:	b500      	push	{lr}
 8001482:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8001484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2302      	movs	r3, #2
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	9200      	str	r2, [sp, #0]
 8001490:	2301      	movs	r3, #1
 8001492:	460a      	mov	r2, r1
 8001494:	4601      	mov	r1, r0
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <I2Cx_ReadData16+0x2c>)
 8001498:	f001 ff24 	bl	80032e4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK) Error();
 800149c:	b910      	cbnz	r0, 80014a4 <I2Cx_ReadData16+0x24>
}
 800149e:	b005      	add	sp, #20
 80014a0:	f85d fb04 	ldr.w	pc, [sp], #4
  if(status != HAL_OK) Error();
 80014a4:	f7ff ffaa 	bl	80013fc <Error>
}
 80014a8:	e7f9      	b.n	800149e <I2Cx_ReadData16+0x1e>
 80014aa:	bf00      	nop
 80014ac:	200006b0 	.word	0x200006b0

080014b0 <I2Cx_ReadData24>:
//------------------------------------------------
static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 80014b0:	b500      	push	{lr}
 80014b2:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 80014b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	2303      	movs	r3, #3
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	9200      	str	r2, [sp, #0]
 80014c0:	2301      	movs	r3, #1
 80014c2:	460a      	mov	r2, r1
 80014c4:	4601      	mov	r1, r0
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <I2Cx_ReadData24+0x2c>)
 80014c8:	f001 ff0c 	bl	80032e4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK) Error();
 80014cc:	b910      	cbnz	r0, 80014d4 <I2Cx_ReadData24+0x24>
}
 80014ce:	b005      	add	sp, #20
 80014d0:	f85d fb04 	ldr.w	pc, [sp], #4
  if(status != HAL_OK) Error();
 80014d4:	f7ff ff92 	bl	80013fc <Error>
}
 80014d8:	e7f9      	b.n	80014ce <I2Cx_ReadData24+0x1e>
 80014da:	bf00      	nop
 80014dc:	200006b0 	.word	0x200006b0

080014e0 <BME280_WriteReg>:
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 80014e0:	b508      	push	{r3, lr}
 80014e2:	460a      	mov	r2, r1
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 80014e4:	4601      	mov	r1, r0
 80014e6:	20ec      	movs	r0, #236	; 0xec
 80014e8:	f7ff ff92 	bl	8001410 <I2Cx_WriteData>
}
 80014ec:	bd08      	pop	{r3, pc}

080014ee <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 80014ee:	b508      	push	{r3, lr}
 80014f0:	4601      	mov	r1, r0
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 80014f2:	20ec      	movs	r0, #236	; 0xec
 80014f4:	f7ff ffa6 	bl	8001444 <I2Cx_ReadData>
  return res;
}
 80014f8:	bd08      	pop	{r3, pc}

080014fa <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 80014fa:	b508      	push	{r3, lr}
 80014fc:	460a      	mov	r2, r1
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 80014fe:	4601      	mov	r1, r0
 8001500:	20ec      	movs	r0, #236	; 0xec
 8001502:	f7ff ffbd 	bl	8001480 <I2Cx_ReadData16>
}
 8001506:	bd08      	pop	{r3, pc}

08001508 <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 8001508:	b508      	push	{r3, lr}
 800150a:	460a      	mov	r2, r1
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 800150c:	4601      	mov	r1, r0
 800150e:	20ec      	movs	r0, #236	; 0xec
 8001510:	f7ff ffb6 	bl	8001480 <I2Cx_ReadData16>
}
 8001514:	bd08      	pop	{r3, pc}

08001516 <BME280_ReadReg_BE_S16>:
//------------------------------------------------
void BME280_ReadReg_BE_S16(uint8_t Reg, int16_t *Value)
{
 8001516:	b510      	push	{r4, lr}
 8001518:	460c      	mov	r4, r1
  I2Cx_ReadData16(BME280_ADDRESS,Reg,(uint16_t*)Value);
 800151a:	460a      	mov	r2, r1
 800151c:	4601      	mov	r1, r0
 800151e:	20ec      	movs	r0, #236	; 0xec
 8001520:	f7ff ffae 	bl	8001480 <I2Cx_ReadData16>
  *(uint16_t *) Value = be16toword(*(uint16_t *) Value);
 8001524:	8822      	ldrh	r2, [r4, #0]
 8001526:	0a13      	lsrs	r3, r2, #8
 8001528:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800152c:	8023      	strh	r3, [r4, #0]
}
 800152e:	bd10      	pop	{r4, pc}

08001530 <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 8001530:	b510      	push	{r4, lr}
 8001532:	460c      	mov	r4, r1
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
 8001534:	460a      	mov	r2, r1
 8001536:	4601      	mov	r1, r0
 8001538:	20ec      	movs	r0, #236	; 0xec
 800153a:	f7ff ffb9 	bl	80014b0 <I2Cx_ReadData24>
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001544:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8001548:	430a      	orrs	r2, r1
 800154a:	041b      	lsls	r3, r3, #16
 800154c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001550:	4313      	orrs	r3, r2
 8001552:	6023      	str	r3, [r4, #0]
}
 8001554:	bd10      	pop	{r4, pc}

08001556 <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 8001556:	b508      	push	{r3, lr}
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 8001558:	20f3      	movs	r0, #243	; 0xf3
 800155a:	f7ff ffc8 	bl	80014ee <BME280_ReadReg>
  return res;
}
 800155e:	f000 0009 	and.w	r0, r0, #9
 8001562:	bd08      	pop	{r3, pc}

08001564 <BME280_ReadCoefficients>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 8001564:	b570      	push	{r4, r5, r6, lr}
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8001566:	4c65      	ldr	r4, [pc, #404]	; (80016fc <BME280_ReadCoefficients+0x198>)
 8001568:	4621      	mov	r1, r4
 800156a:	2088      	movs	r0, #136	; 0x88
 800156c:	f7ff ffc5 	bl	80014fa <BME280_ReadReg_U16>
  sprintf(str1, "DIG_T1: %u\r\n", CalibData.dig_T1);
 8001570:	4626      	mov	r6, r4
 8001572:	4d63      	ldr	r5, [pc, #396]	; (8001700 <BME280_ReadCoefficients+0x19c>)
 8001574:	f836 2b02 	ldrh.w	r2, [r6], #2
 8001578:	4962      	ldr	r1, [pc, #392]	; (8001704 <BME280_ReadCoefficients+0x1a0>)
 800157a:	4628      	mov	r0, r5
 800157c:	f003 fc5e 	bl	8004e3c <siprintf>
 // HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8001580:	4631      	mov	r1, r6
 8001582:	208a      	movs	r0, #138	; 0x8a
 8001584:	f7ff ffc0 	bl	8001508 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_T2: %d\r\n", CalibData.dig_T2);
 8001588:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800158c:	495e      	ldr	r1, [pc, #376]	; (8001708 <BME280_ReadCoefficients+0x1a4>)
 800158e:	4628      	mov	r0, r5
 8001590:	f003 fc54 	bl	8004e3c <siprintf>
 // HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 8001594:	1d21      	adds	r1, r4, #4
 8001596:	208c      	movs	r0, #140	; 0x8c
 8001598:	f7ff ffb6 	bl	8001508 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_T3: %d\r\n", CalibData.dig_T3);
 800159c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80015a0:	495a      	ldr	r1, [pc, #360]	; (800170c <BME280_ReadCoefficients+0x1a8>)
 80015a2:	4628      	mov	r0, r5
 80015a4:	f003 fc4a 	bl	8004e3c <siprintf>
 // HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 80015a8:	1da1      	adds	r1, r4, #6
 80015aa:	208e      	movs	r0, #142	; 0x8e
 80015ac:	f7ff ffa5 	bl	80014fa <BME280_ReadReg_U16>
  sprintf(str1, "DIG_P1: %u\r\n", CalibData.dig_P1);
 80015b0:	88e2      	ldrh	r2, [r4, #6]
 80015b2:	4957      	ldr	r1, [pc, #348]	; (8001710 <BME280_ReadCoefficients+0x1ac>)
 80015b4:	4628      	mov	r0, r5
 80015b6:	f003 fc41 	bl	8004e3c <siprintf>
 // HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 80015ba:	f104 0108 	add.w	r1, r4, #8
 80015be:	2090      	movs	r0, #144	; 0x90
 80015c0:	f7ff ffa2 	bl	8001508 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P2: %d\r\n", CalibData.dig_P2);
 80015c4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80015c8:	4952      	ldr	r1, [pc, #328]	; (8001714 <BME280_ReadCoefficients+0x1b0>)
 80015ca:	4628      	mov	r0, r5
 80015cc:	f003 fc36 	bl	8004e3c <siprintf>
 // HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 80015d0:	f104 010a 	add.w	r1, r4, #10
 80015d4:	2092      	movs	r0, #146	; 0x92
 80015d6:	f7ff ff97 	bl	8001508 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P3: %d\r\n", CalibData.dig_P3);
 80015da:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80015de:	494e      	ldr	r1, [pc, #312]	; (8001718 <BME280_ReadCoefficients+0x1b4>)
 80015e0:	4628      	mov	r0, r5
 80015e2:	f003 fc2b 	bl	8004e3c <siprintf>
 // HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 80015e6:	f104 010c 	add.w	r1, r4, #12
 80015ea:	2094      	movs	r0, #148	; 0x94
 80015ec:	f7ff ff8c 	bl	8001508 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P4: %d\r\n", CalibData.dig_P4);
 80015f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80015f4:	4949      	ldr	r1, [pc, #292]	; (800171c <BME280_ReadCoefficients+0x1b8>)
 80015f6:	4628      	mov	r0, r5
 80015f8:	f003 fc20 	bl	8004e3c <siprintf>
 // HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 80015fc:	f104 010e 	add.w	r1, r4, #14
 8001600:	2096      	movs	r0, #150	; 0x96
 8001602:	f7ff ff81 	bl	8001508 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P5: %d\r\n", CalibData.dig_P5);
 8001606:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800160a:	4945      	ldr	r1, [pc, #276]	; (8001720 <BME280_ReadCoefficients+0x1bc>)
 800160c:	4628      	mov	r0, r5
 800160e:	f003 fc15 	bl	8004e3c <siprintf>
 // HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 8001612:	f104 0110 	add.w	r1, r4, #16
 8001616:	2098      	movs	r0, #152	; 0x98
 8001618:	f7ff ff76 	bl	8001508 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P6: %d\r\n", CalibData.dig_P6);
 800161c:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8001620:	4940      	ldr	r1, [pc, #256]	; (8001724 <BME280_ReadCoefficients+0x1c0>)
 8001622:	4628      	mov	r0, r5
 8001624:	f003 fc0a 	bl	8004e3c <siprintf>
 // HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8001628:	f104 0112 	add.w	r1, r4, #18
 800162c:	209a      	movs	r0, #154	; 0x9a
 800162e:	f7ff ff6b 	bl	8001508 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P7: %d\r\n", CalibData.dig_P7);
 8001632:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8001636:	493c      	ldr	r1, [pc, #240]	; (8001728 <BME280_ReadCoefficients+0x1c4>)
 8001638:	4628      	mov	r0, r5
 800163a:	f003 fbff 	bl	8004e3c <siprintf>
 // HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 800163e:	f104 0114 	add.w	r1, r4, #20
 8001642:	209c      	movs	r0, #156	; 0x9c
 8001644:	f7ff ff60 	bl	8001508 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P8: %d\r\n", CalibData.dig_P8);
 8001648:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800164c:	4937      	ldr	r1, [pc, #220]	; (800172c <BME280_ReadCoefficients+0x1c8>)
 800164e:	4628      	mov	r0, r5
 8001650:	f003 fbf4 	bl	8004e3c <siprintf>
 // HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8001654:	f104 0116 	add.w	r1, r4, #22
 8001658:	209e      	movs	r0, #158	; 0x9e
 800165a:	f7ff ff55 	bl	8001508 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P9: %d\r\n", CalibData.dig_P9);
 800165e:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8001662:	4933      	ldr	r1, [pc, #204]	; (8001730 <BME280_ReadCoefficients+0x1cc>)
 8001664:	4628      	mov	r0, r5
 8001666:	f003 fbe9 	bl	8004e3c <siprintf>
 // HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 800166a:	20a1      	movs	r0, #161	; 0xa1
 800166c:	f7ff ff3f 	bl	80014ee <BME280_ReadReg>
 8001670:	4602      	mov	r2, r0
 8001672:	7620      	strb	r0, [r4, #24]
  sprintf(str1, "DIG_H1: %d\r\n", CalibData.dig_H1);
 8001674:	492f      	ldr	r1, [pc, #188]	; (8001734 <BME280_ReadCoefficients+0x1d0>)
 8001676:	4628      	mov	r0, r5
 8001678:	f003 fbe0 	bl	8004e3c <siprintf>
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 800167c:	f104 011a 	add.w	r1, r4, #26
 8001680:	20e1      	movs	r0, #225	; 0xe1
 8001682:	f7ff ff41 	bl	8001508 <BME280_ReadReg_S16>
  sprintf(str1, "DIG_H2: %d\r\n", CalibData.dig_H2);
 8001686:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 800168a:	492b      	ldr	r1, [pc, #172]	; (8001738 <BME280_ReadCoefficients+0x1d4>)
 800168c:	4628      	mov	r0, r5
 800168e:	f003 fbd5 	bl	8004e3c <siprintf>
 // HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 8001692:	20e3      	movs	r0, #227	; 0xe3
 8001694:	f7ff ff2b 	bl	80014ee <BME280_ReadReg>
 8001698:	4602      	mov	r2, r0
 800169a:	7720      	strb	r0, [r4, #28]
  sprintf(str1, "DIG_H3: %d\r\n", CalibData.dig_H3);
 800169c:	4927      	ldr	r1, [pc, #156]	; (800173c <BME280_ReadCoefficients+0x1d8>)
 800169e:	4628      	mov	r0, r5
 80016a0:	f003 fbcc 	bl	8004e3c <siprintf>
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 80016a4:	20e4      	movs	r0, #228	; 0xe4
 80016a6:	f7ff ff22 	bl	80014ee <BME280_ReadReg>
 80016aa:	0106      	lsls	r6, r0, #4
 80016ac:	20e5      	movs	r0, #229	; 0xe5
 80016ae:	f7ff ff1e 	bl	80014ee <BME280_ReadReg>
 80016b2:	f000 020f 	and.w	r2, r0, #15
 80016b6:	4332      	orrs	r2, r6
 80016b8:	b212      	sxth	r2, r2
 80016ba:	83e2      	strh	r2, [r4, #30]
  sprintf(str1, "DIG_H4: %d\r\n", CalibData.dig_H4);
 80016bc:	4920      	ldr	r1, [pc, #128]	; (8001740 <BME280_ReadCoefficients+0x1dc>)
 80016be:	4628      	mov	r0, r5
 80016c0:	f003 fbbc 	bl	8004e3c <siprintf>
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 80016c4:	20e6      	movs	r0, #230	; 0xe6
 80016c6:	f7ff ff12 	bl	80014ee <BME280_ReadReg>
 80016ca:	0106      	lsls	r6, r0, #4
 80016cc:	20e5      	movs	r0, #229	; 0xe5
 80016ce:	f7ff ff0e 	bl	80014ee <BME280_ReadReg>
 80016d2:	f3c0 1207 	ubfx	r2, r0, #4, #8
 80016d6:	4332      	orrs	r2, r6
 80016d8:	b212      	sxth	r2, r2
 80016da:	8422      	strh	r2, [r4, #32]
  sprintf(str1, "DIG_H5: %d\r\n", CalibData.dig_H5);
 80016dc:	4919      	ldr	r1, [pc, #100]	; (8001744 <BME280_ReadCoefficients+0x1e0>)
 80016de:	4628      	mov	r0, r5
 80016e0:	f003 fbac 	bl	8004e3c <siprintf>
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 80016e4:	20e7      	movs	r0, #231	; 0xe7
 80016e6:	f7ff ff02 	bl	80014ee <BME280_ReadReg>
 80016ea:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  sprintf(str1, "DIG_H6: %d\r\n", CalibData.dig_H3);
 80016ee:	7f22      	ldrb	r2, [r4, #28]
 80016f0:	4915      	ldr	r1, [pc, #84]	; (8001748 <BME280_ReadCoefficients+0x1e4>)
 80016f2:	4628      	mov	r0, r5
 80016f4:	f003 fba2 	bl	8004e3c <siprintf>
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
}
 80016f8:	bd70      	pop	{r4, r5, r6, pc}
 80016fa:	bf00      	nop
 80016fc:	20000634 	.word	0x20000634
 8001700:	20000744 	.word	0x20000744
 8001704:	0800c0cc 	.word	0x0800c0cc
 8001708:	0800c0dc 	.word	0x0800c0dc
 800170c:	0800c0ec 	.word	0x0800c0ec
 8001710:	0800c0fc 	.word	0x0800c0fc
 8001714:	0800c10c 	.word	0x0800c10c
 8001718:	0800c11c 	.word	0x0800c11c
 800171c:	0800c12c 	.word	0x0800c12c
 8001720:	0800c13c 	.word	0x0800c13c
 8001724:	0800c14c 	.word	0x0800c14c
 8001728:	0800c15c 	.word	0x0800c15c
 800172c:	0800c16c 	.word	0x0800c16c
 8001730:	0800c17c 	.word	0x0800c17c
 8001734:	0800c18c 	.word	0x0800c18c
 8001738:	0800c19c 	.word	0x0800c19c
 800173c:	0800c1ac 	.word	0x0800c1ac
 8001740:	0800c1bc 	.word	0x0800c1bc
 8001744:	0800c1cc 	.word	0x0800c1cc
 8001748:	0800c1dc 	.word	0x0800c1dc

0800174c <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 800174c:	b510      	push	{r4, lr}
 800174e:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8001750:	20f5      	movs	r0, #245	; 0xf5
 8001752:	f7ff fecc 	bl	80014ee <BME280_ReadReg>
 8001756:	f000 001f 	and.w	r0, r0, #31
  reg |= tsb & BME280_STBY_MSK;
 800175a:	f024 011f 	bic.w	r1, r4, #31
 800175e:	b249      	sxtb	r1, r1
 8001760:	4301      	orrs	r1, r0
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001762:	b2c9      	uxtb	r1, r1
 8001764:	20f5      	movs	r0, #245	; 0xf5
 8001766:	f7ff febb 	bl	80014e0 <BME280_WriteReg>
}
 800176a:	bd10      	pop	{r4, pc}

0800176c <BME280_SetFilter>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 800176c:	b510      	push	{r4, lr}
 800176e:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8001770:	20f5      	movs	r0, #245	; 0xf5
 8001772:	f7ff febc 	bl	80014ee <BME280_ReadReg>
 8001776:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
  reg |= filter & BME280_FILTER_MSK;
 800177a:	f004 041c 	and.w	r4, r4, #28
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 800177e:	4321      	orrs	r1, r4
 8001780:	20f5      	movs	r0, #245	; 0xf5
 8001782:	f7ff fead 	bl	80014e0 <BME280_WriteReg>
}
 8001786:	bd10      	pop	{r4, pc}

08001788 <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 8001788:	b510      	push	{r4, lr}
 800178a:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 800178c:	20f4      	movs	r0, #244	; 0xf4
 800178e:	f7ff feae 	bl	80014ee <BME280_ReadReg>
 8001792:	f000 001f 	and.w	r0, r0, #31
  reg |= osrs & BME280_OSRS_T_MSK;
 8001796:	f024 011f 	bic.w	r1, r4, #31
 800179a:	b249      	sxtb	r1, r1
 800179c:	4301      	orrs	r1, r0
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 800179e:	b2c9      	uxtb	r1, r1
 80017a0:	20f4      	movs	r0, #244	; 0xf4
 80017a2:	f7ff fe9d 	bl	80014e0 <BME280_WriteReg>
}
 80017a6:	bd10      	pop	{r4, pc}

080017a8 <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 80017a8:	b510      	push	{r4, lr}
 80017aa:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 80017ac:	20f4      	movs	r0, #244	; 0xf4
 80017ae:	f7ff fe9e 	bl	80014ee <BME280_ReadReg>
 80017b2:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
  reg |= osrs & BME280_OSRS_P_MSK;
 80017b6:	f004 041c 	and.w	r4, r4, #28
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80017ba:	4321      	orrs	r1, r4
 80017bc:	20f4      	movs	r0, #244	; 0xf4
 80017be:	f7ff fe8f 	bl	80014e0 <BME280_WriteReg>
}
 80017c2:	bd10      	pop	{r4, pc}

080017c4 <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 80017c4:	b510      	push	{r4, lr}
 80017c6:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 80017c8:	20f2      	movs	r0, #242	; 0xf2
 80017ca:	f7ff fe90 	bl	80014ee <BME280_ReadReg>
 80017ce:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
  reg |= osrs & BME280_OSRS_H_MSK;
 80017d2:	f004 0407 	and.w	r4, r4, #7
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 80017d6:	4321      	orrs	r1, r4
 80017d8:	20f2      	movs	r0, #242	; 0xf2
 80017da:	f7ff fe81 	bl	80014e0 <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 80017de:	20f4      	movs	r0, #244	; 0xf4
 80017e0:	f7ff fe85 	bl	80014ee <BME280_ReadReg>
 80017e4:	4601      	mov	r1, r0
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80017e6:	20f4      	movs	r0, #244	; 0xf4
 80017e8:	f7ff fe7a 	bl	80014e0 <BME280_WriteReg>
}
 80017ec:	bd10      	pop	{r4, pc}

080017ee <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 80017ee:	b510      	push	{r4, lr}
 80017f0:	4604      	mov	r4, r0
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 80017f2:	20f4      	movs	r0, #244	; 0xf4
 80017f4:	f7ff fe7b 	bl	80014ee <BME280_ReadReg>
 80017f8:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  reg |= mode & BME280_MODE_MSK;
 80017fc:	f004 0403 	and.w	r4, r4, #3
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001800:	4321      	orrs	r1, r4
 8001802:	20f4      	movs	r0, #244	; 0xf4
 8001804:	f7ff fe6c 	bl	80014e0 <BME280_WriteReg>
}
 8001808:	bd10      	pop	{r4, pc}
	...

0800180c <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 800180c:	b510      	push	{r4, lr}
 800180e:	b082      	sub	sp, #8
  float temper_float = 0.0f;
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 8001810:	a901      	add	r1, sp, #4
 8001812:	20fa      	movs	r0, #250	; 0xfa
 8001814:	f7ff fe8c 	bl	8001530 <BME280_ReadReg_BE_U24>
	temper_raw >>= 4;
 8001818:	9c01      	ldr	r4, [sp, #4]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 800181a:	4911      	ldr	r1, [pc, #68]	; (8001860 <BME280_ReadTemperature+0x54>)
 800181c:	8808      	ldrh	r0, [r1, #0]
 800181e:	0042      	lsls	r2, r0, #1
 8001820:	ebc2 13d4 	rsb	r3, r2, r4, lsr #7
		((int32_t)CalibData.dig_T2)) >> 11;
 8001824:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001828:	fb02 f203 	mul.w	r2, r2, r3
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800182c:	ebc0 2014 	rsb	r0, r0, r4, lsr #8
 8001830:	fb00 f000 	mul.w	r0, r0, r0
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001834:	0b03      	lsrs	r3, r0, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 8001836:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 800183a:	fb00 f003 	mul.w	r0, r0, r3
		((int32_t)CalibData.dig_T3)) >> 14;
 800183e:	0b80      	lsrs	r0, r0, #14
	temper_int = val1 + val2;
 8001840:	eb00 20d2 	add.w	r0, r0, r2, lsr #11
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <BME280_ReadTemperature+0x58>)
 8001846:	6018      	str	r0, [r3, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 8001848:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800184c:	3080      	adds	r0, #128	; 0x80
 800184e:	1200      	asrs	r0, r0, #8
 8001850:	f7ff fa44 	bl	8000cdc <__aeabi_i2f>
	temper_float /= 100.0f;
 8001854:	4904      	ldr	r1, [pc, #16]	; (8001868 <BME280_ReadTemperature+0x5c>)
 8001856:	f7ff fb49 	bl	8000eec <__aeabi_fdiv>
  return temper_float;
}
 800185a:	b002      	add	sp, #8
 800185c:	bd10      	pop	{r4, pc}
 800185e:	bf00      	nop
 8001860:	20000634 	.word	0x20000634
 8001864:	20000658 	.word	0x20000658
 8001868:	42c80000 	.word	0x42c80000

0800186c <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 800186c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001870:	b083      	sub	sp, #12
  float press_float = 0.0f;
	uint32_t press_raw, pres_int;
	int64_t val1, val2, p;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001872:	f7ff ffcb 	bl	800180c <BME280_ReadTemperature>
	BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 8001876:	a901      	add	r1, sp, #4
 8001878:	20f7      	movs	r0, #247	; 0xf7
 800187a:	f7ff fe59 	bl	8001530 <BME280_ReadReg_BE_U24>
	press_raw >>= 4;
 800187e:	9b01      	ldr	r3, [sp, #4]
 8001880:	ea4f 1c13 	mov.w	ip, r3, lsr #4
	val1 = ((int64_t) temper_int) - 128000;
 8001884:	4b6f      	ldr	r3, [pc, #444]	; (8001a44 <BME280_ReadPressure+0x1d8>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	17d3      	asrs	r3, r2, #31
 800188a:	f5b2 37fa 	subs.w	r7, r2, #128000	; 0x1f400
 800188e:	f143 36ff 	adc.w	r6, r3, #4294967295
	val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 8001892:	fb07 f306 	mul.w	r3, r7, r6
 8001896:	fba7 8907 	umull	r8, r9, r7, r7
 800189a:	eb09 0943 	add.w	r9, r9, r3, lsl #1
 800189e:	496a      	ldr	r1, [pc, #424]	; (8001a48 <BME280_ReadPressure+0x1dc>)
 80018a0:	f9b1 4010 	ldrsh.w	r4, [r1, #16]
 80018a4:	17e5      	asrs	r5, r4, #31
 80018a6:	fb08 f305 	mul.w	r3, r8, r5
 80018aa:	fb04 3309 	mla	r3, r4, r9, r3
 80018ae:	fba8 4504 	umull	r4, r5, r8, r4
 80018b2:	441d      	add	r5, r3
	val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 80018b4:	f9b1 200e 	ldrsh.w	r2, [r1, #14]
 80018b8:	17d3      	asrs	r3, r2, #31
 80018ba:	fb02 f006 	mul.w	r0, r2, r6
 80018be:	fb07 0003 	mla	r0, r7, r3, r0
 80018c2:	fba2 2307 	umull	r2, r3, r2, r7
 80018c6:	4403      	add	r3, r0
 80018c8:	ea4f 4e43 	mov.w	lr, r3, lsl #17
 80018cc:	ea4e 3ed2 	orr.w	lr, lr, r2, lsr #15
 80018d0:	0450      	lsls	r0, r2, #17
 80018d2:	1900      	adds	r0, r0, r4
 80018d4:	eb4e 0e05 	adc.w	lr, lr, r5
	val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 80018d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80018dc:	2500      	movs	r5, #0
 80018de:	00d4      	lsls	r4, r2, #3
 80018e0:	1828      	adds	r0, r5, r0
 80018e2:	eb44 040e 	adc.w	r4, r4, lr
	val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) + ((val1 * (int64_t)CalibData.dig_P2) << 12);
 80018e6:	f9b1 a00a 	ldrsh.w	sl, [r1, #10]
 80018ea:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80018ee:	fb08 f30b 	mul.w	r3, r8, fp
 80018f2:	fb0a 3309 	mla	r3, sl, r9, r3
 80018f6:	fba8 890a 	umull	r8, r9, r8, sl
 80018fa:	4499      	add	r9, r3
 80018fc:	ea4f 2518 	mov.w	r5, r8, lsr #8
 8001900:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8001904:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8001908:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
 800190c:	17d3      	asrs	r3, r2, #31
 800190e:	fb02 f606 	mul.w	r6, r2, r6
 8001912:	fb07 6603 	mla	r6, r7, r3, r6
 8001916:	fba2 2307 	umull	r2, r3, r2, r7
 800191a:	4433      	add	r3, r6
 800191c:	031f      	lsls	r7, r3, #12
 800191e:	ea47 5712 	orr.w	r7, r7, r2, lsr #20
 8001922:	0316      	lsls	r6, r2, #12
 8001924:	19ad      	adds	r5, r5, r6
 8001926:	eb4e 0e07 	adc.w	lr, lr, r7
	val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 800192a:	3500      	adds	r5, #0
 800192c:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
 8001930:	88ca      	ldrh	r2, [r1, #6]
 8001932:	fba5 6702 	umull	r6, r7, r5, r2
 8001936:	fb02 770e 	mla	r7, r2, lr, r7
 800193a:	107a      	asrs	r2, r7, #1
 800193c:	17fb      	asrs	r3, r7, #31
	if (val1 == 0) {
 800193e:	ea52 0103 	orrs.w	r1, r2, r3
 8001942:	d07c      	beq.n	8001a3e <BME280_ReadPressure+0x1d2>
		return 0; // avoid exception caused by division by zero
	}
	p = 1048576 - press_raw;
 8001944:	f5cc 1c80 	rsb	ip, ip, #1048576	; 0x100000
	p = (((p << 31) - val2) * 3125) / val1;
 8001948:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800194c:	ea4f 75cc 	mov.w	r5, ip, lsl #31
 8001950:	1a28      	subs	r0, r5, r0
 8001952:	eb61 0104 	sbc.w	r1, r1, r4
 8001956:	1805      	adds	r5, r0, r0
 8001958:	eb41 0601 	adc.w	r6, r1, r1
 800195c:	182d      	adds	r5, r5, r0
 800195e:	eb41 0606 	adc.w	r6, r1, r6
 8001962:	01b4      	lsls	r4, r6, #6
 8001964:	ea44 6495 	orr.w	r4, r4, r5, lsr #26
 8001968:	01af      	lsls	r7, r5, #6
 800196a:	19ed      	adds	r5, r5, r7
 800196c:	eb44 0606 	adc.w	r6, r4, r6
 8001970:	00b4      	lsls	r4, r6, #2
 8001972:	ea44 7495 	orr.w	r4, r4, r5, lsr #30
 8001976:	00af      	lsls	r7, r5, #2
 8001978:	4626      	mov	r6, r4
 800197a:	183d      	adds	r5, r7, r0
 800197c:	eb41 0606 	adc.w	r6, r1, r6
 8001980:	00b4      	lsls	r4, r6, #2
 8001982:	ea44 7495 	orr.w	r4, r4, r5, lsr #30
 8001986:	00af      	lsls	r7, r5, #2
 8001988:	1838      	adds	r0, r7, r0
 800198a:	eb44 0101 	adc.w	r1, r4, r1
 800198e:	f7ff fb49 	bl	8001024 <__aeabi_ldivmod>
	val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001992:	4d2d      	ldr	r5, [pc, #180]	; (8001a48 <BME280_ReadPressure+0x1dc>)
 8001994:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 8001998:	17d3      	asrs	r3, r2, #31
 800199a:	0b44      	lsrs	r4, r0, #13
 800199c:	ea44 44c1 	orr.w	r4, r4, r1, lsl #19
 80019a0:	134e      	asrs	r6, r1, #13
 80019a2:	fb02 f706 	mul.w	r7, r2, r6
 80019a6:	fb04 7703 	mla	r7, r4, r3, r7
 80019aa:	fba2 8904 	umull	r8, r9, r2, r4
 80019ae:	44b9      	add	r9, r7
 80019b0:	fb04 f309 	mul.w	r3, r4, r9
 80019b4:	fb06 3608 	mla	r6, r6, r8, r3
 80019b8:	fba4 2308 	umull	r2, r3, r4, r8
 80019bc:	4433      	add	r3, r6
 80019be:	0e56      	lsrs	r6, r2, #25
 80019c0:	ea46 16c3 	orr.w	r6, r6, r3, lsl #7
 80019c4:	165f      	asrs	r7, r3, #25
	val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 80019c6:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 80019ca:	17d3      	asrs	r3, r2, #31
 80019cc:	fb02 f401 	mul.w	r4, r2, r1
 80019d0:	fb00 4403 	mla	r4, r0, r3, r4
 80019d4:	fba2 2300 	umull	r2, r3, r2, r0
 80019d8:	4423      	add	r3, r4
 80019da:	0cd4      	lsrs	r4, r2, #19
 80019dc:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
 80019e0:	ea4f 4ce3 	mov.w	ip, r3, asr #19
	p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 80019e4:	1980      	adds	r0, r0, r6
 80019e6:	eb47 0101 	adc.w	r1, r7, r1
 80019ea:	1900      	adds	r0, r0, r4
 80019ec:	eb41 010c 	adc.w	r1, r1, ip
 80019f0:	0a03      	lsrs	r3, r0, #8
 80019f2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80019f6:	120a      	asrs	r2, r1, #8
 80019f8:	f9b5 4012 	ldrsh.w	r4, [r5, #18]
 80019fc:	17e5      	asrs	r5, r4, #31
 80019fe:	0129      	lsls	r1, r5, #4
 8001a00:	ea41 7114 	orr.w	r1, r1, r4, lsr #28
 8001a04:	0120      	lsls	r0, r4, #4
 8001a06:	181b      	adds	r3, r3, r0
 8001a08:	eb41 0202 	adc.w	r2, r1, r2
	pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 8001a0c:	0a19      	lsrs	r1, r3, #8
 8001a0e:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
 8001a12:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001a16:	fb04 f401 	mul.w	r4, r4, r1
 8001a1a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <BME280_ReadPressure+0x1e0>)
 8001a20:	2300      	movs	r3, #0
 8001a22:	490b      	ldr	r1, [pc, #44]	; (8001a50 <BME280_ReadPressure+0x1e4>)
 8001a24:	fba0 0101 	umull	r0, r1, r0, r1
 8001a28:	f7ff fafc 	bl	8001024 <__aeabi_ldivmod>
	press_float = pres_int / 100.0f;
 8001a2c:	4420      	add	r0, r4
 8001a2e:	f7ff f951 	bl	8000cd4 <__aeabi_ui2f>
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <BME280_ReadPressure+0x1e8>)
 8001a34:	f7ff fa5a 	bl	8000eec <__aeabi_fdiv>
  return press_float;
}
 8001a38:	b003      	add	sp, #12
 8001a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0; // avoid exception caused by division by zero
 8001a3e:	2000      	movs	r0, #0
 8001a40:	e7fa      	b.n	8001a38 <BME280_ReadPressure+0x1cc>
 8001a42:	bf00      	nop
 8001a44:	20000658 	.word	0x20000658
 8001a48:	20000634 	.word	0x20000634
 8001a4c:	000186a0 	.word	0x000186a0
 8001a50:	0005f5e1 	.word	0x0005f5e1
 8001a54:	42c80000 	.word	0x42c80000

08001a58 <BME280_ReadHumidity>:
//------------------------------------------------
float BME280_ReadHumidity(void)
{
 8001a58:	b510      	push	{r4, lr}
 8001a5a:	b082      	sub	sp, #8
  float hum_float = 0.0f;
	int16_t hum_raw;
	int32_t hum_raw_sign, v_x1_u32r;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001a5c:	f7ff fed6 	bl	800180c <BME280_ReadTemperature>
	BME280_ReadReg_BE_S16(BME280_REGISTER_HUMIDDATA,&hum_raw);
 8001a60:	f10d 0106 	add.w	r1, sp, #6
 8001a64:	20fd      	movs	r0, #253	; 0xfd
 8001a66:	f7ff fd56 	bl	8001516 <BME280_ReadReg_BE_S16>
	hum_raw_sign = ((int32_t)hum_raw)&0x0000FFFF;
 8001a6a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
	v_x1_u32r = (temper_int - ((int32_t)76800));
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <BME280_ReadHumidity+0xa0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001a76:	4821      	ldr	r0, [pc, #132]	; (8001afc <BME280_ReadHumidity+0xa4>)
 8001a78:	ea00 3082 	and.w	r0, r0, r2, lsl #14
 8001a7c:	4920      	ldr	r1, [pc, #128]	; (8001b00 <BME280_ReadHumidity+0xa8>)
 8001a7e:	f9b1 201e 	ldrsh.w	r2, [r1, #30]
 8001a82:	eba0 5202 	sub.w	r2, r0, r2, lsl #20
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8001a86:	f9b1 0020 	ldrsh.w	r0, [r1, #32]
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001a8a:	fb03 2010 	mls	r0, r3, r0, r2
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8001a8e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8001a92:	13c2      	asrs	r2, r0, #15
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8001a94:	f991 0022 	ldrsb.w	r0, [r1, #34]	; 0x22
 8001a98:	fb03 f000 	mul.w	r0, r3, r0
 8001a9c:	1284      	asrs	r4, r0, #10
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001a9e:	7f08      	ldrb	r0, [r1, #28]
 8001aa0:	fb03 f000 	mul.w	r0, r3, r0
 8001aa4:	12c0      	asrs	r0, r0, #11
 8001aa6:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8001aaa:	fb00 f004 	mul.w	r0, r0, r4
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001aae:	1280      	asrs	r0, r0, #10
 8001ab0:	f500 1300 	add.w	r3, r0, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.dig_H2) + 8192) >> 14));
 8001ab4:	f9b1 001a 	ldrsh.w	r0, [r1, #26]
 8001ab8:	fb00 f003 	mul.w	r0, r0, r3
 8001abc:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 8001ac0:	1380      	asrs	r0, r0, #14
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001ac2:	fb00 f002 	mul.w	r0, r0, r2
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001ac6:	13c3      	asrs	r3, r0, #15
 8001ac8:	fb03 f303 	mul.w	r3, r3, r3
 8001acc:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.dig_H1)) >> 4));
 8001ace:	7e0a      	ldrb	r2, [r1, #24]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	eba0 1023 	sub.w	r0, r0, r3, asr #4
	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8001ad8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8001adc:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 8001ae0:	bfa8      	it	ge
 8001ae2:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
	hum_float = (v_x1_u32r>>12);
 8001ae6:	1300      	asrs	r0, r0, #12
 8001ae8:	f7ff f8f8 	bl	8000cdc <__aeabi_i2f>
	hum_float /= 1024.0f;
 8001aec:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8001af0:	f7ff f948 	bl	8000d84 <__aeabi_fmul>
  return hum_float;
}
 8001af4:	b002      	add	sp, #8
 8001af6:	bd10      	pop	{r4, pc}
 8001af8:	20000658 	.word	0x20000658
 8001afc:	3fffc000 	.word	0x3fffc000
 8001b00:	20000634 	.word	0x20000634
 8001b04:	00000000 	.word	0x00000000

08001b08 <BME280_ReadAltitude>:
//------------------------------------------------
float BME280_ReadAltitude(float seaLevel)
{
 8001b08:	b510      	push	{r4, lr}
 8001b0a:	4604      	mov	r4, r0
  float att = 0.0f;
	float atm = BME280_ReadPressure();
 8001b0c:	f7ff feae 	bl	800186c <BME280_ReadPressure>
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
 8001b10:	4621      	mov	r1, r4
 8001b12:	f7ff f9eb 	bl	8000eec <__aeabi_fdiv>
 8001b16:	f7fe fc87 	bl	8000428 <__aeabi_f2d>
 8001b1a:	a309      	add	r3, pc, #36	; (adr r3, 8001b40 <BME280_ReadAltitude+0x38>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f006 ff24 	bl	800896c <pow>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	2000      	movs	r0, #0
 8001b2a:	4909      	ldr	r1, [pc, #36]	; (8001b50 <BME280_ReadAltitude+0x48>)
 8001b2c:	f7fe fb1c 	bl	8000168 <__aeabi_dsub>
 8001b30:	a305      	add	r3, pc, #20	; (adr r3, 8001b48 <BME280_ReadAltitude+0x40>)
 8001b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b36:	f7fe fccf 	bl	80004d8 <__aeabi_dmul>
 8001b3a:	f7fe ffc5 	bl	8000ac8 <__aeabi_d2f>
  return att;
}
 8001b3e:	bd10      	pop	{r4, pc}
 8001b40:	1a36e2eb 	.word	0x1a36e2eb
 8001b44:	3fc85bc0 	.word	0x3fc85bc0
 8001b48:	00000000 	.word	0x00000000
 8001b4c:	40e5a540 	.word	0x40e5a540
 8001b50:	3ff00000 	.word	0x3ff00000

08001b54 <BME280_Init>:
//------------------------------------------------
void BME280_Init(void)
{
 8001b54:	b510      	push	{r4, lr}
 8001b56:	b082      	sub	sp, #8
  uint8_t value=0;
  uint32_t value32=0;
  LED_ON;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	482a      	ldr	r0, [pc, #168]	; (8001c08 <BME280_Init+0xb4>)
 8001b5e:	f000 fef9 	bl	8002954 <HAL_GPIO_WritePin>
	value = BME280_ReadReg(BME280_REG_ID);
 8001b62:	20d0      	movs	r0, #208	; 0xd0
 8001b64:	f7ff fcc3 	bl	80014ee <BME280_ReadReg>
 8001b68:	4604      	mov	r4, r0
	sprintf(str1, "\r\n\r\nID: 0x%02X\r\n", value);
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	4927      	ldr	r1, [pc, #156]	; (8001c0c <BME280_Init+0xb8>)
 8001b6e:	4828      	ldr	r0, [pc, #160]	; (8001c10 <BME280_Init+0xbc>)
 8001b70:	f003 f964 	bl	8004e3c <siprintf>
	//HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	if(value !=BME280_ID)
 8001b74:	2c60      	cmp	r4, #96	; 0x60
 8001b76:	d002      	beq.n	8001b7e <BME280_Init+0x2a>
	{
		Error();
 8001b78:	f7ff fc40 	bl	80013fc <Error>
		return;
 8001b7c:	e03b      	b.n	8001bf6 <BME280_Init+0xa2>
	}
	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 8001b7e:	21b6      	movs	r1, #182	; 0xb6
 8001b80:	20e0      	movs	r0, #224	; 0xe0
 8001b82:	f7ff fcad 	bl	80014e0 <BME280_WriteReg>
	while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 8001b86:	f7ff fce6 	bl	8001556 <BME280_ReadStatus>
 8001b8a:	f010 0f01 	tst.w	r0, #1
 8001b8e:	d1fa      	bne.n	8001b86 <BME280_Init+0x32>
	BME280_ReadCoefficients();
 8001b90:	f7ff fce8 	bl	8001564 <BME280_ReadCoefficients>
	BME280_SetStandby(BME280_STBY_1000);
 8001b94:	20a0      	movs	r0, #160	; 0xa0
 8001b96:	f7ff fdd9 	bl	800174c <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);
 8001b9a:	2008      	movs	r0, #8
 8001b9c:	f7ff fde6 	bl	800176c <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 8001ba0:	2060      	movs	r0, #96	; 0x60
 8001ba2:	f7ff fdf1 	bl	8001788 <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 8001ba6:	2008      	movs	r0, #8
 8001ba8:	f7ff fdfe 	bl	80017a8 <BME280_SetOversamplingPressure>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 8001bac:	2001      	movs	r0, #1
 8001bae:	f7ff fe09 	bl	80017c4 <BME280_SetOversamplingHum>
	value32 = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8001bb2:	20f4      	movs	r0, #244	; 0xf4
 8001bb4:	f7ff fc9b 	bl	80014ee <BME280_ReadReg>
 8001bb8:	4604      	mov	r4, r0
	value32 |= BME280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 8001bba:	20f2      	movs	r0, #242	; 0xf2
 8001bbc:	f7ff fc97 	bl	80014ee <BME280_ReadReg>
 8001bc0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	sprintf(str1, "Measurements status: %04X\r\n", value32);
 8001bc4:	4622      	mov	r2, r4
 8001bc6:	4913      	ldr	r1, [pc, #76]	; (8001c14 <BME280_Init+0xc0>)
 8001bc8:	4811      	ldr	r0, [pc, #68]	; (8001c10 <BME280_Init+0xbc>)
 8001bca:	f003 f937 	bl	8004e3c <siprintf>
	//HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
 8001bce:	f014 0fe0 	tst.w	r4, #224	; 0xe0
 8001bd2:	d012      	beq.n	8001bfa <BME280_Init+0xa6>
 8001bd4:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <BME280_Init+0xc4>)
 8001bd6:	f014 0f1c 	tst.w	r4, #28
 8001bda:	d010      	beq.n	8001bfe <BME280_Init+0xaa>
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <BME280_Init+0xc4>)
 8001bde:	f414 6fe0 	tst.w	r4, #1792	; 0x700
 8001be2:	d00e      	beq.n	8001c02 <BME280_Init+0xae>
 8001be4:	490c      	ldr	r1, [pc, #48]	; (8001c18 <BME280_Init+0xc4>)
 8001be6:	9100      	str	r1, [sp, #0]
 8001be8:	490c      	ldr	r1, [pc, #48]	; (8001c1c <BME280_Init+0xc8>)
 8001bea:	4809      	ldr	r0, [pc, #36]	; (8001c10 <BME280_Init+0xbc>)
 8001bec:	f003 f926 	bl	8004e3c <siprintf>
		(value32 & BME280_OSRS_T_MSK) ? "ON" : "OFF",
		(value32 & BME280_OSRS_P_MSK) ? "ON" : "OFF",
		((value32 >> 8) & BME280_OSRS_H_MSK) ? "ON" : "OFF");
	//HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	BME280_SetMode(BME280_MODE_NORMAL);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f7ff fdfc 	bl	80017ee <BME280_SetMode>
}
 8001bf6:	b002      	add	sp, #8
 8001bf8:	bd10      	pop	{r4, pc}
	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <BME280_Init+0xcc>)
 8001bfc:	e7eb      	b.n	8001bd6 <BME280_Init+0x82>
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <BME280_Init+0xcc>)
 8001c00:	e7ed      	b.n	8001bde <BME280_Init+0x8a>
 8001c02:	4907      	ldr	r1, [pc, #28]	; (8001c20 <BME280_Init+0xcc>)
 8001c04:	e7ef      	b.n	8001be6 <BME280_Init+0x92>
 8001c06:	bf00      	nop
 8001c08:	40010800 	.word	0x40010800
 8001c0c:	0800c1f4 	.word	0x0800c1f4
 8001c10:	20000744 	.word	0x20000744
 8001c14:	0800c208 	.word	0x0800c208
 8001c18:	0800c1f0 	.word	0x0800c1f0
 8001c1c:	0800c224 	.word	0x0800c224
 8001c20:	0800c1ec 	.word	0x0800c1ec

08001c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c24:	b530      	push	{r4, r5, lr}
 8001c26:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	2400      	movs	r4, #0
 8001c2a:	9404      	str	r4, [sp, #16]
 8001c2c:	9405      	str	r4, [sp, #20]
 8001c2e:	9406      	str	r4, [sp, #24]
 8001c30:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <MX_GPIO_Init+0x84>)
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	f042 0210 	orr.w	r2, r2, #16
 8001c3a:	619a      	str	r2, [r3, #24]
 8001c3c:	699a      	ldr	r2, [r3, #24]
 8001c3e:	f002 0210 	and.w	r2, r2, #16
 8001c42:	9200      	str	r2, [sp, #0]
 8001c44:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c46:	699a      	ldr	r2, [r3, #24]
 8001c48:	f042 0220 	orr.w	r2, r2, #32
 8001c4c:	619a      	str	r2, [r3, #24]
 8001c4e:	699a      	ldr	r2, [r3, #24]
 8001c50:	f002 0220 	and.w	r2, r2, #32
 8001c54:	9201      	str	r2, [sp, #4]
 8001c56:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c58:	699a      	ldr	r2, [r3, #24]
 8001c5a:	f042 0208 	orr.w	r2, r2, #8
 8001c5e:	619a      	str	r2, [r3, #24]
 8001c60:	699a      	ldr	r2, [r3, #24]
 8001c62:	f002 0208 	and.w	r2, r2, #8
 8001c66:	9202      	str	r2, [sp, #8]
 8001c68:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	699a      	ldr	r2, [r3, #24]
 8001c6c:	f042 0204 	orr.w	r2, r2, #4
 8001c70:	619a      	str	r2, [r3, #24]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	9303      	str	r3, [sp, #12]
 8001c7a:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c7c:	4d0b      	ldr	r5, [pc, #44]	; (8001cac <MX_GPIO_Init+0x88>)
 8001c7e:	4622      	mov	r2, r4
 8001c80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c84:	4628      	mov	r0, r5
 8001c86:	f000 fe65 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c8e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2302      	movs	r3, #2
 8001c98:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	a904      	add	r1, sp, #16
 8001c9c:	4628      	mov	r0, r5
 8001c9e:	f000 fd49 	bl	8002734 <HAL_GPIO_Init>

}
 8001ca2:	b009      	add	sp, #36	; 0x24
 8001ca4:	bd30      	pop	{r4, r5, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40011000 	.word	0x40011000

08001cb0 <MX_I2C1_Init>:
{
 8001cb0:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8001cb2:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <MX_I2C1_Init+0x28>)
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <MX_I2C1_Init+0x2c>)
 8001cb6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_I2C1_Init+0x30>)
 8001cba:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cc0:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cc6:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cc8:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cca:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ccc:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cce:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cd0:	f001 f8c6 	bl	8002e60 <HAL_I2C_Init>
}
 8001cd4:	bd08      	pop	{r3, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000065c 	.word	0x2000065c
 8001cdc:	40005400 	.word	0x40005400
 8001ce0:	00061a80 	.word	0x00061a80

08001ce4 <MX_I2C2_Init>:
{
 8001ce4:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8001ce6:	4809      	ldr	r0, [pc, #36]	; (8001d0c <MX_I2C2_Init+0x28>)
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_I2C2_Init+0x2c>)
 8001cea:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_I2C2_Init+0x30>)
 8001cee:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cf4:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cfa:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cfc:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cfe:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d00:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d02:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d04:	f001 f8ac 	bl	8002e60 <HAL_I2C_Init>
}
 8001d08:	bd08      	pop	{r3, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200006b0 	.word	0x200006b0
 8001d10:	40005800 	.word	0x40005800
 8001d14:	000186a0 	.word	0x000186a0

08001d18 <MX_USART1_UART_Init>:
{
 8001d18:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001d1a:	4808      	ldr	r0, [pc, #32]	; (8001d3c <MX_USART1_UART_Init+0x24>)
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <MX_USART1_UART_Init+0x28>)
 8001d1e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8001d20:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001d24:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	2300      	movs	r3, #0
 8001d28:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d2a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d2c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d2e:	220c      	movs	r2, #12
 8001d30:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d32:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d34:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d36:	f002 f8df 	bl	8003ef8 <HAL_UART_Init>
}
 8001d3a:	bd08      	pop	{r3, pc}
 8001d3c:	20000704 	.word	0x20000704
 8001d40:	40013800 	.word	0x40013800

08001d44 <I2C_Scan.7317>:
  void I2C_Scan() {
 8001d44:	b510      	push	{r4, lr}
 8001d46:	b090      	sub	sp, #64	; 0x40
      for(uint16_t i = 0; i < 128; i++) {
 8001d48:	2400      	movs	r4, #0
 8001d4a:	e007      	b.n	8001d5c <I2C_Scan.7317+0x18>
                        snprintf(msg, sizeof(msg), "0x%02X", i);
 8001d4c:	4623      	mov	r3, r4
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <I2C_Scan.7317+0x34>)
 8001d50:	2140      	movs	r1, #64	; 0x40
 8001d52:	4668      	mov	r0, sp
 8001d54:	f003 f83e 	bl	8004dd4 <sniprintf>
      for(uint16_t i = 0; i < 128; i++) {
 8001d58:	3401      	adds	r4, #1
 8001d5a:	b2a4      	uxth	r4, r4
 8001d5c:	2c7f      	cmp	r4, #127	; 0x7f
 8001d5e:	d809      	bhi.n	8001d74 <I2C_Scan.7317+0x30>
          res = HAL_I2C_IsDeviceReady(&hi2c2, i << 1, 1, 10);
 8001d60:	0061      	lsls	r1, r4, #1
 8001d62:	b289      	uxth	r1, r1
 8001d64:	230a      	movs	r3, #10
 8001d66:	2201      	movs	r2, #1
 8001d68:	4804      	ldr	r0, [pc, #16]	; (8001d7c <I2C_Scan.7317+0x38>)
 8001d6a:	f001 fc39 	bl	80035e0 <HAL_I2C_IsDeviceReady>
          if(res == HAL_OK) {
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	d1f2      	bne.n	8001d58 <I2C_Scan.7317+0x14>
 8001d72:	e7eb      	b.n	8001d4c <I2C_Scan.7317+0x8>
  }
 8001d74:	b010      	add	sp, #64	; 0x40
 8001d76:	bd10      	pop	{r4, pc}
 8001d78:	0800c254 	.word	0x0800c254
 8001d7c:	200006b0 	.word	0x200006b0

08001d80 <SystemClock_Config>:
{
 8001d80:	b530      	push	{r4, r5, lr}
 8001d82:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d84:	2400      	movs	r4, #0
 8001d86:	9409      	str	r4, [sp, #36]	; 0x24
 8001d88:	940b      	str	r4, [sp, #44]	; 0x2c
 8001d8a:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d8c:	9401      	str	r4, [sp, #4]
 8001d8e:	9402      	str	r4, [sp, #8]
 8001d90:	9403      	str	r4, [sp, #12]
 8001d92:	9404      	str	r4, [sp, #16]
 8001d94:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d96:	2201      	movs	r2, #1
 8001d98:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d9e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001da0:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001da2:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da4:	2502      	movs	r5, #2
 8001da6:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001da8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001daa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001dae:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db0:	a806      	add	r0, sp, #24
 8001db2:	f001 fced 	bl	8003790 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db6:	230f      	movs	r3, #15
 8001db8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dba:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dbc:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dc2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc4:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	a801      	add	r0, sp, #4
 8001dca:	f001 ff1f 	bl	8003c0c <HAL_RCC_ClockConfig>
}
 8001dce:	b011      	add	sp, #68	; 0x44
 8001dd0:	bd30      	pop	{r4, r5, pc}
	...

08001dd4 <main>:
{
 8001dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dd8:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
  HAL_Init();
 8001ddc:	f000 fc16 	bl	800260c <HAL_Init>
  SystemClock_Config();
 8001de0:	f7ff ffce 	bl	8001d80 <SystemClock_Config>
  MX_GPIO_Init();
 8001de4:	f7ff ff1e 	bl	8001c24 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001de8:	f7ff ff62 	bl	8001cb0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001dec:	f7ff ff7a 	bl	8001ce4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001df0:	f7ff ff92 	bl	8001d18 <MX_USART1_UART_Init>
  SSD1306_Init();
 8001df4:	f000 f9ea 	bl	80021cc <SSD1306_Init>
  I2C_Scan();
 8001df8:	f7ff ffa4 	bl	8001d44 <I2C_Scan.7317>
  BME280_Init();
 8001dfc:	f7ff feaa 	bl	8001b54 <BME280_Init>
	  tf = BME280_ReadTemperature();
 8001e00:	f7ff fd04 	bl	800180c <BME280_ReadTemperature>
	  		sprintf(str1, "Temperature: %.3f *C\r\n", tf);
 8001e04:	f7fe fb10 	bl	8000428 <__aeabi_f2d>
 8001e08:	4604      	mov	r4, r0
 8001e0a:	460d      	mov	r5, r1
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4965      	ldr	r1, [pc, #404]	; (8001fa8 <main+0x1d4>)
 8001e12:	f20d 4014 	addw	r0, sp, #1044	; 0x414
 8001e16:	f003 f811 	bl	8004e3c <siprintf>
	  		sprintf(str1, "%11.3f *C", tf);
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	462b      	mov	r3, r5
 8001e1e:	4963      	ldr	r1, [pc, #396]	; (8001fac <main+0x1d8>)
 8001e20:	f20d 4014 	addw	r0, sp, #1044	; 0x414
 8001e24:	f003 f80a 	bl	8004e3c <siprintf>
	  		strcpy(rxbuf,str1);
 8001e28:	f20d 4114 	addw	r1, sp, #1044	; 0x414
 8001e2c:	a805      	add	r0, sp, #20
 8001e2e:	f003 f825 	bl	8004e7c <strcpy>
	  		HAL_UART_Transmit(&huart1, rxbuf, strlen(rxbuf), 1000);
 8001e32:	a805      	add	r0, sp, #20
 8001e34:	f7fe f98c 	bl	8000150 <strlen>
 8001e38:	4c5d      	ldr	r4, [pc, #372]	; (8001fb0 <main+0x1dc>)
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	b282      	uxth	r2, r0
 8001e40:	a905      	add	r1, sp, #20
 8001e42:	4620      	mov	r0, r4
 8001e44:	f002 f887 	bl	8003f56 <HAL_UART_Transmit>
	  		pf = BME280_ReadPressure();
 8001e48:	f7ff fd10 	bl	800186c <BME280_ReadPressure>
 8001e4c:	4605      	mov	r5, r0
	  		sprintf(str1, "Pressure: %.3f Pa; %.3f hPa; %.3f mmHg\r\n", pf, pf/1000.0f, pf * 0.000750061683f);
 8001e4e:	4959      	ldr	r1, [pc, #356]	; (8001fb4 <main+0x1e0>)
 8001e50:	f7ff f84c 	bl	8000eec <__aeabi_fdiv>
 8001e54:	f7fe fae8 	bl	8000428 <__aeabi_f2d>
 8001e58:	4680      	mov	r8, r0
 8001e5a:	4689      	mov	r9, r1
 8001e5c:	4956      	ldr	r1, [pc, #344]	; (8001fb8 <main+0x1e4>)
 8001e5e:	4628      	mov	r0, r5
 8001e60:	f7fe ff90 	bl	8000d84 <__aeabi_fmul>
 8001e64:	f7fe fae0 	bl	8000428 <__aeabi_f2d>
 8001e68:	4606      	mov	r6, r0
 8001e6a:	460f      	mov	r7, r1
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	f7fe fadb 	bl	8000428 <__aeabi_f2d>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001e7a:	e9cd 8900 	strd	r8, r9, [sp]
 8001e7e:	494f      	ldr	r1, [pc, #316]	; (8001fbc <main+0x1e8>)
 8001e80:	f20d 4014 	addw	r0, sp, #1044	; 0x414
 8001e84:	f002 ffda 	bl	8004e3c <siprintf>
	  		sprintf(str1, "%11.3f hPa", pf/1000.0f);
 8001e88:	4642      	mov	r2, r8
 8001e8a:	464b      	mov	r3, r9
 8001e8c:	494c      	ldr	r1, [pc, #304]	; (8001fc0 <main+0x1ec>)
 8001e8e:	f20d 4014 	addw	r0, sp, #1044	; 0x414
 8001e92:	f002 ffd3 	bl	8004e3c <siprintf>
	  		strcpy(rxbuf,str1);
 8001e96:	f20d 4114 	addw	r1, sp, #1044	; 0x414
 8001e9a:	a805      	add	r0, sp, #20
 8001e9c:	f002 ffee 	bl	8004e7c <strcpy>
	  		HAL_UART_Transmit(&huart1, rxbuf, strlen(rxbuf), 1000);
 8001ea0:	a805      	add	r0, sp, #20
 8001ea2:	f7fe f955 	bl	8000150 <strlen>
 8001ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eaa:	b282      	uxth	r2, r0
 8001eac:	a905      	add	r1, sp, #20
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f002 f851 	bl	8003f56 <HAL_UART_Transmit>
	  		sprintf(str1, "%11.3f mmHg", pf * 0.000750061683f);
 8001eb4:	4632      	mov	r2, r6
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	4942      	ldr	r1, [pc, #264]	; (8001fc4 <main+0x1f0>)
 8001eba:	f20d 4014 	addw	r0, sp, #1044	; 0x414
 8001ebe:	f002 ffbd 	bl	8004e3c <siprintf>
	  		strcpy(rxbuf,str1);
 8001ec2:	f20d 4114 	addw	r1, sp, #1044	; 0x414
 8001ec6:	a805      	add	r0, sp, #20
 8001ec8:	f002 ffd8 	bl	8004e7c <strcpy>
	  		HAL_UART_Transmit(&huart1, rxbuf, strlen(rxbuf), 1000);
 8001ecc:	a805      	add	r0, sp, #20
 8001ece:	f7fe f93f 	bl	8000150 <strlen>
 8001ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed6:	b282      	uxth	r2, r0
 8001ed8:	a905      	add	r1, sp, #20
 8001eda:	4620      	mov	r0, r4
 8001edc:	f002 f83b 	bl	8003f56 <HAL_UART_Transmit>
	  		memset(rxbuf,0,1024);
 8001ee0:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001ee4:	462a      	mov	r2, r5
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	a805      	add	r0, sp, #20
 8001eea:	f002 f8f5 	bl	80040d8 <memset>
	  		af = BME280_ReadAltitude(SEALEVELPRESSURE_PA);
 8001eee:	4836      	ldr	r0, [pc, #216]	; (8001fc8 <main+0x1f4>)
 8001ef0:	f7ff fe0a 	bl	8001b08 <BME280_ReadAltitude>
	  		sprintf(str1, "Altitude: %.3f m\r\n", af);
 8001ef4:	f7fe fa98 	bl	8000428 <__aeabi_f2d>
 8001ef8:	4680      	mov	r8, r0
 8001efa:	4689      	mov	r9, r1
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4932      	ldr	r1, [pc, #200]	; (8001fcc <main+0x1f8>)
 8001f02:	f20d 4014 	addw	r0, sp, #1044	; 0x414
 8001f06:	f002 ff99 	bl	8004e3c <siprintf>
	  		strcpy(rxbuf,str1);
 8001f0a:	f20d 4114 	addw	r1, sp, #1044	; 0x414
 8001f0e:	a805      	add	r0, sp, #20
 8001f10:	f002 ffb4 	bl	8004e7c <strcpy>
	  		HAL_UART_Transmit(&huart1, rxbuf, strlen(rxbuf), 1000);
 8001f14:	a805      	add	r0, sp, #20
 8001f16:	f7fe f91b 	bl	8000150 <strlen>
 8001f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1e:	b282      	uxth	r2, r0
 8001f20:	a905      	add	r1, sp, #20
 8001f22:	4620      	mov	r0, r4
 8001f24:	f002 f817 	bl	8003f56 <HAL_UART_Transmit>
	  		hf = BME280_ReadHumidity();
 8001f28:	f7ff fd96 	bl	8001a58 <BME280_ReadHumidity>
	  		sprintf(str1, "Humidity: %.3f %%\r\n", hf);
 8001f2c:	f7fe fa7c 	bl	8000428 <__aeabi_f2d>
 8001f30:	4606      	mov	r6, r0
 8001f32:	460f      	mov	r7, r1
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4925      	ldr	r1, [pc, #148]	; (8001fd0 <main+0x1fc>)
 8001f3a:	f20d 4014 	addw	r0, sp, #1044	; 0x414
 8001f3e:	f002 ff7d 	bl	8004e3c <siprintf>
	  		sprintf(str1, "%7.3f %% %4.1f m", hf, af);
 8001f42:	e9cd 8900 	strd	r8, r9, [sp]
 8001f46:	4632      	mov	r2, r6
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4922      	ldr	r1, [pc, #136]	; (8001fd4 <main+0x200>)
 8001f4c:	f20d 4014 	addw	r0, sp, #1044	; 0x414
 8001f50:	f002 ff74 	bl	8004e3c <siprintf>
	  		strcpy(rxbuf,str1);
 8001f54:	f20d 4114 	addw	r1, sp, #1044	; 0x414
 8001f58:	a805      	add	r0, sp, #20
 8001f5a:	f002 ff8f 	bl	8004e7c <strcpy>
	  		HAL_UART_Transmit(&huart1, rxbuf, strlen(rxbuf), 1000);
 8001f5e:	a805      	add	r0, sp, #20
 8001f60:	f7fe f8f6 	bl	8000150 <strlen>
 8001f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f68:	b282      	uxth	r2, r0
 8001f6a:	a905      	add	r1, sp, #20
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f001 fff2 	bl	8003f56 <HAL_UART_Transmit>
	  		HAL_Delay(1000);
 8001f72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f76:	f000 fb6d 	bl	8002654 <HAL_Delay>
	  		SSD1306_Clear();
 8001f7a:	f000 f91f 	bl	80021bc <SSD1306_Clear>
	  			SSD1306_GotoXY (0,0);
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4608      	mov	r0, r1
 8001f82:	f000 f861 	bl	8002048 <SSD1306_GotoXY>
	  			SSD1306_Puts (rxbuf, &Font_7x10, 1);
 8001f86:	2201      	movs	r2, #1
 8001f88:	4913      	ldr	r1, [pc, #76]	; (8001fd8 <main+0x204>)
 8001f8a:	a805      	add	r0, sp, #20
 8001f8c:	f000 f8b0 	bl	80020f0 <SSD1306_Puts>
	  			HAL_Delay(1000);
 8001f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f94:	f000 fb5e 	bl	8002654 <HAL_Delay>
	  			SSD1306_UpdateScreen();
 8001f98:	f000 f8ec 	bl	8002174 <SSD1306_UpdateScreen>
	  			memset(rxbuf,0,1024);
 8001f9c:	462a      	mov	r2, r5
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	a805      	add	r0, sp, #20
 8001fa2:	f002 f899 	bl	80040d8 <memset>
  while (1)
 8001fa6:	e72b      	b.n	8001e00 <main+0x2c>
 8001fa8:	0800c25c 	.word	0x0800c25c
 8001fac:	0800c274 	.word	0x0800c274
 8001fb0:	20000704 	.word	0x20000704
 8001fb4:	447a0000 	.word	0x447a0000
 8001fb8:	3a449fca 	.word	0x3a449fca
 8001fbc:	0800c280 	.word	0x0800c280
 8001fc0:	0800c2ac 	.word	0x0800c2ac
 8001fc4:	0800c2b8 	.word	0x0800c2b8
 8001fc8:	49776020 	.word	0x49776020
 8001fcc:	0800c2c4 	.word	0x0800c2c4
 8001fd0:	0800c2d8 	.word	0x0800c2d8
 8001fd4:	0800c2ec 	.word	0x0800c2ec
 8001fd8:	20000010 	.word	0x20000010

08001fdc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001fdc:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001fde:	b930      	cbnz	r0, 8001fee <SSD1306_Fill+0x12>
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe6:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <SSD1306_Fill+0x18>)
 8001fe8:	f002 f876 	bl	80040d8 <memset>
}
 8001fec:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001fee:	21ff      	movs	r1, #255	; 0xff
 8001ff0:	e7f7      	b.n	8001fe2 <SSD1306_Fill+0x6>
 8001ff2:	bf00      	nop
 8001ff4:	20000220 	.word	0x20000220

08001ff8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8001ff8:	287f      	cmp	r0, #127	; 0x7f
 8001ffa:	d816      	bhi.n	800202a <SSD1306_DrawPixel+0x32>
		x >= SSD1306_WIDTH ||
 8001ffc:	293f      	cmp	r1, #63	; 0x3f
 8001ffe:	d814      	bhi.n	800202a <SSD1306_DrawPixel+0x32>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002000:	4b10      	ldr	r3, [pc, #64]	; (8002044 <SSD1306_DrawPixel+0x4c>)
 8002002:	791b      	ldrb	r3, [r3, #4]
 8002004:	b113      	cbz	r3, 800200c <SSD1306_DrawPixel+0x14>
		color = (SSD1306_COLOR_t)!color;
 8002006:	fab2 f282 	clz	r2, r2
 800200a:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800200c:	2a01      	cmp	r2, #1
 800200e:	d00d      	beq.n	800202c <SSD1306_DrawPixel+0x34>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002010:	08cb      	lsrs	r3, r1, #3
 8002012:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8002016:	f001 0107 	and.w	r1, r1, #7
 800201a:	2201      	movs	r2, #1
 800201c:	408a      	lsls	r2, r1
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <SSD1306_DrawPixel+0x4c>)
 8002020:	4418      	add	r0, r3
 8002022:	7a01      	ldrb	r1, [r0, #8]
 8002024:	ea21 0102 	bic.w	r1, r1, r2
 8002028:	7201      	strb	r1, [r0, #8]
	}
}
 800202a:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800202c:	08cb      	lsrs	r3, r1, #3
 800202e:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8002032:	f001 0107 	and.w	r1, r1, #7
 8002036:	408a      	lsls	r2, r1
 8002038:	4b02      	ldr	r3, [pc, #8]	; (8002044 <SSD1306_DrawPixel+0x4c>)
 800203a:	4418      	add	r0, r3
 800203c:	7a01      	ldrb	r1, [r0, #8]
 800203e:	4311      	orrs	r1, r2
 8002040:	7201      	strb	r1, [r0, #8]
 8002042:	4770      	bx	lr
 8002044:	20000218 	.word	0x20000218

08002048 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002048:	4b01      	ldr	r3, [pc, #4]	; (8002050 <SSD1306_GotoXY+0x8>)
 800204a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 800204c:	8059      	strh	r1, [r3, #2]
}
 800204e:	4770      	bx	lr
 8002050:	20000218 	.word	0x20000218

08002054 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002058:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <SSD1306_Putc+0x98>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	780a      	ldrb	r2, [r1, #0]
 8002060:	4413      	add	r3, r2
	if (
 8002062:	2b7f      	cmp	r3, #127	; 0x7f
 8002064:	dc3e      	bgt.n	80020e4 <SSD1306_Putc+0x90>
 8002066:	4681      	mov	r9, r0
 8002068:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800206a:	4b20      	ldr	r3, [pc, #128]	; (80020ec <SSD1306_Putc+0x98>)
 800206c:	885b      	ldrh	r3, [r3, #2]
 800206e:	784a      	ldrb	r2, [r1, #1]
 8002070:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002072:	2b3f      	cmp	r3, #63	; 0x3f
 8002074:	dc38      	bgt.n	80020e8 <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002076:	2600      	movs	r6, #0
 8002078:	e020      	b.n	80020bc <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <SSD1306_Putc+0x98>)
 800207c:	8818      	ldrh	r0, [r3, #0]
 800207e:	8859      	ldrh	r1, [r3, #2]
 8002080:	4431      	add	r1, r6
 8002082:	4420      	add	r0, r4
 8002084:	fab8 f288 	clz	r2, r8
 8002088:	0952      	lsrs	r2, r2, #5
 800208a:	b289      	uxth	r1, r1
 800208c:	b280      	uxth	r0, r0
 800208e:	f7ff ffb3 	bl	8001ff8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002092:	3401      	adds	r4, #1
 8002094:	782b      	ldrb	r3, [r5, #0]
 8002096:	42a3      	cmp	r3, r4
 8002098:	d90f      	bls.n	80020ba <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 800209a:	fa07 f304 	lsl.w	r3, r7, r4
 800209e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80020a2:	d0ea      	beq.n	800207a <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <SSD1306_Putc+0x98>)
 80020a6:	8818      	ldrh	r0, [r3, #0]
 80020a8:	8859      	ldrh	r1, [r3, #2]
 80020aa:	4431      	add	r1, r6
 80020ac:	4420      	add	r0, r4
 80020ae:	4642      	mov	r2, r8
 80020b0:	b289      	uxth	r1, r1
 80020b2:	b280      	uxth	r0, r0
 80020b4:	f7ff ffa0 	bl	8001ff8 <SSD1306_DrawPixel>
 80020b8:	e7eb      	b.n	8002092 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 80020ba:	3601      	adds	r6, #1
 80020bc:	786a      	ldrb	r2, [r5, #1]
 80020be:	42b2      	cmp	r2, r6
 80020c0:	d908      	bls.n	80020d4 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80020c2:	6869      	ldr	r1, [r5, #4]
 80020c4:	f1a9 0320 	sub.w	r3, r9, #32
 80020c8:	fb02 6303 	mla	r3, r2, r3, r6
 80020cc:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 80020d0:	2400      	movs	r4, #0
 80020d2:	e7df      	b.n	8002094 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80020d4:	782b      	ldrb	r3, [r5, #0]
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <SSD1306_Putc+0x98>)
 80020d8:	8811      	ldrh	r1, [r2, #0]
 80020da:	440b      	add	r3, r1
 80020dc:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 80020de:	4648      	mov	r0, r9
}
 80020e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 80020e4:	2000      	movs	r0, #0
 80020e6:	e7fb      	b.n	80020e0 <SSD1306_Putc+0x8c>
 80020e8:	2000      	movs	r0, #0
 80020ea:	e7f9      	b.n	80020e0 <SSD1306_Putc+0x8c>
 80020ec:	20000218 	.word	0x20000218

080020f0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80020f0:	b570      	push	{r4, r5, r6, lr}
 80020f2:	4604      	mov	r4, r0
 80020f4:	460e      	mov	r6, r1
 80020f6:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 80020f8:	7820      	ldrb	r0, [r4, #0]
 80020fa:	b148      	cbz	r0, 8002110 <SSD1306_Puts+0x20>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80020fc:	462a      	mov	r2, r5
 80020fe:	4631      	mov	r1, r6
 8002100:	f7ff ffa8 	bl	8002054 <SSD1306_Putc>
 8002104:	4603      	mov	r3, r0
 8002106:	7820      	ldrb	r0, [r4, #0]
 8002108:	4283      	cmp	r3, r0
 800210a:	d101      	bne.n	8002110 <SSD1306_Puts+0x20>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 800210c:	3401      	adds	r4, #1
 800210e:	e7f3      	b.n	80020f8 <SSD1306_Puts+0x8>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8002110:	bd70      	pop	{r4, r5, r6, pc}
	...

08002114 <ssd1306_I2C_WriteMulti>:
	uint32_t p = 250000;
	while(p>0)
		p--;
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002114:	b530      	push	{r4, r5, lr}
 8002116:	b0c3      	sub	sp, #268	; 0x10c
	uint8_t dt[256];
	dt[0] = reg;
 8002118:	f88d 1008 	strb.w	r1, [sp, #8]
	uint8_t i;
	for(i = 0; i < count; i++)
 800211c:	2100      	movs	r1, #0
 800211e:	b28c      	uxth	r4, r1
 8002120:	429c      	cmp	r4, r3
 8002122:	d205      	bcs.n	8002130 <ssd1306_I2C_WriteMulti+0x1c>
	dt[i+1] = data[i];
 8002124:	1c4c      	adds	r4, r1, #1
 8002126:	5c55      	ldrb	r5, [r2, r1]
 8002128:	a902      	add	r1, sp, #8
 800212a:	550d      	strb	r5, [r1, r4]
	for(i = 0; i < count; i++)
 800212c:	b2e1      	uxtb	r1, r4
 800212e:	e7f6      	b.n	800211e <ssd1306_I2C_WriteMulti+0xa>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002130:	3301      	adds	r3, #1
 8002132:	220a      	movs	r2, #10
 8002134:	9200      	str	r2, [sp, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	aa02      	add	r2, sp, #8
 800213a:	4601      	mov	r1, r0
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <ssd1306_I2C_WriteMulti+0x34>)
 800213e:	f000 ff63 	bl	8003008 <HAL_I2C_Master_Transmit>
}
 8002142:	b043      	add	sp, #268	; 0x10c
 8002144:	bd30      	pop	{r4, r5, pc}
 8002146:	bf00      	nop
 8002148:	2000065c 	.word	0x2000065c

0800214c <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800214c:	b500      	push	{lr}
 800214e:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 8002150:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8002154:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002158:	230a      	movs	r3, #10
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2302      	movs	r3, #2
 800215e:	aa03      	add	r2, sp, #12
 8002160:	4601      	mov	r1, r0
 8002162:	4803      	ldr	r0, [pc, #12]	; (8002170 <ssd1306_I2C_Write+0x24>)
 8002164:	f000 ff50 	bl	8003008 <HAL_I2C_Master_Transmit>
}
 8002168:	b005      	add	sp, #20
 800216a:	f85d fb04 	ldr.w	pc, [sp], #4
 800216e:	bf00      	nop
 8002170:	2000065c 	.word	0x2000065c

08002174 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8002174:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 8002176:	2400      	movs	r4, #0
 8002178:	e01a      	b.n	80021b0 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800217a:	f1a4 0250 	sub.w	r2, r4, #80	; 0x50
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	2100      	movs	r1, #0
 8002182:	2078      	movs	r0, #120	; 0x78
 8002184:	f7ff ffe2 	bl	800214c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002188:	2200      	movs	r2, #0
 800218a:	4611      	mov	r1, r2
 800218c:	2078      	movs	r0, #120	; 0x78
 800218e:	f7ff ffdd 	bl	800214c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002192:	2210      	movs	r2, #16
 8002194:	2100      	movs	r1, #0
 8002196:	2078      	movs	r0, #120	; 0x78
 8002198:	f7ff ffd8 	bl	800214c <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <SSD1306_UpdateScreen+0x44>)
 80021a0:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 80021a4:	2140      	movs	r1, #64	; 0x40
 80021a6:	2078      	movs	r0, #120	; 0x78
 80021a8:	f7ff ffb4 	bl	8002114 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80021ac:	3401      	adds	r4, #1
 80021ae:	b2e4      	uxtb	r4, r4
 80021b0:	2c07      	cmp	r4, #7
 80021b2:	d9e2      	bls.n	800217a <SSD1306_UpdateScreen+0x6>
}
 80021b4:	bd10      	pop	{r4, pc}
 80021b6:	bf00      	nop
 80021b8:	20000220 	.word	0x20000220

080021bc <SSD1306_Clear>:
{
 80021bc:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 80021be:	2000      	movs	r0, #0
 80021c0:	f7ff ff0c 	bl	8001fdc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80021c4:	f7ff ffd6 	bl	8002174 <SSD1306_UpdateScreen>
}
 80021c8:	bd08      	pop	{r3, pc}
	...

080021cc <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80021cc:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80021ce:	f644 6320 	movw	r3, #20000	; 0x4e20
 80021d2:	2201      	movs	r2, #1
 80021d4:	2178      	movs	r1, #120	; 0x78
 80021d6:	4855      	ldr	r0, [pc, #340]	; (800232c <SSD1306_Init+0x160>)
 80021d8:	f001 fa02 	bl	80035e0 <HAL_I2C_IsDeviceReady>
 80021dc:	2800      	cmp	r0, #0
 80021de:	f040 80a3 	bne.w	8002328 <SSD1306_Init+0x15c>
	uint32_t p = 2500;
 80021e2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80021e6:	e000      	b.n	80021ea <SSD1306_Init+0x1e>
		p--;
 80021e8:	3b01      	subs	r3, #1
	while(p>0)
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1fc      	bne.n	80021e8 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 80021ee:	22ae      	movs	r2, #174	; 0xae
 80021f0:	2100      	movs	r1, #0
 80021f2:	2078      	movs	r0, #120	; 0x78
 80021f4:	f7ff ffaa 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80021f8:	2220      	movs	r2, #32
 80021fa:	2100      	movs	r1, #0
 80021fc:	2078      	movs	r0, #120	; 0x78
 80021fe:	f7ff ffa5 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002202:	2210      	movs	r2, #16
 8002204:	2100      	movs	r1, #0
 8002206:	2078      	movs	r0, #120	; 0x78
 8002208:	f7ff ffa0 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800220c:	22b0      	movs	r2, #176	; 0xb0
 800220e:	2100      	movs	r1, #0
 8002210:	2078      	movs	r0, #120	; 0x78
 8002212:	f7ff ff9b 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002216:	22c8      	movs	r2, #200	; 0xc8
 8002218:	2100      	movs	r1, #0
 800221a:	2078      	movs	r0, #120	; 0x78
 800221c:	f7ff ff96 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002220:	2200      	movs	r2, #0
 8002222:	4611      	mov	r1, r2
 8002224:	2078      	movs	r0, #120	; 0x78
 8002226:	f7ff ff91 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800222a:	2210      	movs	r2, #16
 800222c:	2100      	movs	r1, #0
 800222e:	2078      	movs	r0, #120	; 0x78
 8002230:	f7ff ff8c 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002234:	2240      	movs	r2, #64	; 0x40
 8002236:	2100      	movs	r1, #0
 8002238:	2078      	movs	r0, #120	; 0x78
 800223a:	f7ff ff87 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800223e:	2281      	movs	r2, #129	; 0x81
 8002240:	2100      	movs	r1, #0
 8002242:	2078      	movs	r0, #120	; 0x78
 8002244:	f7ff ff82 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002248:	22ff      	movs	r2, #255	; 0xff
 800224a:	2100      	movs	r1, #0
 800224c:	2078      	movs	r0, #120	; 0x78
 800224e:	f7ff ff7d 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002252:	22a1      	movs	r2, #161	; 0xa1
 8002254:	2100      	movs	r1, #0
 8002256:	2078      	movs	r0, #120	; 0x78
 8002258:	f7ff ff78 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800225c:	22a6      	movs	r2, #166	; 0xa6
 800225e:	2100      	movs	r1, #0
 8002260:	2078      	movs	r0, #120	; 0x78
 8002262:	f7ff ff73 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002266:	22a8      	movs	r2, #168	; 0xa8
 8002268:	2100      	movs	r1, #0
 800226a:	2078      	movs	r0, #120	; 0x78
 800226c:	f7ff ff6e 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002270:	223f      	movs	r2, #63	; 0x3f
 8002272:	2100      	movs	r1, #0
 8002274:	2078      	movs	r0, #120	; 0x78
 8002276:	f7ff ff69 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800227a:	22a4      	movs	r2, #164	; 0xa4
 800227c:	2100      	movs	r1, #0
 800227e:	2078      	movs	r0, #120	; 0x78
 8002280:	f7ff ff64 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002284:	22d3      	movs	r2, #211	; 0xd3
 8002286:	2100      	movs	r1, #0
 8002288:	2078      	movs	r0, #120	; 0x78
 800228a:	f7ff ff5f 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800228e:	2200      	movs	r2, #0
 8002290:	4611      	mov	r1, r2
 8002292:	2078      	movs	r0, #120	; 0x78
 8002294:	f7ff ff5a 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002298:	22d5      	movs	r2, #213	; 0xd5
 800229a:	2100      	movs	r1, #0
 800229c:	2078      	movs	r0, #120	; 0x78
 800229e:	f7ff ff55 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80022a2:	22f0      	movs	r2, #240	; 0xf0
 80022a4:	2100      	movs	r1, #0
 80022a6:	2078      	movs	r0, #120	; 0x78
 80022a8:	f7ff ff50 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80022ac:	22d9      	movs	r2, #217	; 0xd9
 80022ae:	2100      	movs	r1, #0
 80022b0:	2078      	movs	r0, #120	; 0x78
 80022b2:	f7ff ff4b 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80022b6:	2222      	movs	r2, #34	; 0x22
 80022b8:	2100      	movs	r1, #0
 80022ba:	2078      	movs	r0, #120	; 0x78
 80022bc:	f7ff ff46 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80022c0:	22da      	movs	r2, #218	; 0xda
 80022c2:	2100      	movs	r1, #0
 80022c4:	2078      	movs	r0, #120	; 0x78
 80022c6:	f7ff ff41 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80022ca:	2212      	movs	r2, #18
 80022cc:	2100      	movs	r1, #0
 80022ce:	2078      	movs	r0, #120	; 0x78
 80022d0:	f7ff ff3c 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80022d4:	22db      	movs	r2, #219	; 0xdb
 80022d6:	2100      	movs	r1, #0
 80022d8:	2078      	movs	r0, #120	; 0x78
 80022da:	f7ff ff37 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80022de:	2220      	movs	r2, #32
 80022e0:	2100      	movs	r1, #0
 80022e2:	2078      	movs	r0, #120	; 0x78
 80022e4:	f7ff ff32 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80022e8:	228d      	movs	r2, #141	; 0x8d
 80022ea:	2100      	movs	r1, #0
 80022ec:	2078      	movs	r0, #120	; 0x78
 80022ee:	f7ff ff2d 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80022f2:	2214      	movs	r2, #20
 80022f4:	2100      	movs	r1, #0
 80022f6:	2078      	movs	r0, #120	; 0x78
 80022f8:	f7ff ff28 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80022fc:	22af      	movs	r2, #175	; 0xaf
 80022fe:	2100      	movs	r1, #0
 8002300:	2078      	movs	r0, #120	; 0x78
 8002302:	f7ff ff23 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002306:	222e      	movs	r2, #46	; 0x2e
 8002308:	2100      	movs	r1, #0
 800230a:	2078      	movs	r0, #120	; 0x78
 800230c:	f7ff ff1e 	bl	800214c <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff fe63 	bl	8001fdc <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002316:	f7ff ff2d 	bl	8002174 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <SSD1306_Init+0x164>)
 800231c:	2200      	movs	r2, #0
 800231e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002320:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8002322:	2001      	movs	r0, #1
 8002324:	7158      	strb	r0, [r3, #5]
}
 8002326:	bd08      	pop	{r3, pc}
		return 0;
 8002328:	2000      	movs	r0, #0
 800232a:	e7fc      	b.n	8002326 <SSD1306_Init+0x15a>
 800232c:	2000065c 	.word	0x2000065c
 8002330:	20000218 	.word	0x20000218

08002334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002334:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <HAL_MspInit+0x3c>)
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	619a      	str	r2, [r3, #24]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	f002 0201 	and.w	r2, r2, #1
 8002346:	9200      	str	r2, [sp, #0]
 8002348:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	69da      	ldr	r2, [r3, #28]
 800234c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002350:	61da      	str	r2, [r3, #28]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800235c:	4a05      	ldr	r2, [pc, #20]	; (8002374 <HAL_MspInit+0x40>)
 800235e:	6853      	ldr	r3, [r2, #4]
 8002360:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002368:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800236a:	b002      	add	sp, #8
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	40010000 	.word	0x40010000

08002378 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002378:	b510      	push	{r4, lr}
 800237a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	2300      	movs	r3, #0
 800237e:	9304      	str	r3, [sp, #16]
 8002380:	9305      	str	r3, [sp, #20]
 8002382:	9306      	str	r3, [sp, #24]
 8002384:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8002386:	6803      	ldr	r3, [r0, #0]
 8002388:	4a26      	ldr	r2, [pc, #152]	; (8002424 <HAL_I2C_MspInit+0xac>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d004      	beq.n	8002398 <HAL_I2C_MspInit+0x20>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 800238e:	4a26      	ldr	r2, [pc, #152]	; (8002428 <HAL_I2C_MspInit+0xb0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d027      	beq.n	80023e4 <HAL_I2C_MspInit+0x6c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002394:	b008      	add	sp, #32
 8002396:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002398:	4c24      	ldr	r4, [pc, #144]	; (800242c <HAL_I2C_MspInit+0xb4>)
 800239a:	69a3      	ldr	r3, [r4, #24]
 800239c:	f043 0308 	orr.w	r3, r3, #8
 80023a0:	61a3      	str	r3, [r4, #24]
 80023a2:	69a3      	ldr	r3, [r4, #24]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023b2:	2312      	movs	r3, #18
 80023b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	a904      	add	r1, sp, #16
 80023bc:	481c      	ldr	r0, [pc, #112]	; (8002430 <HAL_I2C_MspInit+0xb8>)
 80023be:	f000 f9b9 	bl	8002734 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80023c2:	4a1c      	ldr	r2, [pc, #112]	; (8002434 <HAL_I2C_MspInit+0xbc>)
 80023c4:	6853      	ldr	r3, [r2, #4]
 80023c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80023ca:	f043 0302 	orr.w	r3, r3, #2
 80023ce:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023d0:	69e3      	ldr	r3, [r4, #28]
 80023d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023d6:	61e3      	str	r3, [r4, #28]
 80023d8:	69e3      	ldr	r3, [r4, #28]
 80023da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	9b01      	ldr	r3, [sp, #4]
 80023e2:	e7d7      	b.n	8002394 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e4:	4c11      	ldr	r4, [pc, #68]	; (800242c <HAL_I2C_MspInit+0xb4>)
 80023e6:	69a3      	ldr	r3, [r4, #24]
 80023e8:	f043 0308 	orr.w	r3, r3, #8
 80023ec:	61a3      	str	r3, [r4, #24]
 80023ee:	69a3      	ldr	r3, [r4, #24]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	9302      	str	r3, [sp, #8]
 80023f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023fe:	2312      	movs	r3, #18
 8002400:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002402:	2303      	movs	r3, #3
 8002404:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002406:	a904      	add	r1, sp, #16
 8002408:	4809      	ldr	r0, [pc, #36]	; (8002430 <HAL_I2C_MspInit+0xb8>)
 800240a:	f000 f993 	bl	8002734 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800240e:	69e3      	ldr	r3, [r4, #28]
 8002410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002414:	61e3      	str	r3, [r4, #28]
 8002416:	69e3      	ldr	r3, [r4, #28]
 8002418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241c:	9303      	str	r3, [sp, #12]
 800241e:	9b03      	ldr	r3, [sp, #12]
}
 8002420:	e7b8      	b.n	8002394 <HAL_I2C_MspInit+0x1c>
 8002422:	bf00      	nop
 8002424:	40005400 	.word	0x40005400
 8002428:	40005800 	.word	0x40005800
 800242c:	40021000 	.word	0x40021000
 8002430:	40010c00 	.word	0x40010c00
 8002434:	40010000 	.word	0x40010000

08002438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002438:	b510      	push	{r4, lr}
 800243a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	2300      	movs	r3, #0
 800243e:	9302      	str	r3, [sp, #8]
 8002440:	9303      	str	r3, [sp, #12]
 8002442:	9304      	str	r3, [sp, #16]
 8002444:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 8002446:	6802      	ldr	r2, [r0, #0]
 8002448:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <HAL_UART_MspInit+0x70>)
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800244e:	b006      	add	sp, #24
 8002450:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002452:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002456:	699a      	ldr	r2, [r3, #24]
 8002458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800245c:	619a      	str	r2, [r3, #24]
 800245e:	699a      	ldr	r2, [r3, #24]
 8002460:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002464:	9200      	str	r2, [sp, #0]
 8002466:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	f042 0204 	orr.w	r2, r2, #4
 800246e:	619a      	str	r2, [r3, #24]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800247a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800247e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002488:	4c08      	ldr	r4, [pc, #32]	; (80024ac <HAL_UART_MspInit+0x74>)
 800248a:	a902      	add	r1, sp, #8
 800248c:	4620      	mov	r0, r4
 800248e:	f000 f951 	bl	8002734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002496:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002498:	2300      	movs	r3, #0
 800249a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249e:	a902      	add	r1, sp, #8
 80024a0:	4620      	mov	r0, r4
 80024a2:	f000 f947 	bl	8002734 <HAL_GPIO_Init>
}
 80024a6:	e7d2      	b.n	800244e <HAL_UART_MspInit+0x16>
 80024a8:	40013800 	.word	0x40013800
 80024ac:	40010800 	.word	0x40010800

080024b0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024b0:	4770      	bx	lr

080024b2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b2:	e7fe      	b.n	80024b2 <HardFault_Handler>

080024b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <MemManage_Handler>

080024b6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024b6:	e7fe      	b.n	80024b6 <BusFault_Handler>

080024b8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <UsageFault_Handler>

080024ba <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ba:	4770      	bx	lr

080024bc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024bc:	4770      	bx	lr

080024be <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024be:	4770      	bx	lr

080024c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c2:	f000 f8b5 	bl	8002630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c6:	bd08      	pop	{r3, pc}

080024c8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80024c8:	2001      	movs	r0, #1
 80024ca:	4770      	bx	lr

080024cc <_kill>:

int _kill(int pid, int sig)
{
 80024cc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80024ce:	f001 fdd9 	bl	8004084 <__errno>
 80024d2:	2316      	movs	r3, #22
 80024d4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80024d6:	f04f 30ff 	mov.w	r0, #4294967295
 80024da:	bd08      	pop	{r3, pc}

080024dc <_exit>:

void _exit (int status)
{
 80024dc:	b508      	push	{r3, lr}
	_kill(status, -1);
 80024de:	f04f 31ff 	mov.w	r1, #4294967295
 80024e2:	f7ff fff3 	bl	80024cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80024e6:	e7fe      	b.n	80024e6 <_exit+0xa>

080024e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024e8:	b570      	push	{r4, r5, r6, lr}
 80024ea:	460c      	mov	r4, r1
 80024ec:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ee:	2500      	movs	r5, #0
 80024f0:	42b5      	cmp	r5, r6
 80024f2:	da07      	bge.n	8002504 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 80024f4:	f3af 8000 	nop.w
 80024f8:	4621      	mov	r1, r4
 80024fa:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fe:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8002500:	460c      	mov	r4, r1
 8002502:	e7f5      	b.n	80024f0 <_read+0x8>
	}

return len;
}
 8002504:	4630      	mov	r0, r6
 8002506:	bd70      	pop	{r4, r5, r6, pc}

08002508 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	460c      	mov	r4, r1
 800250c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250e:	2500      	movs	r5, #0
 8002510:	42b5      	cmp	r5, r6
 8002512:	da05      	bge.n	8002520 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8002514:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002518:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251c:	3501      	adds	r5, #1
 800251e:	e7f7      	b.n	8002510 <_write+0x8>
	}
	return len;
}
 8002520:	4630      	mov	r0, r6
 8002522:	bd70      	pop	{r4, r5, r6, pc}

08002524 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002524:	b508      	push	{r3, lr}
 8002526:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002528:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <_sbrk+0x34>)
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	b142      	cbz	r2, 8002540 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <_sbrk+0x34>)
 8002530:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002532:	4403      	add	r3, r0
 8002534:	466a      	mov	r2, sp
 8002536:	4293      	cmp	r3, r2
 8002538:	d806      	bhi.n	8002548 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800253a:	4a07      	ldr	r2, [pc, #28]	; (8002558 <_sbrk+0x34>)
 800253c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800253e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002540:	4a05      	ldr	r2, [pc, #20]	; (8002558 <_sbrk+0x34>)
 8002542:	4906      	ldr	r1, [pc, #24]	; (800255c <_sbrk+0x38>)
 8002544:	6011      	str	r1, [r2, #0]
 8002546:	e7f2      	b.n	800252e <_sbrk+0xa>
		errno = ENOMEM;
 8002548:	f001 fd9c 	bl	8004084 <__errno>
 800254c:	230c      	movs	r3, #12
 800254e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	e7f3      	b.n	800253e <_sbrk+0x1a>
 8002556:	bf00      	nop
 8002558:	20000624 	.word	0x20000624
 800255c:	200007c0 	.word	0x200007c0

08002560 <_close>:

int _close(int file)
{
	return -1;
}
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	4770      	bx	lr

08002566 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800256a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800256c:	2000      	movs	r0, #0
 800256e:	4770      	bx	lr

08002570 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002570:	2001      	movs	r0, #1
 8002572:	4770      	bx	lr

08002574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002574:	2000      	movs	r0, #0
 8002576:	4770      	bx	lr

08002578 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <SystemInit+0x40>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	f042 0201 	orr.w	r2, r2, #1
 8002580:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <SystemInit+0x44>)
 8002586:	400a      	ands	r2, r1
 8002588:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002590:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002594:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800259c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80025a4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80025a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80025aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <SystemInit+0x48>)
 80025ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	f8ff0000 	.word	0xf8ff0000
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c4:	b510      	push	{r4, lr}
 80025c6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_InitTick+0x40>)
 80025ca:	7818      	ldrb	r0, [r3, #0]
 80025cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d0:	fbb3 f3f0 	udiv	r3, r3, r0
 80025d4:	4a0c      	ldr	r2, [pc, #48]	; (8002608 <HAL_InitTick+0x44>)
 80025d6:	6810      	ldr	r0, [r2, #0]
 80025d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80025dc:	f000 f894 	bl	8002708 <HAL_SYSTICK_Config>
 80025e0:	b968      	cbnz	r0, 80025fe <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e2:	2c0f      	cmp	r4, #15
 80025e4:	d901      	bls.n	80025ea <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80025e6:	2001      	movs	r0, #1
 80025e8:	e00a      	b.n	8002600 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ea:	2200      	movs	r2, #0
 80025ec:	4621      	mov	r1, r4
 80025ee:	f04f 30ff 	mov.w	r0, #4294967295
 80025f2:	f000 f855 	bl	80026a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f6:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_InitTick+0x40>)
 80025f8:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 80025fa:	2000      	movs	r0, #0
 80025fc:	e000      	b.n	8002600 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80025fe:	2001      	movs	r0, #1
}
 8002600:	bd10      	pop	{r4, pc}
 8002602:	bf00      	nop
 8002604:	2000001c 	.word	0x2000001c
 8002608:	20000018 	.word	0x20000018

0800260c <HAL_Init>:
{
 800260c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800260e:	4a07      	ldr	r2, [pc, #28]	; (800262c <HAL_Init+0x20>)
 8002610:	6813      	ldr	r3, [r2, #0]
 8002612:	f043 0310 	orr.w	r3, r3, #16
 8002616:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002618:	2003      	movs	r0, #3
 800261a:	f000 f82f 	bl	800267c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800261e:	2000      	movs	r0, #0
 8002620:	f7ff ffd0 	bl	80025c4 <HAL_InitTick>
  HAL_MspInit();
 8002624:	f7ff fe86 	bl	8002334 <HAL_MspInit>
}
 8002628:	2000      	movs	r0, #0
 800262a:	bd08      	pop	{r3, pc}
 800262c:	40022000 	.word	0x40022000

08002630 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002630:	4a03      	ldr	r2, [pc, #12]	; (8002640 <HAL_IncTick+0x10>)
 8002632:	6811      	ldr	r1, [r2, #0]
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <HAL_IncTick+0x14>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	440b      	add	r3, r1
 800263a:	6013      	str	r3, [r2, #0]
}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	200007a8 	.word	0x200007a8
 8002644:	2000001c 	.word	0x2000001c

08002648 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002648:	4b01      	ldr	r3, [pc, #4]	; (8002650 <HAL_GetTick+0x8>)
 800264a:	6818      	ldr	r0, [r3, #0]
}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	200007a8 	.word	0x200007a8

08002654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002654:	b538      	push	{r3, r4, r5, lr}
 8002656:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff fff6 	bl	8002648 <HAL_GetTick>
 800265c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800265e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002662:	d002      	beq.n	800266a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <HAL_Delay+0x24>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800266a:	f7ff ffed 	bl	8002648 <HAL_GetTick>
 800266e:	1b40      	subs	r0, r0, r5
 8002670:	42a0      	cmp	r0, r4
 8002672:	d3fa      	bcc.n	800266a <HAL_Delay+0x16>
  {
  }
}
 8002674:	bd38      	pop	{r3, r4, r5, pc}
 8002676:	bf00      	nop
 8002678:	2000001c 	.word	0x2000001c

0800267c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800267c:	4a07      	ldr	r2, [pc, #28]	; (800269c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800267e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002680:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002684:	041b      	lsls	r3, r3, #16
 8002686:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002688:	0200      	lsls	r0, r0, #8
 800268a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800268e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002698:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800269a:	4770      	bx	lr
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026a0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <HAL_NVIC_SetPriority+0x60>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026aa:	f1c3 0407 	rsb	r4, r3, #7
 80026ae:	2c04      	cmp	r4, #4
 80026b0:	bf28      	it	cs
 80026b2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b4:	1d1d      	adds	r5, r3, #4
 80026b6:	2d06      	cmp	r5, #6
 80026b8:	d918      	bls.n	80026ec <HAL_NVIC_SetPriority+0x4c>
 80026ba:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	f04f 35ff 	mov.w	r5, #4294967295
 80026c0:	fa05 f404 	lsl.w	r4, r5, r4
 80026c4:	ea21 0104 	bic.w	r1, r1, r4
 80026c8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ca:	fa05 f303 	lsl.w	r3, r5, r3
 80026ce:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80026d4:	2800      	cmp	r0, #0
 80026d6:	db0b      	blt.n	80026f0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d8:	0109      	lsls	r1, r1, #4
 80026da:	b2c9      	uxtb	r1, r1
 80026dc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80026e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80026e4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80026e8:	bc30      	pop	{r4, r5}
 80026ea:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ec:	2300      	movs	r3, #0
 80026ee:	e7e5      	b.n	80026bc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f0:	f000 000f 	and.w	r0, r0, #15
 80026f4:	0109      	lsls	r1, r1, #4
 80026f6:	b2c9      	uxtb	r1, r1
 80026f8:	4b02      	ldr	r3, [pc, #8]	; (8002704 <HAL_NVIC_SetPriority+0x64>)
 80026fa:	5419      	strb	r1, [r3, r0]
 80026fc:	e7f4      	b.n	80026e8 <HAL_NVIC_SetPriority+0x48>
 80026fe:	bf00      	nop
 8002700:	e000ed00 	.word	0xe000ed00
 8002704:	e000ed14 	.word	0xe000ed14

08002708 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002708:	3801      	subs	r0, #1
 800270a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800270e:	d20a      	bcs.n	8002726 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_SYSTICK_Config+0x24>)
 8002712:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	4a06      	ldr	r2, [pc, #24]	; (8002730 <HAL_SYSTICK_Config+0x28>)
 8002716:	21f0      	movs	r1, #240	; 0xf0
 8002718:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800271c:	2000      	movs	r0, #0
 800271e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002720:	2207      	movs	r2, #7
 8002722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002724:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002726:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000e010 	.word	0xe000e010
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002734:	b4f0      	push	{r4, r5, r6, r7}
 8002736:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002738:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 800273a:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273c:	e0a3      	b.n	8002886 <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800273e:	4f7f      	ldr	r7, [pc, #508]	; (800293c <HAL_GPIO_Init+0x208>)
 8002740:	42bb      	cmp	r3, r7
 8002742:	d010      	beq.n	8002766 <HAL_GPIO_Init+0x32>
 8002744:	d907      	bls.n	8002756 <HAL_GPIO_Init+0x22>
 8002746:	4f7e      	ldr	r7, [pc, #504]	; (8002940 <HAL_GPIO_Init+0x20c>)
 8002748:	42bb      	cmp	r3, r7
 800274a:	d00c      	beq.n	8002766 <HAL_GPIO_Init+0x32>
 800274c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002750:	42bb      	cmp	r3, r7
 8002752:	d008      	beq.n	8002766 <HAL_GPIO_Init+0x32>
 8002754:	e013      	b.n	800277e <HAL_GPIO_Init+0x4a>
 8002756:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800275a:	42bb      	cmp	r3, r7
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x32>
 800275e:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8002762:	42bb      	cmp	r3, r7
 8002764:	d107      	bne.n	8002776 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002766:	688b      	ldr	r3, [r1, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d058      	beq.n	800281e <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800276c:	2b01      	cmp	r3, #1
 800276e:	d051      	beq.n	8002814 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8002770:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002772:	2508      	movs	r5, #8
 8002774:	e003      	b.n	800277e <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8002776:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800277a:	42bb      	cmp	r3, r7
 800277c:	d0f3      	beq.n	8002766 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800277e:	2eff      	cmp	r6, #255	; 0xff
 8002780:	d84f      	bhi.n	8002822 <HAL_GPIO_Init+0xee>
 8002782:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002784:	2eff      	cmp	r6, #255	; 0xff
 8002786:	d84f      	bhi.n	8002828 <HAL_GPIO_Init+0xf4>
 8002788:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800278a:	f8dc 3000 	ldr.w	r3, [ip]
 800278e:	270f      	movs	r7, #15
 8002790:	4097      	lsls	r7, r2
 8002792:	ea23 0307 	bic.w	r3, r3, r7
 8002796:	fa05 f202 	lsl.w	r2, r5, r2
 800279a:	4313      	orrs	r3, r2
 800279c:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027a0:	684b      	ldr	r3, [r1, #4]
 80027a2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80027a6:	d06d      	beq.n	8002884 <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027a8:	4b66      	ldr	r3, [pc, #408]	; (8002944 <HAL_GPIO_Init+0x210>)
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	f042 0201 	orr.w	r2, r2, #1
 80027b0:	619a      	str	r2, [r3, #24]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80027bc:	08a2      	lsrs	r2, r4, #2
 80027be:	1c97      	adds	r7, r2, #2
 80027c0:	4b61      	ldr	r3, [pc, #388]	; (8002948 <HAL_GPIO_Init+0x214>)
 80027c2:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027c6:	f004 0703 	and.w	r7, r4, #3
 80027ca:	00bf      	lsls	r7, r7, #2
 80027cc:	f04f 0c0f 	mov.w	ip, #15
 80027d0:	fa0c fc07 	lsl.w	ip, ip, r7
 80027d4:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027d8:	4b5c      	ldr	r3, [pc, #368]	; (800294c <HAL_GPIO_Init+0x218>)
 80027da:	4298      	cmp	r0, r3
 80027dc:	d02a      	beq.n	8002834 <HAL_GPIO_Init+0x100>
 80027de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027e2:	4298      	cmp	r0, r3
 80027e4:	f000 808a 	beq.w	80028fc <HAL_GPIO_Init+0x1c8>
 80027e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027ec:	4298      	cmp	r0, r3
 80027ee:	f000 8087 	beq.w	8002900 <HAL_GPIO_Init+0x1cc>
 80027f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027f6:	4298      	cmp	r0, r3
 80027f8:	d01a      	beq.n	8002830 <HAL_GPIO_Init+0xfc>
 80027fa:	2304      	movs	r3, #4
 80027fc:	e01b      	b.n	8002836 <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027fe:	68cd      	ldr	r5, [r1, #12]
          break;
 8002800:	e7bd      	b.n	800277e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002802:	68cd      	ldr	r5, [r1, #12]
 8002804:	3504      	adds	r5, #4
          break;
 8002806:	e7ba      	b.n	800277e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002808:	68cd      	ldr	r5, [r1, #12]
 800280a:	3508      	adds	r5, #8
          break;
 800280c:	e7b7      	b.n	800277e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800280e:	68cd      	ldr	r5, [r1, #12]
 8002810:	350c      	adds	r5, #12
          break;
 8002812:	e7b4      	b.n	800277e <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8002814:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002816:	2508      	movs	r5, #8
 8002818:	e7b1      	b.n	800277e <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800281a:	2500      	movs	r5, #0
 800281c:	e7af      	b.n	800277e <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800281e:	2504      	movs	r5, #4
 8002820:	e7ad      	b.n	800277e <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002822:	f100 0c04 	add.w	ip, r0, #4
 8002826:	e7ad      	b.n	8002784 <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002828:	f1a4 0208 	sub.w	r2, r4, #8
 800282c:	0092      	lsls	r2, r2, #2
 800282e:	e7ac      	b.n	800278a <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002830:	2303      	movs	r3, #3
 8002832:	e000      	b.n	8002836 <HAL_GPIO_Init+0x102>
 8002834:	2300      	movs	r3, #0
 8002836:	40bb      	lsls	r3, r7
 8002838:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 800283c:	3202      	adds	r2, #2
 800283e:	4f42      	ldr	r7, [pc, #264]	; (8002948 <HAL_GPIO_Init+0x214>)
 8002840:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002844:	684b      	ldr	r3, [r1, #4]
 8002846:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800284a:	d05b      	beq.n	8002904 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800284c:	4a40      	ldr	r2, [pc, #256]	; (8002950 <HAL_GPIO_Init+0x21c>)
 800284e:	6813      	ldr	r3, [r2, #0]
 8002850:	4333      	orrs	r3, r6
 8002852:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002854:	684b      	ldr	r3, [r1, #4]
 8002856:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800285a:	d059      	beq.n	8002910 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800285c:	4a3c      	ldr	r2, [pc, #240]	; (8002950 <HAL_GPIO_Init+0x21c>)
 800285e:	6853      	ldr	r3, [r2, #4]
 8002860:	4333      	orrs	r3, r6
 8002862:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002864:	684b      	ldr	r3, [r1, #4]
 8002866:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800286a:	d057      	beq.n	800291c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800286c:	4a38      	ldr	r2, [pc, #224]	; (8002950 <HAL_GPIO_Init+0x21c>)
 800286e:	6893      	ldr	r3, [r2, #8]
 8002870:	4333      	orrs	r3, r6
 8002872:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002874:	684b      	ldr	r3, [r1, #4]
 8002876:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800287a:	d055      	beq.n	8002928 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800287c:	4a34      	ldr	r2, [pc, #208]	; (8002950 <HAL_GPIO_Init+0x21c>)
 800287e:	68d3      	ldr	r3, [r2, #12]
 8002880:	431e      	orrs	r6, r3
 8002882:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8002884:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002886:	680b      	ldr	r3, [r1, #0]
 8002888:	fa33 f204 	lsrs.w	r2, r3, r4
 800288c:	d052      	beq.n	8002934 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 800288e:	2201      	movs	r2, #1
 8002890:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002892:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 8002896:	ea32 0303 	bics.w	r3, r2, r3
 800289a:	d1f3      	bne.n	8002884 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 800289c:	684b      	ldr	r3, [r1, #4]
 800289e:	2b12      	cmp	r3, #18
 80028a0:	f63f af4d 	bhi.w	800273e <HAL_GPIO_Init+0xa>
 80028a4:	2b12      	cmp	r3, #18
 80028a6:	f63f af6a 	bhi.w	800277e <HAL_GPIO_Init+0x4a>
 80028aa:	a701      	add	r7, pc, #4	; (adr r7, 80028b0 <HAL_GPIO_Init+0x17c>)
 80028ac:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 80028b0:	08002767 	.word	0x08002767
 80028b4:	080027ff 	.word	0x080027ff
 80028b8:	08002809 	.word	0x08002809
 80028bc:	0800281b 	.word	0x0800281b
 80028c0:	0800277f 	.word	0x0800277f
 80028c4:	0800277f 	.word	0x0800277f
 80028c8:	0800277f 	.word	0x0800277f
 80028cc:	0800277f 	.word	0x0800277f
 80028d0:	0800277f 	.word	0x0800277f
 80028d4:	0800277f 	.word	0x0800277f
 80028d8:	0800277f 	.word	0x0800277f
 80028dc:	0800277f 	.word	0x0800277f
 80028e0:	0800277f 	.word	0x0800277f
 80028e4:	0800277f 	.word	0x0800277f
 80028e8:	0800277f 	.word	0x0800277f
 80028ec:	0800277f 	.word	0x0800277f
 80028f0:	0800277f 	.word	0x0800277f
 80028f4:	08002803 	.word	0x08002803
 80028f8:	0800280f 	.word	0x0800280f
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028fc:	2301      	movs	r3, #1
 80028fe:	e79a      	b.n	8002836 <HAL_GPIO_Init+0x102>
 8002900:	2302      	movs	r3, #2
 8002902:	e798      	b.n	8002836 <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002904:	4a12      	ldr	r2, [pc, #72]	; (8002950 <HAL_GPIO_Init+0x21c>)
 8002906:	6813      	ldr	r3, [r2, #0]
 8002908:	ea23 0306 	bic.w	r3, r3, r6
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e7a1      	b.n	8002854 <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002910:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <HAL_GPIO_Init+0x21c>)
 8002912:	6853      	ldr	r3, [r2, #4]
 8002914:	ea23 0306 	bic.w	r3, r3, r6
 8002918:	6053      	str	r3, [r2, #4]
 800291a:	e7a3      	b.n	8002864 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800291c:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <HAL_GPIO_Init+0x21c>)
 800291e:	6893      	ldr	r3, [r2, #8]
 8002920:	ea23 0306 	bic.w	r3, r3, r6
 8002924:	6093      	str	r3, [r2, #8]
 8002926:	e7a5      	b.n	8002874 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002928:	4a09      	ldr	r2, [pc, #36]	; (8002950 <HAL_GPIO_Init+0x21c>)
 800292a:	68d3      	ldr	r3, [r2, #12]
 800292c:	ea23 0606 	bic.w	r6, r3, r6
 8002930:	60d6      	str	r6, [r2, #12]
 8002932:	e7a7      	b.n	8002884 <HAL_GPIO_Init+0x150>
  }
}
 8002934:	b002      	add	sp, #8
 8002936:	bcf0      	pop	{r4, r5, r6, r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	10220000 	.word	0x10220000
 8002940:	10310000 	.word	0x10310000
 8002944:	40021000 	.word	0x40021000
 8002948:	40010000 	.word	0x40010000
 800294c:	40010800 	.word	0x40010800
 8002950:	40010400 	.word	0x40010400

08002954 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002954:	b10a      	cbz	r2, 800295a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002956:	6101      	str	r1, [r0, #16]
 8002958:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800295a:	0409      	lsls	r1, r1, #16
 800295c:	6101      	str	r1, [r0, #16]
  }
}
 800295e:	4770      	bx	lr

08002960 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002960:	6803      	ldr	r3, [r0, #0]
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002968:	d101      	bne.n	800296e <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800296a:	2000      	movs	r0, #0
}
 800296c:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800296e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002972:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002974:	2300      	movs	r3, #0
 8002976:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002978:	2220      	movs	r2, #32
 800297a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800297e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002982:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002984:	f042 0204 	orr.w	r2, r2, #4
 8002988:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800298a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800298e:	2001      	movs	r0, #1
 8002990:	4770      	bx	lr

08002992 <I2C_WaitOnFlagUntilTimeout>:
{
 8002992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002996:	4607      	mov	r7, r0
 8002998:	460d      	mov	r5, r1
 800299a:	4690      	mov	r8, r2
 800299c:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800299e:	e022      	b.n	80029e6 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a0:	f7ff fe52 	bl	8002648 <HAL_GetTick>
 80029a4:	9b06      	ldr	r3, [sp, #24]
 80029a6:	1ac0      	subs	r0, r0, r3
 80029a8:	42b0      	cmp	r0, r6
 80029aa:	d800      	bhi.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x1c>
 80029ac:	b9de      	cbnz	r6, 80029e6 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029b2:	2220      	movs	r2, #32
 80029b4:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029b8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029be:	f042 0220 	orr.w	r2, r2, #32
 80029c2:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80029c4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 80029c8:	2001      	movs	r0, #1
 80029ca:	e01a      	b.n	8002a02 <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	699c      	ldr	r4, [r3, #24]
 80029d0:	ea25 0404 	bic.w	r4, r5, r4
 80029d4:	b2a4      	uxth	r4, r4
 80029d6:	fab4 f484 	clz	r4, r4
 80029da:	0964      	lsrs	r4, r4, #5
 80029dc:	45a0      	cmp	r8, r4
 80029de:	d10f      	bne.n	8002a00 <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 80029e0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80029e4:	d1dc      	bne.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e6:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d1ee      	bne.n	80029cc <I2C_WaitOnFlagUntilTimeout+0x3a>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	695c      	ldr	r4, [r3, #20]
 80029f2:	ea25 0404 	bic.w	r4, r5, r4
 80029f6:	b2a4      	uxth	r4, r4
 80029f8:	fab4 f484 	clz	r4, r4
 80029fc:	0964      	lsrs	r4, r4, #5
 80029fe:	e7ed      	b.n	80029dc <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 8002a00:	2000      	movs	r0, #0
}
 8002a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	460e      	mov	r6, r1
 8002a0e:	4617      	mov	r7, r2
 8002a10:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a12:	e03d      	b.n	8002a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a1a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a1c:	682b      	ldr	r3, [r5, #0]
 8002a1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a22:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a32:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002a34:	f042 0204 	orr.w	r2, r2, #4
 8002a38:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002a3a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002a3e:	2001      	movs	r0, #1
 8002a40:	e034      	b.n	8002aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7ff fe01 	bl	8002648 <HAL_GetTick>
 8002a46:	eba0 0008 	sub.w	r0, r0, r8
 8002a4a:	42b8      	cmp	r0, r7
 8002a4c:	d800      	bhi.n	8002a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8002a4e:	b9ff      	cbnz	r7, 8002a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a54:	2220      	movs	r2, #32
 8002a56:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a5e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002a60:	f042 0220 	orr.w	r2, r2, #32
 8002a64:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002a66:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	e01e      	b.n	8002aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a6e:	682b      	ldr	r3, [r5, #0]
 8002a70:	699c      	ldr	r4, [r3, #24]
 8002a72:	ea26 0404 	bic.w	r4, r6, r4
 8002a76:	b2a4      	uxth	r4, r4
 8002a78:	3c00      	subs	r4, #0
 8002a7a:	bf18      	it	ne
 8002a7c:	2401      	movne	r4, #1
 8002a7e:	b1a4      	cbz	r4, 8002aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a80:	682b      	ldr	r3, [r5, #0]
 8002a82:	695a      	ldr	r2, [r3, #20]
 8002a84:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002a88:	d1c4      	bne.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8002a8a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002a8e:	d1d8      	bne.n	8002a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a90:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d1ea      	bne.n	8002a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8002a98:	682b      	ldr	r3, [r5, #0]
 8002a9a:	695c      	ldr	r4, [r3, #20]
 8002a9c:	ea26 0404 	bic.w	r4, r6, r4
 8002aa0:	b2a4      	uxth	r4, r4
 8002aa2:	3c00      	subs	r4, #0
 8002aa4:	bf18      	it	ne
 8002aa6:	2401      	movne	r4, #1
 8002aa8:	e7e9      	b.n	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8002aaa:	2000      	movs	r0, #0
}
 8002aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002ab0 <I2C_MasterRequestWrite>:
{
 8002ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	460d      	mov	r5, r1
 8002ab8:	4616      	mov	r6, r2
 8002aba:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002abc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d00d      	beq.n	8002ade <I2C_MasterRequestWrite+0x2e>
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d00b      	beq.n	8002ade <I2C_MasterRequestWrite+0x2e>
 8002ac6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aca:	d008      	beq.n	8002ade <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002acc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002ace:	2b12      	cmp	r3, #18
 8002ad0:	d10a      	bne.n	8002ae8 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad2:	6802      	ldr	r2, [r0, #0]
 8002ad4:	6813      	ldr	r3, [r2, #0]
 8002ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	e004      	b.n	8002ae8 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ade:	6822      	ldr	r2, [r4, #0]
 8002ae0:	6813      	ldr	r3, [r2, #0]
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae6:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae8:	9700      	str	r7, [sp, #0]
 8002aea:	4633      	mov	r3, r6
 8002aec:	2200      	movs	r2, #0
 8002aee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7ff ff4d 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 8002af8:	bb10      	cbnz	r0, 8002b40 <I2C_MasterRequestWrite+0x90>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002afa:	6923      	ldr	r3, [r4, #16]
 8002afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b00:	d10c      	bne.n	8002b1c <I2C_MasterRequestWrite+0x6c>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002b08:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b0a:	463b      	mov	r3, r7
 8002b0c:	4632      	mov	r2, r6
 8002b0e:	490f      	ldr	r1, [pc, #60]	; (8002b4c <I2C_MasterRequestWrite+0x9c>)
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7ff ff78 	bl	8002a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b16:	b9b8      	cbnz	r0, 8002b48 <I2C_MasterRequestWrite+0x98>
}
 8002b18:	b003      	add	sp, #12
 8002b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b1c:	11eb      	asrs	r3, r5, #7
 8002b1e:	6822      	ldr	r2, [r4, #0]
 8002b20:	f003 0306 	and.w	r3, r3, #6
 8002b24:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002b28:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b2a:	463b      	mov	r3, r7
 8002b2c:	4632      	mov	r2, r6
 8002b2e:	4908      	ldr	r1, [pc, #32]	; (8002b50 <I2C_MasterRequestWrite+0xa0>)
 8002b30:	4620      	mov	r0, r4
 8002b32:	f7ff ff68 	bl	8002a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b36:	b928      	cbnz	r0, 8002b44 <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	b2ed      	uxtb	r5, r5
 8002b3c:	611d      	str	r5, [r3, #16]
 8002b3e:	e7e4      	b.n	8002b0a <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 8002b40:	2001      	movs	r0, #1
 8002b42:	e7e9      	b.n	8002b18 <I2C_MasterRequestWrite+0x68>
      return HAL_ERROR;
 8002b44:	2001      	movs	r0, #1
 8002b46:	e7e7      	b.n	8002b18 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8002b48:	2001      	movs	r0, #1
 8002b4a:	e7e5      	b.n	8002b18 <I2C_MasterRequestWrite+0x68>
 8002b4c:	00010002 	.word	0x00010002
 8002b50:	00010008 	.word	0x00010008

08002b54 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002b54:	b570      	push	{r4, r5, r6, lr}
 8002b56:	4604      	mov	r4, r0
 8002b58:	460d      	mov	r5, r1
 8002b5a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b64:	d11c      	bne.n	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b66:	4620      	mov	r0, r4
 8002b68:	f7ff fefa 	bl	8002960 <I2C_IsAcknowledgeFailed>
 8002b6c:	b9d0      	cbnz	r0, 8002ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002b6e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002b72:	d0f3      	beq.n	8002b5c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b74:	f7ff fd68 	bl	8002648 <HAL_GetTick>
 8002b78:	1b80      	subs	r0, r0, r6
 8002b7a:	42a8      	cmp	r0, r5
 8002b7c:	d801      	bhi.n	8002b82 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002b7e:	2d00      	cmp	r5, #0
 8002b80:	d1ec      	bne.n	8002b5c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b86:	2220      	movs	r2, #32
 8002b88:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b92:	f042 0220 	orr.w	r2, r2, #32
 8002b96:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002b98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	e000      	b.n	8002ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002ba0:	2000      	movs	r0, #0
}
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	e7fc      	b.n	8002ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08002ba8 <I2C_RequestMemoryWrite>:
{
 8002ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bac:	b085      	sub	sp, #20
 8002bae:	4604      	mov	r4, r0
 8002bb0:	460d      	mov	r5, r1
 8002bb2:	4691      	mov	r9, r2
 8002bb4:	4698      	mov	r8, r3
 8002bb6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002bb8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bba:	6803      	ldr	r3, [r0, #0]
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002bc2:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc4:	9700      	str	r7, [sp, #0]
 8002bc6:	4633      	mov	r3, r6
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bce:	f7ff fee0 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	b118      	cbz	r0, 8002bdc <I2C_RequestMemoryWrite+0x34>
    return HAL_ERROR;
 8002bd4:	2001      	movs	r0, #1
}
 8002bd6:	b005      	add	sp, #20
 8002bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002be2:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002be4:	463b      	mov	r3, r7
 8002be6:	4632      	mov	r2, r6
 8002be8:	4920      	ldr	r1, [pc, #128]	; (8002c6c <I2C_RequestMemoryWrite+0xc4>)
 8002bea:	4620      	mov	r0, r4
 8002bec:	f7ff ff0b 	bl	8002a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf0:	b108      	cbz	r0, 8002bf6 <I2C_RequestMemoryWrite+0x4e>
    return HAL_ERROR;
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	e7ef      	b.n	8002bd6 <I2C_RequestMemoryWrite+0x2e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	9303      	str	r3, [sp, #12]
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	9203      	str	r2, [sp, #12]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	9303      	str	r3, [sp, #12]
 8002c04:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c06:	463a      	mov	r2, r7
 8002c08:	4631      	mov	r1, r6
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f7ff ffa2 	bl	8002b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c10:	b938      	cbnz	r0, 8002c22 <I2C_RequestMemoryWrite+0x7a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c12:	f1b8 0f01 	cmp.w	r8, #1
 8002c16:	d10f      	bne.n	8002c38 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	fa5f f689 	uxtb.w	r6, r9
 8002c1e:	611e      	str	r6, [r3, #16]
 8002c20:	e7d9      	b.n	8002bd6 <I2C_RequestMemoryWrite+0x2e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d001      	beq.n	8002c2c <I2C_RequestMemoryWrite+0x84>
    return HAL_ERROR;
 8002c28:	2001      	movs	r0, #1
 8002c2a:	e7d4      	b.n	8002bd6 <I2C_RequestMemoryWrite+0x2e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2c:	6822      	ldr	r2, [r4, #0]
 8002c2e:	6813      	ldr	r3, [r2, #0]
 8002c30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e7f7      	b.n	8002c28 <I2C_RequestMemoryWrite+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8002c3e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c40:	463a      	mov	r2, r7
 8002c42:	4631      	mov	r1, r6
 8002c44:	4620      	mov	r0, r4
 8002c46:	f7ff ff85 	bl	8002b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c4a:	b920      	cbnz	r0, 8002c56 <I2C_RequestMemoryWrite+0xae>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	fa5f f689 	uxtb.w	r6, r9
 8002c52:	611e      	str	r6, [r3, #16]
 8002c54:	e7bf      	b.n	8002bd6 <I2C_RequestMemoryWrite+0x2e>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d001      	beq.n	8002c60 <I2C_RequestMemoryWrite+0xb8>
      return HAL_ERROR;
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	e7ba      	b.n	8002bd6 <I2C_RequestMemoryWrite+0x2e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	6822      	ldr	r2, [r4, #0]
 8002c62:	6813      	ldr	r3, [r2, #0]
 8002c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e7f7      	b.n	8002c5c <I2C_RequestMemoryWrite+0xb4>
 8002c6c:	00010002 	.word	0x00010002

08002c70 <I2C_RequestMemoryRead>:
{
 8002c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	4604      	mov	r4, r0
 8002c78:	460d      	mov	r5, r1
 8002c7a:	4616      	mov	r6, r2
 8002c7c:	4699      	mov	r9, r3
 8002c7e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002c82:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c84:	6802      	ldr	r2, [r0, #0]
 8002c86:	6813      	ldr	r3, [r2, #0]
 8002c88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c8c:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	6819      	ldr	r1, [r3, #0]
 8002c92:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002c96:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c98:	9700      	str	r7, [sp, #0]
 8002c9a:	4643      	mov	r3, r8
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ca2:	f7ff fe76 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 8002ca6:	b118      	cbz	r0, 8002cb0 <I2C_RequestMemoryRead+0x40>
    return HAL_ERROR;
 8002ca8:	2001      	movs	r0, #1
}
 8002caa:	b004      	add	sp, #16
 8002cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cb0:	fa5f fa85 	uxtb.w	sl, r5
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002cba:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cbc:	463b      	mov	r3, r7
 8002cbe:	4642      	mov	r2, r8
 8002cc0:	4936      	ldr	r1, [pc, #216]	; (8002d9c <I2C_RequestMemoryRead+0x12c>)
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	f7ff fe9f 	bl	8002a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cc8:	b108      	cbz	r0, 8002cce <I2C_RequestMemoryRead+0x5e>
    return HAL_ERROR;
 8002cca:	2001      	movs	r0, #1
 8002ccc:	e7ed      	b.n	8002caa <I2C_RequestMemoryRead+0x3a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	9303      	str	r3, [sp, #12]
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	9203      	str	r2, [sp, #12]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	9303      	str	r3, [sp, #12]
 8002cdc:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cde:	463a      	mov	r2, r7
 8002ce0:	4641      	mov	r1, r8
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f7ff ff36 	bl	8002b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce8:	b980      	cbnz	r0, 8002d0c <I2C_RequestMemoryRead+0x9c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cea:	f1b9 0f01 	cmp.w	r9, #1
 8002cee:	d118      	bne.n	8002d22 <I2C_RequestMemoryRead+0xb2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	b2f6      	uxtb	r6, r6
 8002cf4:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf6:	463a      	mov	r2, r7
 8002cf8:	4641      	mov	r1, r8
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f7ff ff2a 	bl	8002b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d00:	b368      	cbz	r0, 8002d5e <I2C_RequestMemoryRead+0xee>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d024      	beq.n	8002d52 <I2C_RequestMemoryRead+0xe2>
    return HAL_ERROR;
 8002d08:	2001      	movs	r0, #1
 8002d0a:	e7ce      	b.n	8002caa <I2C_RequestMemoryRead+0x3a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d001      	beq.n	8002d16 <I2C_RequestMemoryRead+0xa6>
    return HAL_ERROR;
 8002d12:	2001      	movs	r0, #1
 8002d14:	e7c9      	b.n	8002caa <I2C_RequestMemoryRead+0x3a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d16:	6822      	ldr	r2, [r4, #0]
 8002d18:	6813      	ldr	r3, [r2, #0]
 8002d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	e7f7      	b.n	8002d12 <I2C_RequestMemoryRead+0xa2>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	0a32      	lsrs	r2, r6, #8
 8002d26:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d28:	463a      	mov	r2, r7
 8002d2a:	4641      	mov	r1, r8
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f7ff ff11 	bl	8002b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d32:	b918      	cbnz	r0, 8002d3c <I2C_RequestMemoryRead+0xcc>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	b2f6      	uxtb	r6, r6
 8002d38:	611e      	str	r6, [r3, #16]
 8002d3a:	e7dc      	b.n	8002cf6 <I2C_RequestMemoryRead+0x86>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d001      	beq.n	8002d46 <I2C_RequestMemoryRead+0xd6>
      return HAL_ERROR;
 8002d42:	2001      	movs	r0, #1
 8002d44:	e7b1      	b.n	8002caa <I2C_RequestMemoryRead+0x3a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d46:	6822      	ldr	r2, [r4, #0]
 8002d48:	6813      	ldr	r3, [r2, #0]
 8002d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	e7f7      	b.n	8002d42 <I2C_RequestMemoryRead+0xd2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d52:	6822      	ldr	r2, [r4, #0]
 8002d54:	6813      	ldr	r3, [r2, #0]
 8002d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	e7d4      	b.n	8002d08 <I2C_RequestMemoryRead+0x98>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d5e:	6822      	ldr	r2, [r4, #0]
 8002d60:	6813      	ldr	r3, [r2, #0]
 8002d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d66:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d68:	9700      	str	r7, [sp, #0]
 8002d6a:	4643      	mov	r3, r8
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d72:	4620      	mov	r0, r4
 8002d74:	f7ff fe0d 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 8002d78:	b108      	cbz	r0, 8002d7e <I2C_RequestMemoryRead+0x10e>
    return HAL_ERROR;
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	e795      	b.n	8002caa <I2C_RequestMemoryRead+0x3a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d7e:	6822      	ldr	r2, [r4, #0]
 8002d80:	f04a 0301 	orr.w	r3, sl, #1
 8002d84:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d86:	463b      	mov	r3, r7
 8002d88:	4642      	mov	r2, r8
 8002d8a:	4904      	ldr	r1, [pc, #16]	; (8002d9c <I2C_RequestMemoryRead+0x12c>)
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f7ff fe3a 	bl	8002a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d92:	2800      	cmp	r0, #0
 8002d94:	d089      	beq.n	8002caa <I2C_RequestMemoryRead+0x3a>
    return HAL_ERROR;
 8002d96:	2001      	movs	r0, #1
 8002d98:	e787      	b.n	8002caa <I2C_RequestMemoryRead+0x3a>
 8002d9a:	bf00      	nop
 8002d9c:	00010002 	.word	0x00010002

08002da0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	4604      	mov	r4, r0
 8002da4:	460d      	mov	r5, r1
 8002da6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f013 0f04 	tst.w	r3, #4
 8002db0:	d11c      	bne.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002db2:	4620      	mov	r0, r4
 8002db4:	f7ff fdd4 	bl	8002960 <I2C_IsAcknowledgeFailed>
 8002db8:	b9d0      	cbnz	r0, 8002df0 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002dba:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002dbe:	d0f3      	beq.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc0:	f7ff fc42 	bl	8002648 <HAL_GetTick>
 8002dc4:	1b80      	subs	r0, r0, r6
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	d801      	bhi.n	8002dce <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002dca:	2d00      	cmp	r5, #0
 8002dcc:	d1ec      	bne.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ddc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002dde:	f042 0220 	orr.w	r2, r2, #32
 8002de2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002de4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002de8:	2001      	movs	r0, #1
 8002dea:	e000      	b.n	8002dee <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002dec:	2000      	movs	r0, #0
}
 8002dee:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002df0:	2001      	movs	r0, #1
 8002df2:	e7fc      	b.n	8002dee <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08002df4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	4605      	mov	r5, r0
 8002df8:	460c      	mov	r4, r1
 8002dfa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dfc:	682b      	ldr	r3, [r5, #0]
 8002dfe:	6959      	ldr	r1, [r3, #20]
 8002e00:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002e04:	d129      	bne.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e06:	6959      	ldr	r1, [r3, #20]
 8002e08:	f011 0f10 	tst.w	r1, #16
 8002e0c:	d115      	bne.n	8002e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0e:	f7ff fc1b 	bl	8002648 <HAL_GetTick>
 8002e12:	1b80      	subs	r0, r0, r6
 8002e14:	42a0      	cmp	r0, r4
 8002e16:	d801      	bhi.n	8002e1c <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8002e18:	2c00      	cmp	r4, #0
 8002e1a:	d1ef      	bne.n	8002dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e20:	2220      	movs	r2, #32
 8002e22:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e26:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e2a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002e2c:	f042 0220 	orr.w	r2, r2, #32
 8002e30:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002e32:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002e36:	2001      	movs	r0, #1
}
 8002e38:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e3a:	f06f 0210 	mvn.w	r2, #16
 8002e3e:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e44:	2220      	movs	r2, #32
 8002e46:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e4e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002e50:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002e52:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002e56:	2001      	movs	r0, #1
 8002e58:	e7ee      	b.n	8002e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	e7ec      	b.n	8002e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08002e60 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002e60:	2800      	cmp	r0, #0
 8002e62:	f000 80c2 	beq.w	8002fea <HAL_I2C_Init+0x18a>
{
 8002e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e68:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d06d      	beq.n	8002f4e <HAL_I2C_Init+0xee>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e72:	2324      	movs	r3, #36	; 0x24
 8002e74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002e78:	6822      	ldr	r2, [r4, #0]
 8002e7a:	6813      	ldr	r3, [r2, #0]
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e82:	f000 ff7f 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e86:	6862      	ldr	r2, [r4, #4]
 8002e88:	4b5a      	ldr	r3, [pc, #360]	; (8002ff4 <HAL_I2C_Init+0x194>)
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d864      	bhi.n	8002f58 <HAL_I2C_Init+0xf8>
 8002e8e:	4b5a      	ldr	r3, [pc, #360]	; (8002ff8 <HAL_I2C_Init+0x198>)
 8002e90:	4298      	cmp	r0, r3
 8002e92:	bf8c      	ite	hi
 8002e94:	2300      	movhi	r3, #0
 8002e96:	2301      	movls	r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f040 80a8 	bne.w	8002fee <HAL_I2C_Init+0x18e>
  freqrange = I2C_FREQRANGE(pclk1);
 8002e9e:	4d57      	ldr	r5, [pc, #348]	; (8002ffc <HAL_I2C_Init+0x19c>)
 8002ea0:	fba5 3500 	umull	r3, r5, r5, r0
 8002ea4:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ea6:	6826      	ldr	r6, [r4, #0]
 8002ea8:	6871      	ldr	r1, [r6, #4]
 8002eaa:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002eae:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8002eb2:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eb4:	6821      	ldr	r1, [r4, #0]
 8002eb6:	6a0b      	ldr	r3, [r1, #32]
 8002eb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ebc:	6865      	ldr	r5, [r4, #4]
 8002ebe:	4a4d      	ldr	r2, [pc, #308]	; (8002ff4 <HAL_I2C_Init+0x194>)
 8002ec0:	4295      	cmp	r5, r2
 8002ec2:	d84f      	bhi.n	8002f64 <HAL_I2C_Init+0x104>
 8002ec4:	1c7a      	adds	r2, r7, #1
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eca:	6825      	ldr	r5, [r4, #0]
 8002ecc:	69e9      	ldr	r1, [r5, #28]
 8002ece:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002ed2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002ed6:	6863      	ldr	r3, [r4, #4]
 8002ed8:	4a46      	ldr	r2, [pc, #280]	; (8002ff4 <HAL_I2C_Init+0x194>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d84c      	bhi.n	8002f78 <HAL_I2C_Init+0x118>
 8002ede:	3801      	subs	r0, #1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002eec:	4218      	tst	r0, r3
 8002eee:	d078      	beq.n	8002fe2 <HAL_I2C_Init+0x182>
 8002ef0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ef8:	6821      	ldr	r1, [r4, #0]
 8002efa:	680b      	ldr	r3, [r1, #0]
 8002efc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f00:	69e2      	ldr	r2, [r4, #28]
 8002f02:	6a20      	ldr	r0, [r4, #32]
 8002f04:	4302      	orrs	r2, r0
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f0a:	6821      	ldr	r1, [r4, #0]
 8002f0c:	688b      	ldr	r3, [r1, #8]
 8002f0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f16:	6922      	ldr	r2, [r4, #16]
 8002f18:	68e0      	ldr	r0, [r4, #12]
 8002f1a:	4302      	orrs	r2, r0
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f20:	6821      	ldr	r1, [r4, #0]
 8002f22:	68cb      	ldr	r3, [r1, #12]
 8002f24:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f28:	6962      	ldr	r2, [r4, #20]
 8002f2a:	69a0      	ldr	r0, [r4, #24]
 8002f2c:	4302      	orrs	r2, r0
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002f32:	6822      	ldr	r2, [r4, #0]
 8002f34:	6813      	ldr	r3, [r2, #0]
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f40:	2320      	movs	r3, #32
 8002f42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f46:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f48:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002f4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002f52:	f7ff fa11 	bl	8002378 <HAL_I2C_MspInit>
 8002f56:	e78c      	b.n	8002e72 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f58:	4b29      	ldr	r3, [pc, #164]	; (8003000 <HAL_I2C_Init+0x1a0>)
 8002f5a:	4298      	cmp	r0, r3
 8002f5c:	bf8c      	ite	hi
 8002f5e:	2300      	movhi	r3, #0
 8002f60:	2301      	movls	r3, #1
 8002f62:	e799      	b.n	8002e98 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f64:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f68:	fb02 f207 	mul.w	r2, r2, r7
 8002f6c:	4d25      	ldr	r5, [pc, #148]	; (8003004 <HAL_I2C_Init+0x1a4>)
 8002f6e:	fba5 5202 	umull	r5, r2, r5, r2
 8002f72:	0992      	lsrs	r2, r2, #6
 8002f74:	3201      	adds	r2, #1
 8002f76:	e7a6      	b.n	8002ec6 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f78:	68a2      	ldr	r2, [r4, #8]
 8002f7a:	b9ba      	cbnz	r2, 8002fac <HAL_I2C_Init+0x14c>
 8002f7c:	1e46      	subs	r6, r0, #1
 8002f7e:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8002f82:	fbb6 f6f7 	udiv	r6, r6, r7
 8002f86:	3601      	adds	r6, #1
 8002f88:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002f8c:	fab6 f686 	clz	r6, r6
 8002f90:	0976      	lsrs	r6, r6, #5
 8002f92:	bb46      	cbnz	r6, 8002fe6 <HAL_I2C_Init+0x186>
 8002f94:	b9c2      	cbnz	r2, 8002fc8 <HAL_I2C_Init+0x168>
 8002f96:	1e42      	subs	r2, r0, #1
 8002f98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa0:	3201      	adds	r2, #1
 8002fa2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002fa6:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8002faa:	e7a3      	b.n	8002ef4 <HAL_I2C_Init+0x94>
 8002fac:	1e46      	subs	r6, r0, #1
 8002fae:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8002fb2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8002fb6:	fbb6 f6f7 	udiv	r6, r6, r7
 8002fba:	3601      	adds	r6, #1
 8002fbc:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002fc0:	fab6 f686 	clz	r6, r6
 8002fc4:	0976      	lsrs	r6, r6, #5
 8002fc6:	e7e4      	b.n	8002f92 <HAL_I2C_Init+0x132>
 8002fc8:	1e42      	subs	r2, r0, #1
 8002fca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002fce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002fd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd6:	3201      	adds	r2, #1
 8002fd8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002fdc:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8002fe0:	e788      	b.n	8002ef4 <HAL_I2C_Init+0x94>
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	e786      	b.n	8002ef4 <HAL_I2C_Init+0x94>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e784      	b.n	8002ef4 <HAL_I2C_Init+0x94>
    return HAL_ERROR;
 8002fea:	2001      	movs	r0, #1
}
 8002fec:	4770      	bx	lr
    return HAL_ERROR;
 8002fee:	2001      	movs	r0, #1
 8002ff0:	e7ac      	b.n	8002f4c <HAL_I2C_Init+0xec>
 8002ff2:	bf00      	nop
 8002ff4:	000186a0 	.word	0x000186a0
 8002ff8:	001e847f 	.word	0x001e847f
 8002ffc:	431bde83 	.word	0x431bde83
 8003000:	003d08ff 	.word	0x003d08ff
 8003004:	10624dd3 	.word	0x10624dd3

08003008 <HAL_I2C_Master_Transmit>:
{
 8003008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800300c:	b085      	sub	sp, #20
 800300e:	4604      	mov	r4, r0
 8003010:	460f      	mov	r7, r1
 8003012:	4691      	mov	r9, r2
 8003014:	4698      	mov	r8, r3
 8003016:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003018:	f7ff fb16 	bl	8002648 <HAL_GetTick>
 800301c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800301e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003022:	b2c0      	uxtb	r0, r0
 8003024:	2820      	cmp	r0, #32
 8003026:	d004      	beq.n	8003032 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8003028:	2702      	movs	r7, #2
}
 800302a:	4638      	mov	r0, r7
 800302c:	b005      	add	sp, #20
 800302e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003032:	9500      	str	r5, [sp, #0]
 8003034:	2319      	movs	r3, #25
 8003036:	2201      	movs	r2, #1
 8003038:	494f      	ldr	r1, [pc, #316]	; (8003178 <HAL_I2C_Master_Transmit+0x170>)
 800303a:	4620      	mov	r0, r4
 800303c:	f7ff fca9 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 8003040:	2800      	cmp	r0, #0
 8003042:	f040 8092 	bne.w	800316a <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8003046:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800304a:	2b01      	cmp	r3, #1
 800304c:	f000 808f 	beq.w	800316e <HAL_I2C_Master_Transmit+0x166>
 8003050:	2301      	movs	r3, #1
 8003052:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	f012 0f01 	tst.w	r2, #1
 800305e:	d103      	bne.n	8003068 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003068:	6822      	ldr	r2, [r4, #0]
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003070:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003072:	2321      	movs	r3, #33	; 0x21
 8003074:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003078:	2310      	movs	r3, #16
 800307a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800307e:	2300      	movs	r3, #0
 8003080:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003082:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003086:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800308a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800308c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800308e:	4b3b      	ldr	r3, [pc, #236]	; (800317c <HAL_I2C_Master_Transmit+0x174>)
 8003090:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003092:	462b      	mov	r3, r5
 8003094:	4632      	mov	r2, r6
 8003096:	4639      	mov	r1, r7
 8003098:	4620      	mov	r0, r4
 800309a:	f7ff fd09 	bl	8002ab0 <I2C_MasterRequestWrite>
 800309e:	4607      	mov	r7, r0
 80030a0:	2800      	cmp	r0, #0
 80030a2:	d166      	bne.n	8003172 <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a4:	2300      	movs	r3, #0
 80030a6:	9303      	str	r3, [sp, #12]
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	9203      	str	r2, [sp, #12]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	9303      	str	r3, [sp, #12]
 80030b2:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80030b4:	e011      	b.n	80030da <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 80030bc:	2701      	movs	r7, #1
 80030be:	e7b4      	b.n	800302a <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	6822      	ldr	r2, [r4, #0]
 80030c2:	6813      	ldr	r3, [r2, #0]
 80030c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e7f7      	b.n	80030bc <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030cc:	462a      	mov	r2, r5
 80030ce:	4631      	mov	r1, r6
 80030d0:	4620      	mov	r0, r4
 80030d2:	f7ff fe65 	bl	8002da0 <I2C_WaitOnBTFFlagUntilTimeout>
 80030d6:	2800      	cmp	r0, #0
 80030d8:	d12e      	bne.n	8003138 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 80030da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d036      	beq.n	800314e <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e0:	462a      	mov	r2, r5
 80030e2:	4631      	mov	r1, r6
 80030e4:	4620      	mov	r0, r4
 80030e6:	f7ff fd35 	bl	8002b54 <I2C_WaitOnTXEFlagUntilTimeout>
 80030ea:	2800      	cmp	r0, #0
 80030ec:	d1e3      	bne.n	80030b6 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	7812      	ldrb	r2, [r2, #0]
 80030f4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80030f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80030f8:	1c4b      	adds	r3, r1, #1
 80030fa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80030fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29b      	uxth	r3, r3
 8003104:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003106:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003108:	3b01      	subs	r3, #1
 800310a:	b29b      	uxth	r3, r3
 800310c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800310e:	6822      	ldr	r2, [r4, #0]
 8003110:	6950      	ldr	r0, [r2, #20]
 8003112:	f010 0f04 	tst.w	r0, #4
 8003116:	d0d9      	beq.n	80030cc <HAL_I2C_Master_Transmit+0xc4>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0d7      	beq.n	80030cc <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800311c:	784b      	ldrb	r3, [r1, #1]
 800311e:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003122:	3301      	adds	r3, #1
 8003124:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003126:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29b      	uxth	r3, r3
 800312e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003130:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003132:	3b01      	subs	r3, #1
 8003134:	8523      	strh	r3, [r4, #40]	; 0x28
 8003136:	e7c9      	b.n	80030cc <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003138:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800313a:	2b04      	cmp	r3, #4
 800313c:	d001      	beq.n	8003142 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 800313e:	2701      	movs	r7, #1
 8003140:	e773      	b.n	800302a <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003142:	6822      	ldr	r2, [r4, #0]
 8003144:	6813      	ldr	r3, [r2, #0]
 8003146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	e7f7      	b.n	800313e <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314e:	6822      	ldr	r2, [r4, #0]
 8003150:	6813      	ldr	r3, [r2, #0]
 8003152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003156:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003158:	2320      	movs	r3, #32
 800315a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800315e:	2300      	movs	r3, #0
 8003160:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003164:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003168:	e75f      	b.n	800302a <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 800316a:	2702      	movs	r7, #2
 800316c:	e75d      	b.n	800302a <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 800316e:	2702      	movs	r7, #2
 8003170:	e75b      	b.n	800302a <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8003172:	2701      	movs	r7, #1
 8003174:	e759      	b.n	800302a <HAL_I2C_Master_Transmit+0x22>
 8003176:	bf00      	nop
 8003178:	00100002 	.word	0x00100002
 800317c:	ffff0000 	.word	0xffff0000

08003180 <HAL_I2C_Mem_Write>:
{
 8003180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003184:	b083      	sub	sp, #12
 8003186:	4604      	mov	r4, r0
 8003188:	460f      	mov	r7, r1
 800318a:	4690      	mov	r8, r2
 800318c:	4699      	mov	r9, r3
 800318e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003190:	f7ff fa5a 	bl	8002648 <HAL_GetTick>
 8003194:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003196:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800319a:	b2c0      	uxtb	r0, r0
 800319c:	2820      	cmp	r0, #32
 800319e:	d003      	beq.n	80031a8 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 80031a0:	2002      	movs	r0, #2
}
 80031a2:	b003      	add	sp, #12
 80031a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031a8:	9500      	str	r5, [sp, #0]
 80031aa:	2319      	movs	r3, #25
 80031ac:	2201      	movs	r2, #1
 80031ae:	494b      	ldr	r1, [pc, #300]	; (80032dc <HAL_I2C_Mem_Write+0x15c>)
 80031b0:	4620      	mov	r0, r4
 80031b2:	f7ff fbee 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 80031b6:	2800      	cmp	r0, #0
 80031b8:	f040 8089 	bne.w	80032ce <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 80031bc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f000 8086 	beq.w	80032d2 <HAL_I2C_Mem_Write+0x152>
 80031c6:	2301      	movs	r3, #1
 80031c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	f012 0f01 	tst.w	r2, #1
 80031d4:	d103      	bne.n	80031de <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031de:	6822      	ldr	r2, [r4, #0]
 80031e0:	6813      	ldr	r3, [r2, #0]
 80031e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031e6:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031e8:	2321      	movs	r3, #33	; 0x21
 80031ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031ee:	2340      	movs	r3, #64	; 0x40
 80031f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f4:	2300      	movs	r3, #0
 80031f6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80031f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031fa:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031fc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8003200:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003202:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003204:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003206:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <HAL_I2C_Mem_Write+0x160>)
 8003208:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800320a:	9501      	str	r5, [sp, #4]
 800320c:	9600      	str	r6, [sp, #0]
 800320e:	464b      	mov	r3, r9
 8003210:	4642      	mov	r2, r8
 8003212:	4639      	mov	r1, r7
 8003214:	4620      	mov	r0, r4
 8003216:	f7ff fcc7 	bl	8002ba8 <I2C_RequestMemoryWrite>
 800321a:	2800      	cmp	r0, #0
 800321c:	d15b      	bne.n	80032d6 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 800321e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d035      	beq.n	8003290 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003224:	462a      	mov	r2, r5
 8003226:	4631      	mov	r1, r6
 8003228:	4620      	mov	r0, r4
 800322a:	f7ff fc93 	bl	8002b54 <I2C_WaitOnTXEFlagUntilTimeout>
 800322e:	bb20      	cbnz	r0, 800327a <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003230:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	7812      	ldrb	r2, [r2, #0]
 8003236:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003238:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800323a:	1c4b      	adds	r3, r1, #1
 800323c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800323e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003240:	3a01      	subs	r2, #1
 8003242:	b292      	uxth	r2, r2
 8003244:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003246:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29b      	uxth	r3, r3
 800324e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	6958      	ldr	r0, [r3, #20]
 8003254:	f010 0f04 	tst.w	r0, #4
 8003258:	d0e1      	beq.n	800321e <HAL_I2C_Mem_Write+0x9e>
 800325a:	2a00      	cmp	r2, #0
 800325c:	d0df      	beq.n	800321e <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800325e:	784a      	ldrb	r2, [r1, #1]
 8003260:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003264:	3301      	adds	r3, #1
 8003266:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003268:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800326a:	3b01      	subs	r3, #1
 800326c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800326e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29b      	uxth	r3, r3
 8003276:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003278:	e7d1      	b.n	800321e <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800327c:	2b04      	cmp	r3, #4
 800327e:	d001      	beq.n	8003284 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8003280:	2001      	movs	r0, #1
 8003282:	e78e      	b.n	80031a2 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003284:	6822      	ldr	r2, [r4, #0]
 8003286:	6813      	ldr	r3, [r2, #0]
 8003288:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e7f7      	b.n	8003280 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003290:	462a      	mov	r2, r5
 8003292:	4631      	mov	r1, r6
 8003294:	4620      	mov	r0, r4
 8003296:	f7ff fd83 	bl	8002da0 <I2C_WaitOnBTFFlagUntilTimeout>
 800329a:	b150      	cbz	r0, 80032b2 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800329c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d001      	beq.n	80032a6 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 80032a2:	2001      	movs	r0, #1
 80032a4:	e77d      	b.n	80031a2 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a6:	6822      	ldr	r2, [r4, #0]
 80032a8:	6813      	ldr	r3, [r2, #0]
 80032aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	e7f7      	b.n	80032a2 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b2:	6822      	ldr	r2, [r4, #0]
 80032b4:	6813      	ldr	r3, [r2, #0]
 80032b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ba:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	2320      	movs	r3, #32
 80032be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80032c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80032cc:	e769      	b.n	80031a2 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 80032ce:	2002      	movs	r0, #2
 80032d0:	e767      	b.n	80031a2 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 80032d2:	2002      	movs	r0, #2
 80032d4:	e765      	b.n	80031a2 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80032d6:	2001      	movs	r0, #1
 80032d8:	e763      	b.n	80031a2 <HAL_I2C_Mem_Write+0x22>
 80032da:	bf00      	nop
 80032dc:	00100002 	.word	0x00100002
 80032e0:	ffff0000 	.word	0xffff0000

080032e4 <HAL_I2C_Mem_Read>:
{
 80032e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032e8:	b087      	sub	sp, #28
 80032ea:	4604      	mov	r4, r0
 80032ec:	460f      	mov	r7, r1
 80032ee:	4690      	mov	r8, r2
 80032f0:	4699      	mov	r9, r3
 80032f2:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80032f4:	f7ff f9a8 	bl	8002648 <HAL_GetTick>
 80032f8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032fa:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80032fe:	b2c0      	uxtb	r0, r0
 8003300:	2820      	cmp	r0, #32
 8003302:	d004      	beq.n	800330e <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8003304:	2702      	movs	r7, #2
}
 8003306:	4638      	mov	r0, r7
 8003308:	b007      	add	sp, #28
 800330a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800330e:	9500      	str	r5, [sp, #0]
 8003310:	2319      	movs	r3, #25
 8003312:	2201      	movs	r2, #1
 8003314:	498f      	ldr	r1, [pc, #572]	; (8003554 <HAL_I2C_Mem_Read+0x270>)
 8003316:	4620      	mov	r0, r4
 8003318:	f7ff fb3b 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 800331c:	2800      	cmp	r0, #0
 800331e:	f040 8151 	bne.w	80035c4 <HAL_I2C_Mem_Read+0x2e0>
    __HAL_LOCK(hi2c);
 8003322:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003326:	2b01      	cmp	r3, #1
 8003328:	f000 814e 	beq.w	80035c8 <HAL_I2C_Mem_Read+0x2e4>
 800332c:	2301      	movs	r3, #1
 800332e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	f012 0f01 	tst.w	r2, #1
 800333a:	d103      	bne.n	8003344 <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003344:	6822      	ldr	r2, [r4, #0]
 8003346:	6813      	ldr	r3, [r2, #0]
 8003348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800334c:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800334e:	2322      	movs	r3, #34	; 0x22
 8003350:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003354:	2340      	movs	r3, #64	; 0x40
 8003356:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800335a:	2300      	movs	r3, #0
 800335c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800335e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003360:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003362:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8003366:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003368:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800336a:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800336c:	4b7a      	ldr	r3, [pc, #488]	; (8003558 <HAL_I2C_Mem_Read+0x274>)
 800336e:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003370:	9501      	str	r5, [sp, #4]
 8003372:	9600      	str	r6, [sp, #0]
 8003374:	464b      	mov	r3, r9
 8003376:	4642      	mov	r2, r8
 8003378:	4639      	mov	r1, r7
 800337a:	4620      	mov	r0, r4
 800337c:	f7ff fc78 	bl	8002c70 <I2C_RequestMemoryRead>
 8003380:	4607      	mov	r7, r0
 8003382:	2800      	cmp	r0, #0
 8003384:	f040 8122 	bne.w	80035cc <HAL_I2C_Mem_Read+0x2e8>
    if (hi2c->XferSize == 0U)
 8003388:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800338a:	b95b      	cbnz	r3, 80033a4 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338c:	9302      	str	r3, [sp, #8]
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	9202      	str	r2, [sp, #8]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	9202      	str	r2, [sp, #8]
 8003398:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e0a5      	b.n	80034f0 <HAL_I2C_Mem_Read+0x20c>
    else if (hi2c->XferSize == 1U)
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d00f      	beq.n	80033c8 <HAL_I2C_Mem_Read+0xe4>
    else if (hi2c->XferSize == 2U)
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d021      	beq.n	80033f0 <HAL_I2C_Mem_Read+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ac:	6822      	ldr	r2, [r4, #0]
 80033ae:	6813      	ldr	r3, [r2, #0]
 80033b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033b4:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b6:	2300      	movs	r3, #0
 80033b8:	9305      	str	r3, [sp, #20]
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	9205      	str	r2, [sp, #20]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	9305      	str	r3, [sp, #20]
 80033c4:	9b05      	ldr	r3, [sp, #20]
 80033c6:	e093      	b.n	80034f0 <HAL_I2C_Mem_Read+0x20c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c8:	6822      	ldr	r2, [r4, #0]
 80033ca:	6813      	ldr	r3, [r2, #0]
 80033cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033d0:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033d2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d4:	2300      	movs	r3, #0
 80033d6:	9303      	str	r3, [sp, #12]
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	9203      	str	r2, [sp, #12]
 80033de:	699a      	ldr	r2, [r3, #24]
 80033e0:	9203      	str	r2, [sp, #12]
 80033e2:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033ec:	b662      	cpsie	i
}
 80033ee:	e07f      	b.n	80034f0 <HAL_I2C_Mem_Read+0x20c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033f0:	6822      	ldr	r2, [r4, #0]
 80033f2:	6813      	ldr	r3, [r2, #0]
 80033f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033f8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033fa:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fc:	2300      	movs	r3, #0
 80033fe:	9304      	str	r3, [sp, #16]
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	695a      	ldr	r2, [r3, #20]
 8003404:	9204      	str	r2, [sp, #16]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	9204      	str	r2, [sp, #16]
 800340a:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003412:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003414:	b662      	cpsie	i
}
 8003416:	e06b      	b.n	80034f0 <HAL_I2C_Mem_Read+0x20c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003418:	462a      	mov	r2, r5
 800341a:	4631      	mov	r1, r6
 800341c:	4620      	mov	r0, r4
 800341e:	f7ff fce9 	bl	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003422:	2800      	cmp	r0, #0
 8003424:	f040 80d4 	bne.w	80035d0 <HAL_I2C_Mem_Read+0x2ec>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800342e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003432:	3301      	adds	r3, #1
 8003434:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003436:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003438:	3b01      	subs	r3, #1
 800343a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800343c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29b      	uxth	r3, r3
 8003444:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003446:	e053      	b.n	80034f0 <HAL_I2C_Mem_Read+0x20c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003448:	9500      	str	r5, [sp, #0]
 800344a:	4633      	mov	r3, r6
 800344c:	2200      	movs	r2, #0
 800344e:	4943      	ldr	r1, [pc, #268]	; (800355c <HAL_I2C_Mem_Read+0x278>)
 8003450:	4620      	mov	r0, r4
 8003452:	f7ff fa9e 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 8003456:	2800      	cmp	r0, #0
 8003458:	f040 80bc 	bne.w	80035d4 <HAL_I2C_Mem_Read+0x2f0>
  __ASM volatile ("cpsid i" : : : "memory");
 800345c:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345e:	6822      	ldr	r2, [r4, #0]
 8003460:	6813      	ldr	r3, [r2, #0]
 8003462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003466:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800346e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003472:	3301      	adds	r3, #1
 8003474:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003476:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003478:	3b01      	subs	r3, #1
 800347a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800347c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29b      	uxth	r3, r3
 8003484:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003486:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800348e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003492:	3301      	adds	r3, #1
 8003494:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003496:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003498:	3b01      	subs	r3, #1
 800349a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800349c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80034a6:	e023      	b.n	80034f0 <HAL_I2C_Mem_Read+0x20c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a8:	6822      	ldr	r2, [r4, #0]
 80034aa:	6813      	ldr	r3, [r2, #0]
 80034ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034b0:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034b8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80034ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034bc:	3301      	adds	r3, #1
 80034be:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80034c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80034c2:	3b01      	subs	r3, #1
 80034c4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80034c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	8563      	strh	r3, [r4, #42]	; 0x2a
 80034d0:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034d8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80034da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034dc:	3301      	adds	r3, #1
 80034de:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80034e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80034e2:	3b01      	subs	r3, #1
 80034e4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80034e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d05d      	beq.n	80035b2 <HAL_I2C_Mem_Read+0x2ce>
      if (hi2c->XferSize <= 3U)
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d832      	bhi.n	8003560 <HAL_I2C_Mem_Read+0x27c>
        if (hi2c->XferSize == 1U)
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d08c      	beq.n	8003418 <HAL_I2C_Mem_Read+0x134>
        else if (hi2c->XferSize == 2U)
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d0a2      	beq.n	8003448 <HAL_I2C_Mem_Read+0x164>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003502:	9500      	str	r5, [sp, #0]
 8003504:	4633      	mov	r3, r6
 8003506:	2200      	movs	r2, #0
 8003508:	4914      	ldr	r1, [pc, #80]	; (800355c <HAL_I2C_Mem_Read+0x278>)
 800350a:	4620      	mov	r0, r4
 800350c:	f7ff fa41 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 8003510:	2800      	cmp	r0, #0
 8003512:	d161      	bne.n	80035d8 <HAL_I2C_Mem_Read+0x2f4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003514:	6822      	ldr	r2, [r4, #0]
 8003516:	6813      	ldr	r3, [r2, #0]
 8003518:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800351c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800351e:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003526:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800352a:	3301      	adds	r3, #1
 800352c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800352e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003530:	3b01      	subs	r3, #1
 8003532:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003534:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29b      	uxth	r3, r3
 800353c:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800353e:	9500      	str	r5, [sp, #0]
 8003540:	4633      	mov	r3, r6
 8003542:	2200      	movs	r2, #0
 8003544:	4905      	ldr	r1, [pc, #20]	; (800355c <HAL_I2C_Mem_Read+0x278>)
 8003546:	4620      	mov	r0, r4
 8003548:	f7ff fa23 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 800354c:	2800      	cmp	r0, #0
 800354e:	d0ab      	beq.n	80034a8 <HAL_I2C_Mem_Read+0x1c4>
            return HAL_ERROR;
 8003550:	2701      	movs	r7, #1
 8003552:	e6d8      	b.n	8003306 <HAL_I2C_Mem_Read+0x22>
 8003554:	00100002 	.word	0x00100002
 8003558:	ffff0000 	.word	0xffff0000
 800355c:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003560:	462a      	mov	r2, r5
 8003562:	4631      	mov	r1, r6
 8003564:	4620      	mov	r0, r4
 8003566:	f7ff fc45 	bl	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800356a:	2800      	cmp	r0, #0
 800356c:	d136      	bne.n	80035dc <HAL_I2C_Mem_Read+0x2f8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003574:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003576:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003578:	1c53      	adds	r3, r2, #1
 800357a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800357c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800357e:	3b01      	subs	r3, #1
 8003580:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003582:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29b      	uxth	r3, r3
 800358a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	6959      	ldr	r1, [r3, #20]
 8003590:	f011 0f04 	tst.w	r1, #4
 8003594:	d0ac      	beq.n	80034f0 <HAL_I2C_Mem_Read+0x20c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800359a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800359c:	3301      	adds	r3, #1
 800359e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80035a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80035a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	8563      	strh	r3, [r4, #42]	; 0x2a
 80035b0:	e79e      	b.n	80034f0 <HAL_I2C_Mem_Read+0x20c>
    hi2c->State = HAL_I2C_STATE_READY;
 80035b2:	2320      	movs	r3, #32
 80035b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80035be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80035c2:	e6a0      	b.n	8003306 <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 80035c4:	2702      	movs	r7, #2
 80035c6:	e69e      	b.n	8003306 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 80035c8:	2702      	movs	r7, #2
 80035ca:	e69c      	b.n	8003306 <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 80035cc:	2701      	movs	r7, #1
 80035ce:	e69a      	b.n	8003306 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80035d0:	2701      	movs	r7, #1
 80035d2:	e698      	b.n	8003306 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80035d4:	2701      	movs	r7, #1
 80035d6:	e696      	b.n	8003306 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80035d8:	2701      	movs	r7, #1
 80035da:	e694      	b.n	8003306 <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 80035dc:	2701      	movs	r7, #1
 80035de:	e692      	b.n	8003306 <HAL_I2C_Mem_Read+0x22>

080035e0 <HAL_I2C_IsDeviceReady>:
{
 80035e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	4605      	mov	r5, r0
 80035e8:	4689      	mov	r9, r1
 80035ea:	4692      	mov	sl, r2
 80035ec:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 80035ee:	f7ff f82b 	bl	8002648 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f2:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d003      	beq.n	8003604 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80035fc:	2002      	movs	r0, #2
}
 80035fe:	b004      	add	sp, #16
 8003600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003604:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003606:	9000      	str	r0, [sp, #0]
 8003608:	2319      	movs	r3, #25
 800360a:	2201      	movs	r2, #1
 800360c:	4954      	ldr	r1, [pc, #336]	; (8003760 <HAL_I2C_IsDeviceReady+0x180>)
 800360e:	4628      	mov	r0, r5
 8003610:	f7ff f9bf 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 8003614:	2800      	cmp	r0, #0
 8003616:	f040 8098 	bne.w	800374a <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 800361a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800361e:	2b01      	cmp	r3, #1
 8003620:	f000 8095 	beq.w	800374e <HAL_I2C_IsDeviceReady+0x16e>
 8003624:	2301      	movs	r3, #1
 8003626:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800362a:	682b      	ldr	r3, [r5, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	f012 0f01 	tst.w	r2, #1
 8003632:	d103      	bne.n	800363c <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800363c:	682a      	ldr	r2, [r5, #0]
 800363e:	6813      	ldr	r3, [r2, #0]
 8003640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003644:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003646:	2324      	movs	r3, #36	; 0x24
 8003648:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800364c:	2300      	movs	r3, #0
 800364e:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003650:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003654:	62eb      	str	r3, [r5, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8003656:	f04f 0801 	mov.w	r8, #1
 800365a:	e035      	b.n	80036c8 <HAL_I2C_IsDeviceReady+0xe8>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800365c:	23a0      	movs	r3, #160	; 0xa0
 800365e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003662:	682a      	ldr	r2, [r5, #0]
 8003664:	6953      	ldr	r3, [r2, #20]
 8003666:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800366a:	6952      	ldr	r2, [r2, #20]
 800366c:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003670:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
 8003674:	b2e4      	uxtb	r4, r4
 8003676:	2ca0      	cmp	r4, #160	; 0xa0
 8003678:	d009      	beq.n	800368e <HAL_I2C_IsDeviceReady+0xae>
 800367a:	b943      	cbnz	r3, 800368e <HAL_I2C_IsDeviceReady+0xae>
 800367c:	b93a      	cbnz	r2, 800368e <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800367e:	f7fe ffe3 	bl	8002648 <HAL_GetTick>
 8003682:	1bc0      	subs	r0, r0, r7
 8003684:	42b0      	cmp	r0, r6
 8003686:	d8e9      	bhi.n	800365c <HAL_I2C_IsDeviceReady+0x7c>
 8003688:	2e00      	cmp	r6, #0
 800368a:	d1ea      	bne.n	8003662 <HAL_I2C_IsDeviceReady+0x82>
 800368c:	e7e6      	b.n	800365c <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 800368e:	2320      	movs	r3, #32
 8003690:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003694:	682b      	ldr	r3, [r5, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	f012 0f02 	tst.w	r2, #2
 800369c:	d132      	bne.n	8003704 <HAL_I2C_IsDeviceReady+0x124>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a6:	682b      	ldr	r3, [r5, #0]
 80036a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ac:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ae:	9700      	str	r7, [sp, #0]
 80036b0:	2319      	movs	r3, #25
 80036b2:	2201      	movs	r2, #1
 80036b4:	492a      	ldr	r1, [pc, #168]	; (8003760 <HAL_I2C_IsDeviceReady+0x180>)
 80036b6:	4628      	mov	r0, r5
 80036b8:	f7ff f96b 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 80036bc:	2800      	cmp	r0, #0
 80036be:	d14c      	bne.n	800375a <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 80036c0:	f108 0801 	add.w	r8, r8, #1
    while (I2C_Trials < Trials);
 80036c4:	45d0      	cmp	r8, sl
 80036c6:	d238      	bcs.n	800373a <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036c8:	682a      	ldr	r2, [r5, #0]
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d0:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80036d2:	9700      	str	r7, [sp, #0]
 80036d4:	4633      	mov	r3, r6
 80036d6:	2200      	movs	r2, #0
 80036d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036dc:	4628      	mov	r0, r5
 80036de:	f7ff f958 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 80036e2:	2800      	cmp	r0, #0
 80036e4:	d135      	bne.n	8003752 <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036e6:	682b      	ldr	r3, [r5, #0]
 80036e8:	f009 02fe 	and.w	r2, r9, #254	; 0xfe
 80036ec:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80036ee:	f7fe ffab 	bl	8002648 <HAL_GetTick>
 80036f2:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036f4:	682a      	ldr	r2, [r5, #0]
 80036f6:	6953      	ldr	r3, [r2, #20]
 80036f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036fc:	6952      	ldr	r2, [r2, #20]
 80036fe:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003702:	e7b5      	b.n	8003670 <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800370a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370c:	2300      	movs	r3, #0
 800370e:	9303      	str	r3, [sp, #12]
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	9203      	str	r2, [sp, #12]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	9303      	str	r3, [sp, #12]
 800371a:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800371c:	9700      	str	r7, [sp, #0]
 800371e:	2319      	movs	r3, #25
 8003720:	2201      	movs	r2, #1
 8003722:	490f      	ldr	r1, [pc, #60]	; (8003760 <HAL_I2C_IsDeviceReady+0x180>)
 8003724:	4628      	mov	r0, r5
 8003726:	f7ff f934 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 800372a:	b9a0      	cbnz	r0, 8003756 <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 800372c:	2320      	movs	r3, #32
 800372e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8003732:	2300      	movs	r3, #0
 8003734:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_OK;
 8003738:	e761      	b.n	80035fe <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 800373a:	2320      	movs	r3, #32
 800373c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003740:	2300      	movs	r3, #0
 8003742:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    return HAL_ERROR;
 8003746:	2001      	movs	r0, #1
 8003748:	e759      	b.n	80035fe <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 800374a:	2002      	movs	r0, #2
 800374c:	e757      	b.n	80035fe <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 800374e:	2002      	movs	r0, #2
 8003750:	e755      	b.n	80035fe <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 8003752:	2001      	movs	r0, #1
 8003754:	e753      	b.n	80035fe <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003756:	2001      	movs	r0, #1
 8003758:	e751      	b.n	80035fe <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800375a:	2001      	movs	r0, #1
 800375c:	e74f      	b.n	80035fe <HAL_I2C_IsDeviceReady+0x1e>
 800375e:	bf00      	nop
 8003760:	00100002 	.word	0x00100002

08003764 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003764:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <RCC_Delay+0x24>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a08      	ldr	r2, [pc, #32]	; (800378c <RCC_Delay+0x28>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	0a5b      	lsrs	r3, r3, #9
 8003772:	fb00 f303 	mul.w	r3, r0, r3
 8003776:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003778:	bf00      	nop
  }
  while (Delay --);
 800377a:	9b01      	ldr	r3, [sp, #4]
 800377c:	1e5a      	subs	r2, r3, #1
 800377e:	9201      	str	r2, [sp, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f9      	bne.n	8003778 <RCC_Delay+0x14>
}
 8003784:	b002      	add	sp, #8
 8003786:	4770      	bx	lr
 8003788:	20000018 	.word	0x20000018
 800378c:	10624dd3 	.word	0x10624dd3

08003790 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003790:	2800      	cmp	r0, #0
 8003792:	f000 81f1 	beq.w	8003b78 <HAL_RCC_OscConfig+0x3e8>
{
 8003796:	b570      	push	{r4, r5, r6, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379c:	6803      	ldr	r3, [r0, #0]
 800379e:	f013 0f01 	tst.w	r3, #1
 80037a2:	d02c      	beq.n	80037fe <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037a4:	4baa      	ldr	r3, [pc, #680]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d01d      	beq.n	80037ec <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037b0:	4ba7      	ldr	r3, [pc, #668]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d012      	beq.n	80037e2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037bc:	6863      	ldr	r3, [r4, #4]
 80037be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c2:	d041      	beq.n	8003848 <HAL_RCC_OscConfig+0xb8>
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d155      	bne.n	8003874 <HAL_RCC_OscConfig+0xe4>
 80037c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037cc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e037      	b.n	8003852 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037e2:	4b9b      	ldr	r3, [pc, #620]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80037ea:	d0e7      	beq.n	80037bc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	4b98      	ldr	r3, [pc, #608]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037f4:	d003      	beq.n	80037fe <HAL_RCC_OscConfig+0x6e>
 80037f6:	6863      	ldr	r3, [r4, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 81bf 	beq.w	8003b7c <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	f013 0f02 	tst.w	r3, #2
 8003804:	d075      	beq.n	80038f2 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003806:	4b92      	ldr	r3, [pc, #584]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f013 0f0c 	tst.w	r3, #12
 800380e:	d05f      	beq.n	80038d0 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003810:	4b8f      	ldr	r3, [pc, #572]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d054      	beq.n	80038c6 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800381c:	6923      	ldr	r3, [r4, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8089 	beq.w	8003936 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 8003824:	4b8b      	ldr	r3, [pc, #556]	; (8003a54 <HAL_RCC_OscConfig+0x2c4>)
 8003826:	2201      	movs	r2, #1
 8003828:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800382a:	f7fe ff0d 	bl	8002648 <HAL_GetTick>
 800382e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003830:	4b87      	ldr	r3, [pc, #540]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f013 0f02 	tst.w	r3, #2
 8003838:	d174      	bne.n	8003924 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383a:	f7fe ff05 	bl	8002648 <HAL_GetTick>
 800383e:	1b40      	subs	r0, r0, r5
 8003840:	2802      	cmp	r0, #2
 8003842:	d9f5      	bls.n	8003830 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8003844:	2003      	movs	r0, #3
 8003846:	e19e      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003848:	4a81      	ldr	r2, [pc, #516]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 800384a:	6813      	ldr	r3, [r2, #0]
 800384c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003850:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003852:	6863      	ldr	r3, [r4, #4]
 8003854:	b343      	cbz	r3, 80038a8 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8003856:	f7fe fef7 	bl	8002648 <HAL_GetTick>
 800385a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385c:	4b7c      	ldr	r3, [pc, #496]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003864:	d1cb      	bne.n	80037fe <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003866:	f7fe feef 	bl	8002648 <HAL_GetTick>
 800386a:	1b40      	subs	r0, r0, r5
 800386c:	2864      	cmp	r0, #100	; 0x64
 800386e:	d9f5      	bls.n	800385c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8003870:	2003      	movs	r0, #3
 8003872:	e188      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003878:	d009      	beq.n	800388e <HAL_RCC_OscConfig+0xfe>
 800387a:	4b75      	ldr	r3, [pc, #468]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e7e1      	b.n	8003852 <HAL_RCC_OscConfig+0xc2>
 800388e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003892:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e7d4      	b.n	8003852 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80038a8:	f7fe fece 	bl	8002648 <HAL_GetTick>
 80038ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ae:	4b68      	ldr	r3, [pc, #416]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80038b6:	d0a2      	beq.n	80037fe <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b8:	f7fe fec6 	bl	8002648 <HAL_GetTick>
 80038bc:	1b40      	subs	r0, r0, r5
 80038be:	2864      	cmp	r0, #100	; 0x64
 80038c0:	d9f5      	bls.n	80038ae <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80038c2:	2003      	movs	r0, #3
 80038c4:	e15f      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038c6:	4b62      	ldr	r3, [pc, #392]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80038ce:	d1a5      	bne.n	800381c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d0:	4b5f      	ldr	r3, [pc, #380]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f013 0f02 	tst.w	r3, #2
 80038d8:	d003      	beq.n	80038e2 <HAL_RCC_OscConfig+0x152>
 80038da:	6923      	ldr	r3, [r4, #16]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	f040 814f 	bne.w	8003b80 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e2:	4a5b      	ldr	r2, [pc, #364]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 80038e4:	6813      	ldr	r3, [r2, #0]
 80038e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038ea:	6961      	ldr	r1, [r4, #20]
 80038ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80038f0:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	f013 0f08 	tst.w	r3, #8
 80038f8:	d032      	beq.n	8003960 <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038fa:	69a3      	ldr	r3, [r4, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d045      	beq.n	800398c <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8003900:	4b55      	ldr	r3, [pc, #340]	; (8003a58 <HAL_RCC_OscConfig+0x2c8>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003906:	f7fe fe9f 	bl	8002648 <HAL_GetTick>
 800390a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390c:	4b50      	ldr	r3, [pc, #320]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	f013 0f02 	tst.w	r3, #2
 8003914:	d121      	bne.n	800395a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003916:	f7fe fe97 	bl	8002648 <HAL_GetTick>
 800391a:	1b40      	subs	r0, r0, r5
 800391c:	2802      	cmp	r0, #2
 800391e:	d9f5      	bls.n	800390c <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 8003920:	2003      	movs	r0, #3
 8003922:	e130      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003924:	4a4a      	ldr	r2, [pc, #296]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 8003926:	6813      	ldr	r3, [r2, #0]
 8003928:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800392c:	6961      	ldr	r1, [r4, #20]
 800392e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	e7dd      	b.n	80038f2 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003936:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCC_OscConfig+0x2c4>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800393c:	f7fe fe84 	bl	8002648 <HAL_GetTick>
 8003940:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003942:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f013 0f02 	tst.w	r3, #2
 800394a:	d0d2      	beq.n	80038f2 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394c:	f7fe fe7c 	bl	8002648 <HAL_GetTick>
 8003950:	1b40      	subs	r0, r0, r5
 8003952:	2802      	cmp	r0, #2
 8003954:	d9f5      	bls.n	8003942 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8003956:	2003      	movs	r0, #3
 8003958:	e115      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 800395a:	2001      	movs	r0, #1
 800395c:	f7ff ff02 	bl	8003764 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	f013 0f04 	tst.w	r3, #4
 8003966:	f000 8097 	beq.w	8003a98 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396a:	4b39      	ldr	r3, [pc, #228]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003972:	d11d      	bne.n	80039b0 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003974:	4b36      	ldr	r3, [pc, #216]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 8003976:	69da      	ldr	r2, [r3, #28]
 8003978:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800397c:	61da      	str	r2, [r3, #28]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003988:	2501      	movs	r5, #1
 800398a:	e012      	b.n	80039b2 <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 800398c:	4b32      	ldr	r3, [pc, #200]	; (8003a58 <HAL_RCC_OscConfig+0x2c8>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003992:	f7fe fe59 	bl	8002648 <HAL_GetTick>
 8003996:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003998:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	f013 0f02 	tst.w	r3, #2
 80039a0:	d0de      	beq.n	8003960 <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a2:	f7fe fe51 	bl	8002648 <HAL_GetTick>
 80039a6:	1b40      	subs	r0, r0, r5
 80039a8:	2802      	cmp	r0, #2
 80039aa:	d9f5      	bls.n	8003998 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 80039ac:	2003      	movs	r0, #3
 80039ae:	e0ea      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80039b0:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b2:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <HAL_RCC_OscConfig+0x2cc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039ba:	d011      	beq.n	80039e0 <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039bc:	68e3      	ldr	r3, [r4, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d022      	beq.n	8003a08 <HAL_RCC_OscConfig+0x278>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d138      	bne.n	8003a38 <HAL_RCC_OscConfig+0x2a8>
 80039c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039ca:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80039ce:	6a1a      	ldr	r2, [r3, #32]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	621a      	str	r2, [r3, #32]
 80039d6:	6a1a      	ldr	r2, [r3, #32]
 80039d8:	f022 0204 	bic.w	r2, r2, #4
 80039dc:	621a      	str	r2, [r3, #32]
 80039de:	e018      	b.n	8003a12 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e0:	4a1e      	ldr	r2, [pc, #120]	; (8003a5c <HAL_RCC_OscConfig+0x2cc>)
 80039e2:	6813      	ldr	r3, [r2, #0]
 80039e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80039ea:	f7fe fe2d 	bl	8002648 <HAL_GetTick>
 80039ee:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <HAL_RCC_OscConfig+0x2cc>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039f8:	d1e0      	bne.n	80039bc <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fa:	f7fe fe25 	bl	8002648 <HAL_GetTick>
 80039fe:	1b80      	subs	r0, r0, r6
 8003a00:	2864      	cmp	r0, #100	; 0x64
 8003a02:	d9f5      	bls.n	80039f0 <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 8003a04:	2003      	movs	r0, #3
 8003a06:	e0be      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a08:	4a11      	ldr	r2, [pc, #68]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 8003a0a:	6a13      	ldr	r3, [r2, #32]
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a12:	68e3      	ldr	r3, [r4, #12]
 8003a14:	b373      	cbz	r3, 8003a74 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8003a16:	f7fe fe17 	bl	8002648 <HAL_GetTick>
 8003a1a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	f013 0f02 	tst.w	r3, #2
 8003a24:	d137      	bne.n	8003a96 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a26:	f7fe fe0f 	bl	8002648 <HAL_GetTick>
 8003a2a:	1b80      	subs	r0, r0, r6
 8003a2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a30:	4298      	cmp	r0, r3
 8003a32:	d9f3      	bls.n	8003a1c <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 8003a34:	2003      	movs	r0, #3
 8003a36:	e0a6      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a38:	2b05      	cmp	r3, #5
 8003a3a:	d011      	beq.n	8003a60 <HAL_RCC_OscConfig+0x2d0>
 8003a3c:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <HAL_RCC_OscConfig+0x2c0>)
 8003a3e:	6a1a      	ldr	r2, [r3, #32]
 8003a40:	f022 0201 	bic.w	r2, r2, #1
 8003a44:	621a      	str	r2, [r3, #32]
 8003a46:	6a1a      	ldr	r2, [r3, #32]
 8003a48:	f022 0204 	bic.w	r2, r2, #4
 8003a4c:	621a      	str	r2, [r3, #32]
 8003a4e:	e7e0      	b.n	8003a12 <HAL_RCC_OscConfig+0x282>
 8003a50:	40021000 	.word	0x40021000
 8003a54:	42420000 	.word	0x42420000
 8003a58:	42420480 	.word	0x42420480
 8003a5c:	40007000 	.word	0x40007000
 8003a60:	4b4d      	ldr	r3, [pc, #308]	; (8003b98 <HAL_RCC_OscConfig+0x408>)
 8003a62:	6a1a      	ldr	r2, [r3, #32]
 8003a64:	f042 0204 	orr.w	r2, r2, #4
 8003a68:	621a      	str	r2, [r3, #32]
 8003a6a:	6a1a      	ldr	r2, [r3, #32]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	621a      	str	r2, [r3, #32]
 8003a72:	e7ce      	b.n	8003a12 <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 8003a74:	f7fe fde8 	bl	8002648 <HAL_GetTick>
 8003a78:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7a:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <HAL_RCC_OscConfig+0x408>)
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f013 0f02 	tst.w	r3, #2
 8003a82:	d008      	beq.n	8003a96 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a84:	f7fe fde0 	bl	8002648 <HAL_GetTick>
 8003a88:	1b80      	subs	r0, r0, r6
 8003a8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a8e:	4298      	cmp	r0, r3
 8003a90:	d9f3      	bls.n	8003a7a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8003a92:	2003      	movs	r0, #3
 8003a94:	e077      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8003a96:	b9e5      	cbnz	r5, 8003ad2 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a98:	69e3      	ldr	r3, [r4, #28]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d072      	beq.n	8003b84 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a9e:	4a3e      	ldr	r2, [pc, #248]	; (8003b98 <HAL_RCC_OscConfig+0x408>)
 8003aa0:	6852      	ldr	r2, [r2, #4]
 8003aa2:	f002 020c 	and.w	r2, r2, #12
 8003aa6:	2a08      	cmp	r2, #8
 8003aa8:	d056      	beq.n	8003b58 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d017      	beq.n	8003ade <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8003aae:	4b3b      	ldr	r3, [pc, #236]	; (8003b9c <HAL_RCC_OscConfig+0x40c>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ab4:	f7fe fdc8 	bl	8002648 <HAL_GetTick>
 8003ab8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aba:	4b37      	ldr	r3, [pc, #220]	; (8003b98 <HAL_RCC_OscConfig+0x408>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003ac2:	d047      	beq.n	8003b54 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fe fdc0 	bl	8002648 <HAL_GetTick>
 8003ac8:	1b00      	subs	r0, r0, r4
 8003aca:	2802      	cmp	r0, #2
 8003acc:	d9f5      	bls.n	8003aba <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8003ace:	2003      	movs	r0, #3
 8003ad0:	e059      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad2:	4a31      	ldr	r2, [pc, #196]	; (8003b98 <HAL_RCC_OscConfig+0x408>)
 8003ad4:	69d3      	ldr	r3, [r2, #28]
 8003ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ada:	61d3      	str	r3, [r2, #28]
 8003adc:	e7dc      	b.n	8003a98 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8003ade:	4b2f      	ldr	r3, [pc, #188]	; (8003b9c <HAL_RCC_OscConfig+0x40c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ae4:	f7fe fdb0 	bl	8002648 <HAL_GetTick>
 8003ae8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aea:	4b2b      	ldr	r3, [pc, #172]	; (8003b98 <HAL_RCC_OscConfig+0x408>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003af2:	d006      	beq.n	8003b02 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fe fda8 	bl	8002648 <HAL_GetTick>
 8003af8:	1b40      	subs	r0, r0, r5
 8003afa:	2802      	cmp	r0, #2
 8003afc:	d9f5      	bls.n	8003aea <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003afe:	2003      	movs	r0, #3
 8003b00:	e041      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b02:	6a23      	ldr	r3, [r4, #32]
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b08:	d01a      	beq.n	8003b40 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b0a:	4923      	ldr	r1, [pc, #140]	; (8003b98 <HAL_RCC_OscConfig+0x408>)
 8003b0c:	684b      	ldr	r3, [r1, #4]
 8003b0e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003b12:	6a22      	ldr	r2, [r4, #32]
 8003b14:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003b16:	4302      	orrs	r2, r0
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b1c:	4b1f      	ldr	r3, [pc, #124]	; (8003b9c <HAL_RCC_OscConfig+0x40c>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003b22:	f7fe fd91 	bl	8002648 <HAL_GetTick>
 8003b26:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b28:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <HAL_RCC_OscConfig+0x408>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b30:	d10e      	bne.n	8003b50 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b32:	f7fe fd89 	bl	8002648 <HAL_GetTick>
 8003b36:	1b00      	subs	r0, r0, r4
 8003b38:	2802      	cmp	r0, #2
 8003b3a:	d9f5      	bls.n	8003b28 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8003b3c:	2003      	movs	r0, #3
 8003b3e:	e022      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b40:	4a15      	ldr	r2, [pc, #84]	; (8003b98 <HAL_RCC_OscConfig+0x408>)
 8003b42:	6853      	ldr	r3, [r2, #4]
 8003b44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b48:	68a1      	ldr	r1, [r4, #8]
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	6053      	str	r3, [r2, #4]
 8003b4e:	e7dc      	b.n	8003b0a <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8003b50:	2000      	movs	r0, #0
 8003b52:	e018      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
 8003b54:	2000      	movs	r0, #0
 8003b56:	e016      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d016      	beq.n	8003b8a <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <HAL_RCC_OscConfig+0x408>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b60:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003b64:	6a22      	ldr	r2, [r4, #32]
 8003b66:	4291      	cmp	r1, r2
 8003b68:	d111      	bne.n	8003b8e <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b6a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d10e      	bne.n	8003b92 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8003b74:	2000      	movs	r0, #0
 8003b76:	e006      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8003b78:	2001      	movs	r0, #1
}
 8003b7a:	4770      	bx	lr
        return HAL_ERROR;
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	e002      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8003b80:	2001      	movs	r0, #1
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8003b84:	2000      	movs	r0, #0
}
 8003b86:	b002      	add	sp, #8
 8003b88:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003b8a:	2001      	movs	r0, #1
 8003b8c:	e7fb      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8003b8e:	2001      	movs	r0, #1
 8003b90:	e7f9      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
 8003b92:	2001      	movs	r0, #1
 8003b94:	e7f7      	b.n	8003b86 <HAL_RCC_OscConfig+0x3f6>
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	42420060 	.word	0x42420060

08003ba0 <HAL_RCC_GetSysClockFreq>:
{
 8003ba0:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ba2:	4b16      	ldr	r3, [pc, #88]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x5c>)
 8003ba4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ba6:	f10d 0c18 	add.w	ip, sp, #24
 8003baa:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bae:	f240 2301 	movw	r3, #513	; 0x201
 8003bb2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8003bb6:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x60>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003bba:	f003 020c 	and.w	r2, r3, #12
 8003bbe:	2a08      	cmp	r2, #8
 8003bc0:	d002      	beq.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8003bc2:	4810      	ldr	r0, [pc, #64]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003bc4:	b006      	add	sp, #24
 8003bc6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bc8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003bcc:	4462      	add	r2, ip
 8003bce:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bd2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003bd6:	d00c      	beq.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x60>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003be0:	4463      	add	r3, ip
 8003be2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003be6:	4807      	ldr	r0, [pc, #28]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x64>)
 8003be8:	fb00 f002 	mul.w	r0, r0, r2
 8003bec:	fbb0 f0f3 	udiv	r0, r0, r3
 8003bf0:	e7e8      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bf2:	4805      	ldr	r0, [pc, #20]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x68>)
 8003bf4:	fb00 f002 	mul.w	r0, r0, r2
 8003bf8:	e7e4      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x24>
 8003bfa:	bf00      	nop
 8003bfc:	0800c300 	.word	0x0800c300
 8003c00:	40021000 	.word	0x40021000
 8003c04:	007a1200 	.word	0x007a1200
 8003c08:	003d0900 	.word	0x003d0900

08003c0c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	f000 80a0 	beq.w	8003d52 <HAL_RCC_ClockConfig+0x146>
{
 8003c12:	b570      	push	{r4, r5, r6, lr}
 8003c14:	460d      	mov	r5, r1
 8003c16:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c18:	4b52      	ldr	r3, [pc, #328]	; (8003d64 <HAL_RCC_ClockConfig+0x158>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	428b      	cmp	r3, r1
 8003c22:	d20b      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c24:	4a4f      	ldr	r2, [pc, #316]	; (8003d64 <HAL_RCC_ClockConfig+0x158>)
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	f023 0307 	bic.w	r3, r3, #7
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c30:	6813      	ldr	r3, [r2, #0]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	428b      	cmp	r3, r1
 8003c38:	f040 808d 	bne.w	8003d56 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	f013 0f02 	tst.w	r3, #2
 8003c42:	d017      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c44:	f013 0f04 	tst.w	r3, #4
 8003c48:	d004      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c4a:	4a47      	ldr	r2, [pc, #284]	; (8003d68 <HAL_RCC_ClockConfig+0x15c>)
 8003c4c:	6853      	ldr	r3, [r2, #4]
 8003c4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c52:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	f013 0f08 	tst.w	r3, #8
 8003c5a:	d004      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c5c:	4a42      	ldr	r2, [pc, #264]	; (8003d68 <HAL_RCC_ClockConfig+0x15c>)
 8003c5e:	6853      	ldr	r3, [r2, #4]
 8003c60:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c64:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c66:	4a40      	ldr	r2, [pc, #256]	; (8003d68 <HAL_RCC_ClockConfig+0x15c>)
 8003c68:	6853      	ldr	r3, [r2, #4]
 8003c6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c6e:	68a1      	ldr	r1, [r4, #8]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	f013 0f01 	tst.w	r3, #1
 8003c7a:	d031      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c7c:	6863      	ldr	r3, [r4, #4]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d020      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d025      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c86:	4a38      	ldr	r2, [pc, #224]	; (8003d68 <HAL_RCC_ClockConfig+0x15c>)
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	f012 0f02 	tst.w	r2, #2
 8003c8e:	d064      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c90:	4935      	ldr	r1, [pc, #212]	; (8003d68 <HAL_RCC_ClockConfig+0x15c>)
 8003c92:	684a      	ldr	r2, [r1, #4]
 8003c94:	f022 0203 	bic.w	r2, r2, #3
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003c9c:	f7fe fcd4 	bl	8002648 <HAL_GetTick>
 8003ca0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <HAL_RCC_ClockConfig+0x15c>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	6862      	ldr	r2, [r4, #4]
 8003cac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003cb0:	d016      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb2:	f7fe fcc9 	bl	8002648 <HAL_GetTick>
 8003cb6:	1b80      	subs	r0, r0, r6
 8003cb8:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cbc:	4298      	cmp	r0, r3
 8003cbe:	d9f0      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8003cc0:	2003      	movs	r0, #3
 8003cc2:	e045      	b.n	8003d50 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc4:	4a28      	ldr	r2, [pc, #160]	; (8003d68 <HAL_RCC_ClockConfig+0x15c>)
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003ccc:	d1e0      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003cce:	2001      	movs	r0, #1
 8003cd0:	e03e      	b.n	8003d50 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd2:	4a25      	ldr	r2, [pc, #148]	; (8003d68 <HAL_RCC_ClockConfig+0x15c>)
 8003cd4:	6812      	ldr	r2, [r2, #0]
 8003cd6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003cda:	d1d9      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003cdc:	2001      	movs	r0, #1
 8003cde:	e037      	b.n	8003d50 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce0:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <HAL_RCC_ClockConfig+0x158>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	42ab      	cmp	r3, r5
 8003cea:	d90a      	bls.n	8003d02 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <HAL_RCC_ClockConfig+0x158>)
 8003cee:	6813      	ldr	r3, [r2, #0]
 8003cf0:	f023 0307 	bic.w	r3, r3, #7
 8003cf4:	432b      	orrs	r3, r5
 8003cf6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf8:	6813      	ldr	r3, [r2, #0]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	42ab      	cmp	r3, r5
 8003d00:	d12d      	bne.n	8003d5e <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	f013 0f04 	tst.w	r3, #4
 8003d08:	d006      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d0a:	4a17      	ldr	r2, [pc, #92]	; (8003d68 <HAL_RCC_ClockConfig+0x15c>)
 8003d0c:	6853      	ldr	r3, [r2, #4]
 8003d0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d12:	68e1      	ldr	r1, [r4, #12]
 8003d14:	430b      	orrs	r3, r1
 8003d16:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	f013 0f08 	tst.w	r3, #8
 8003d1e:	d007      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d20:	4a11      	ldr	r2, [pc, #68]	; (8003d68 <HAL_RCC_ClockConfig+0x15c>)
 8003d22:	6853      	ldr	r3, [r2, #4]
 8003d24:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003d28:	6921      	ldr	r1, [r4, #16]
 8003d2a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d2e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d30:	f7ff ff36 	bl	8003ba0 <HAL_RCC_GetSysClockFreq>
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <HAL_RCC_ClockConfig+0x15c>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d3c:	4a0b      	ldr	r2, [pc, #44]	; (8003d6c <HAL_RCC_ClockConfig+0x160>)
 8003d3e:	5cd3      	ldrb	r3, [r2, r3]
 8003d40:	40d8      	lsrs	r0, r3
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_ClockConfig+0x164>)
 8003d44:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003d46:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_RCC_ClockConfig+0x168>)
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	f7fe fc3b 	bl	80025c4 <HAL_InitTick>
  return HAL_OK;
 8003d4e:	2000      	movs	r0, #0
}
 8003d50:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003d52:	2001      	movs	r0, #1
}
 8003d54:	4770      	bx	lr
    return HAL_ERROR;
 8003d56:	2001      	movs	r0, #1
 8003d58:	e7fa      	b.n	8003d50 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	e7f8      	b.n	8003d50 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8003d5e:	2001      	movs	r0, #1
 8003d60:	e7f6      	b.n	8003d50 <HAL_RCC_ClockConfig+0x144>
 8003d62:	bf00      	nop
 8003d64:	40022000 	.word	0x40022000
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	0800c0b4 	.word	0x0800c0b4
 8003d70:	20000018 	.word	0x20000018
 8003d74:	20000020 	.word	0x20000020

08003d78 <HAL_RCC_GetHCLKFreq>:
}
 8003d78:	4b01      	ldr	r3, [pc, #4]	; (8003d80 <HAL_RCC_GetHCLKFreq+0x8>)
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000018 	.word	0x20000018

08003d84 <HAL_RCC_GetPCLK1Freq>:
{
 8003d84:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d86:	f7ff fff7 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003d8a:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003d92:	4a03      	ldr	r2, [pc, #12]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003d94:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d96:	40d8      	lsrs	r0, r3
 8003d98:	bd08      	pop	{r3, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	0800c0c4 	.word	0x0800c0c4

08003da4 <HAL_RCC_GetPCLK2Freq>:
{
 8003da4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003da6:	f7ff ffe7 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003daa:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <HAL_RCC_GetPCLK2Freq+0x18>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003db2:	4a03      	ldr	r2, [pc, #12]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003db4:	5cd3      	ldrb	r3, [r2, r3]
}
 8003db6:	40d8      	lsrs	r0, r3
 8003db8:	bd08      	pop	{r3, pc}
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	0800c0c4 	.word	0x0800c0c4

08003dc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc4:	b538      	push	{r3, r4, r5, lr}
 8003dc6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dc8:	6802      	ldr	r2, [r0, #0]
 8003dca:	6913      	ldr	r3, [r2, #16]
 8003dcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dd0:	68c1      	ldr	r1, [r0, #12]
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dd6:	6883      	ldr	r3, [r0, #8]
 8003dd8:	6902      	ldr	r2, [r0, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	6942      	ldr	r2, [r0, #20]
 8003dde:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003de0:	6801      	ldr	r1, [r0, #0]
 8003de2:	68cb      	ldr	r3, [r1, #12]
 8003de4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003de8:	f023 030c 	bic.w	r3, r3, #12
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003df0:	6802      	ldr	r2, [r0, #0]
 8003df2:	6953      	ldr	r3, [r2, #20]
 8003df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df8:	6981      	ldr	r1, [r0, #24]
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003dfe:	6802      	ldr	r2, [r0, #0]
 8003e00:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <UART_SetConfig+0xc4>)
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d01f      	beq.n	8003e46 <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e06:	f7ff ffbd 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e12:	6863      	ldr	r3, [r4, #4]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e1a:	4d1c      	ldr	r5, [pc, #112]	; (8003e8c <UART_SetConfig+0xc8>)
 8003e1c:	fba5 3200 	umull	r3, r2, r5, r0
 8003e20:	0951      	lsrs	r1, r2, #5
 8003e22:	2364      	movs	r3, #100	; 0x64
 8003e24:	fb03 0311 	mls	r3, r3, r1, r0
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	3332      	adds	r3, #50	; 0x32
 8003e2c:	fba5 2303 	umull	r2, r3, r5, r3
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e36:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	6821      	ldr	r1, [r4, #0]
 8003e40:	4413      	add	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8003e44:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e46:	f7ff ffad 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e52:	6863      	ldr	r3, [r4, #4]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e5a:	4d0c      	ldr	r5, [pc, #48]	; (8003e8c <UART_SetConfig+0xc8>)
 8003e5c:	fba5 3200 	umull	r3, r2, r5, r0
 8003e60:	0951      	lsrs	r1, r2, #5
 8003e62:	2364      	movs	r3, #100	; 0x64
 8003e64:	fb03 0311 	mls	r3, r3, r1, r0
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	3332      	adds	r3, #50	; 0x32
 8003e6c:	fba5 2303 	umull	r2, r3, r5, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e76:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	6821      	ldr	r1, [r4, #0]
 8003e80:	4413      	add	r3, r2
 8003e82:	608b      	str	r3, [r1, #8]
 8003e84:	e7de      	b.n	8003e44 <UART_SetConfig+0x80>
 8003e86:	bf00      	nop
 8003e88:	40013800 	.word	0x40013800
 8003e8c:	51eb851f 	.word	0x51eb851f

08003e90 <UART_WaitOnFlagUntilTimeout>:
{
 8003e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e94:	4605      	mov	r5, r0
 8003e96:	460f      	mov	r7, r1
 8003e98:	4616      	mov	r6, r2
 8003e9a:	4699      	mov	r9, r3
 8003e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea0:	682c      	ldr	r4, [r5, #0]
 8003ea2:	6824      	ldr	r4, [r4, #0]
 8003ea4:	ea37 0304 	bics.w	r3, r7, r4
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2401      	moveq	r4, #1
 8003eac:	2400      	movne	r4, #0
 8003eae:	42b4      	cmp	r4, r6
 8003eb0:	d11f      	bne.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8003eb2:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003eb6:	d0f3      	beq.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003eb8:	f1b8 0f00 	cmp.w	r8, #0
 8003ebc:	d005      	beq.n	8003eca <UART_WaitOnFlagUntilTimeout+0x3a>
 8003ebe:	f7fe fbc3 	bl	8002648 <HAL_GetTick>
 8003ec2:	eba0 0009 	sub.w	r0, r0, r9
 8003ec6:	4540      	cmp	r0, r8
 8003ec8:	d9ea      	bls.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eca:	682a      	ldr	r2, [r5, #0]
 8003ecc:	68d3      	ldr	r3, [r2, #12]
 8003ece:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ed2:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed4:	682a      	ldr	r2, [r5, #0]
 8003ed6:	6953      	ldr	r3, [r2, #20]
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003ede:	2320      	movs	r3, #32
 8003ee0:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003ee4:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8003eee:	2003      	movs	r0, #3
 8003ef0:	e000      	b.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 8003ef2:	2000      	movs	r0, #0
}
 8003ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003ef8 <HAL_UART_Init>:
  if (huart == NULL)
 8003ef8:	b358      	cbz	r0, 8003f52 <HAL_UART_Init+0x5a>
{
 8003efa:	b510      	push	{r4, lr}
 8003efc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003efe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003f02:	b30b      	cbz	r3, 8003f48 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003f04:	2324      	movs	r3, #36	; 0x24
 8003f06:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003f0a:	6822      	ldr	r2, [r4, #0]
 8003f0c:	68d3      	ldr	r3, [r2, #12]
 8003f0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f12:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003f14:	4620      	mov	r0, r4
 8003f16:	f7ff ff55 	bl	8003dc4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f1a:	6822      	ldr	r2, [r4, #0]
 8003f1c:	6913      	ldr	r3, [r2, #16]
 8003f1e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003f22:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f24:	6822      	ldr	r2, [r4, #0]
 8003f26:	6953      	ldr	r3, [r2, #20]
 8003f28:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003f2c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003f2e:	6822      	ldr	r2, [r4, #0]
 8003f30:	68d3      	ldr	r3, [r2, #12]
 8003f32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f36:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f38:	2000      	movs	r0, #0
 8003f3a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003f3c:	2320      	movs	r3, #32
 8003f3e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003f42:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003f46:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003f48:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003f4c:	f7fe fa74 	bl	8002438 <HAL_UART_MspInit>
 8003f50:	e7d8      	b.n	8003f04 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003f52:	2001      	movs	r0, #1
}
 8003f54:	4770      	bx	lr

08003f56 <HAL_UART_Transmit>:
{
 8003f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003f5e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d158      	bne.n	800401a <HAL_UART_Transmit+0xc4>
 8003f68:	4604      	mov	r4, r0
 8003f6a:	460d      	mov	r5, r1
 8003f6c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003f6e:	2900      	cmp	r1, #0
 8003f70:	d057      	beq.n	8004022 <HAL_UART_Transmit+0xcc>
 8003f72:	2a00      	cmp	r2, #0
 8003f74:	d057      	beq.n	8004026 <HAL_UART_Transmit+0xd0>
    __HAL_LOCK(huart);
 8003f76:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d055      	beq.n	800402a <HAL_UART_Transmit+0xd4>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f88:	2321      	movs	r3, #33	; 0x21
 8003f8a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003f8e:	f7fe fb5b 	bl	8002648 <HAL_GetTick>
 8003f92:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003f94:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f98:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f9c:	e017      	b.n	8003fce <HAL_UART_Transmit+0x78>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f9e:	9600      	str	r6, [sp, #0]
 8003fa0:	463b      	mov	r3, r7
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2180      	movs	r1, #128	; 0x80
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f7ff ff72 	bl	8003e90 <UART_WaitOnFlagUntilTimeout>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	d13e      	bne.n	800402e <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003fb0:	882b      	ldrh	r3, [r5, #0]
 8003fb2:	6822      	ldr	r2, [r4, #0]
 8003fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb8:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003fba:	6923      	ldr	r3, [r4, #16]
 8003fbc:	b90b      	cbnz	r3, 8003fc2 <HAL_UART_Transmit+0x6c>
          pData += 2U;
 8003fbe:	3502      	adds	r5, #2
 8003fc0:	e005      	b.n	8003fce <HAL_UART_Transmit+0x78>
          pData += 1U;
 8003fc2:	3501      	adds	r5, #1
 8003fc4:	e003      	b.n	8003fce <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003fc6:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003fce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	b19b      	cbz	r3, 8003ffc <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8003fd4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003fd6:	b292      	uxth	r2, r2
 8003fd8:	3a01      	subs	r2, #1
 8003fda:	b292      	uxth	r2, r2
 8003fdc:	84e2      	strh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003fde:	68a3      	ldr	r3, [r4, #8]
 8003fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe4:	d0db      	beq.n	8003f9e <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fe6:	9600      	str	r6, [sp, #0]
 8003fe8:	463b      	mov	r3, r7
 8003fea:	2200      	movs	r2, #0
 8003fec:	2180      	movs	r1, #128	; 0x80
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f7ff ff4e 	bl	8003e90 <UART_WaitOnFlagUntilTimeout>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d0e6      	beq.n	8003fc6 <HAL_UART_Transmit+0x70>
          return HAL_TIMEOUT;
 8003ff8:	2003      	movs	r0, #3
 8003ffa:	e00f      	b.n	800401c <HAL_UART_Transmit+0xc6>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ffc:	9600      	str	r6, [sp, #0]
 8003ffe:	463b      	mov	r3, r7
 8004000:	2200      	movs	r2, #0
 8004002:	2140      	movs	r1, #64	; 0x40
 8004004:	4620      	mov	r0, r4
 8004006:	f7ff ff43 	bl	8003e90 <UART_WaitOnFlagUntilTimeout>
 800400a:	b990      	cbnz	r0, 8004032 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 800400c:	2320      	movs	r3, #32
 800400e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8004012:	2300      	movs	r3, #0
 8004014:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 8004018:	e000      	b.n	800401c <HAL_UART_Transmit+0xc6>
    return HAL_BUSY;
 800401a:	2002      	movs	r0, #2
}
 800401c:	b002      	add	sp, #8
 800401e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004022:	2001      	movs	r0, #1
 8004024:	e7fa      	b.n	800401c <HAL_UART_Transmit+0xc6>
 8004026:	2001      	movs	r0, #1
 8004028:	e7f8      	b.n	800401c <HAL_UART_Transmit+0xc6>
    __HAL_LOCK(huart);
 800402a:	2002      	movs	r0, #2
 800402c:	e7f6      	b.n	800401c <HAL_UART_Transmit+0xc6>
          return HAL_TIMEOUT;
 800402e:	2003      	movs	r0, #3
 8004030:	e7f4      	b.n	800401c <HAL_UART_Transmit+0xc6>
      return HAL_TIMEOUT;
 8004032:	2003      	movs	r0, #3
 8004034:	e7f2      	b.n	800401c <HAL_UART_Transmit+0xc6>
	...

08004038 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004038:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800403a:	e003      	b.n	8004044 <LoopCopyDataInit>

0800403c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800403e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004040:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004042:	3104      	adds	r1, #4

08004044 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004044:	480a      	ldr	r0, [pc, #40]	; (8004070 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004046:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004048:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800404a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800404c:	d3f6      	bcc.n	800403c <CopyDataInit>
  ldr r2, =_sbss
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004050:	e002      	b.n	8004058 <LoopFillZerobss>

08004052 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004052:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004054:	f842 3b04 	str.w	r3, [r2], #4

08004058 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004058:	4b08      	ldr	r3, [pc, #32]	; (800407c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800405a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800405c:	d3f9      	bcc.n	8004052 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800405e:	f7fe fa8b 	bl	8002578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004062:	f000 f815 	bl	8004090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004066:	f7fd feb5 	bl	8001dd4 <main>
  bx lr
 800406a:	4770      	bx	lr
  ldr r3, =_sidata
 800406c:	0800c820 	.word	0x0800c820
  ldr r0, =_sdata
 8004070:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004074:	200001fc 	.word	0x200001fc
  ldr r2, =_sbss
 8004078:	200001fc 	.word	0x200001fc
  ldr r3, = _ebss
 800407c:	200007bc 	.word	0x200007bc

08004080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004080:	e7fe      	b.n	8004080 <ADC1_2_IRQHandler>
	...

08004084 <__errno>:
 8004084:	4b01      	ldr	r3, [pc, #4]	; (800408c <__errno+0x8>)
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	20000024 	.word	0x20000024

08004090 <__libc_init_array>:
 8004090:	b570      	push	{r4, r5, r6, lr}
 8004092:	2600      	movs	r6, #0
 8004094:	4d0c      	ldr	r5, [pc, #48]	; (80040c8 <__libc_init_array+0x38>)
 8004096:	4c0d      	ldr	r4, [pc, #52]	; (80040cc <__libc_init_array+0x3c>)
 8004098:	1b64      	subs	r4, r4, r5
 800409a:	10a4      	asrs	r4, r4, #2
 800409c:	42a6      	cmp	r6, r4
 800409e:	d109      	bne.n	80040b4 <__libc_init_array+0x24>
 80040a0:	f005 fbf0 	bl	8009884 <_init>
 80040a4:	2600      	movs	r6, #0
 80040a6:	4d0a      	ldr	r5, [pc, #40]	; (80040d0 <__libc_init_array+0x40>)
 80040a8:	4c0a      	ldr	r4, [pc, #40]	; (80040d4 <__libc_init_array+0x44>)
 80040aa:	1b64      	subs	r4, r4, r5
 80040ac:	10a4      	asrs	r4, r4, #2
 80040ae:	42a6      	cmp	r6, r4
 80040b0:	d105      	bne.n	80040be <__libc_init_array+0x2e>
 80040b2:	bd70      	pop	{r4, r5, r6, pc}
 80040b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b8:	4798      	blx	r3
 80040ba:	3601      	adds	r6, #1
 80040bc:	e7ee      	b.n	800409c <__libc_init_array+0xc>
 80040be:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c2:	4798      	blx	r3
 80040c4:	3601      	adds	r6, #1
 80040c6:	e7f2      	b.n	80040ae <__libc_init_array+0x1e>
 80040c8:	0800c818 	.word	0x0800c818
 80040cc:	0800c818 	.word	0x0800c818
 80040d0:	0800c818 	.word	0x0800c818
 80040d4:	0800c81c 	.word	0x0800c81c

080040d8 <memset>:
 80040d8:	4603      	mov	r3, r0
 80040da:	4402      	add	r2, r0
 80040dc:	4293      	cmp	r3, r2
 80040de:	d100      	bne.n	80040e2 <memset+0xa>
 80040e0:	4770      	bx	lr
 80040e2:	f803 1b01 	strb.w	r1, [r3], #1
 80040e6:	e7f9      	b.n	80040dc <memset+0x4>

080040e8 <__cvt>:
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040ee:	461f      	mov	r7, r3
 80040f0:	bfbb      	ittet	lt
 80040f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80040f6:	461f      	movlt	r7, r3
 80040f8:	2300      	movge	r3, #0
 80040fa:	232d      	movlt	r3, #45	; 0x2d
 80040fc:	b088      	sub	sp, #32
 80040fe:	4614      	mov	r4, r2
 8004100:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004102:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004104:	7013      	strb	r3, [r2, #0]
 8004106:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004108:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800410c:	f023 0820 	bic.w	r8, r3, #32
 8004110:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004114:	d005      	beq.n	8004122 <__cvt+0x3a>
 8004116:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800411a:	d100      	bne.n	800411e <__cvt+0x36>
 800411c:	3501      	adds	r5, #1
 800411e:	2302      	movs	r3, #2
 8004120:	e000      	b.n	8004124 <__cvt+0x3c>
 8004122:	2303      	movs	r3, #3
 8004124:	aa07      	add	r2, sp, #28
 8004126:	9204      	str	r2, [sp, #16]
 8004128:	aa06      	add	r2, sp, #24
 800412a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800412e:	e9cd 3500 	strd	r3, r5, [sp]
 8004132:	4622      	mov	r2, r4
 8004134:	463b      	mov	r3, r7
 8004136:	f001 fddb 	bl	8005cf0 <_dtoa_r>
 800413a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800413e:	4606      	mov	r6, r0
 8004140:	d102      	bne.n	8004148 <__cvt+0x60>
 8004142:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004144:	07db      	lsls	r3, r3, #31
 8004146:	d522      	bpl.n	800418e <__cvt+0xa6>
 8004148:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800414c:	eb06 0905 	add.w	r9, r6, r5
 8004150:	d110      	bne.n	8004174 <__cvt+0x8c>
 8004152:	7833      	ldrb	r3, [r6, #0]
 8004154:	2b30      	cmp	r3, #48	; 0x30
 8004156:	d10a      	bne.n	800416e <__cvt+0x86>
 8004158:	2200      	movs	r2, #0
 800415a:	2300      	movs	r3, #0
 800415c:	4620      	mov	r0, r4
 800415e:	4639      	mov	r1, r7
 8004160:	f7fc fc22 	bl	80009a8 <__aeabi_dcmpeq>
 8004164:	b918      	cbnz	r0, 800416e <__cvt+0x86>
 8004166:	f1c5 0501 	rsb	r5, r5, #1
 800416a:	f8ca 5000 	str.w	r5, [sl]
 800416e:	f8da 3000 	ldr.w	r3, [sl]
 8004172:	4499      	add	r9, r3
 8004174:	2200      	movs	r2, #0
 8004176:	2300      	movs	r3, #0
 8004178:	4620      	mov	r0, r4
 800417a:	4639      	mov	r1, r7
 800417c:	f7fc fc14 	bl	80009a8 <__aeabi_dcmpeq>
 8004180:	b108      	cbz	r0, 8004186 <__cvt+0x9e>
 8004182:	f8cd 901c 	str.w	r9, [sp, #28]
 8004186:	2230      	movs	r2, #48	; 0x30
 8004188:	9b07      	ldr	r3, [sp, #28]
 800418a:	454b      	cmp	r3, r9
 800418c:	d307      	bcc.n	800419e <__cvt+0xb6>
 800418e:	4630      	mov	r0, r6
 8004190:	9b07      	ldr	r3, [sp, #28]
 8004192:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004194:	1b9b      	subs	r3, r3, r6
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	b008      	add	sp, #32
 800419a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800419e:	1c59      	adds	r1, r3, #1
 80041a0:	9107      	str	r1, [sp, #28]
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	e7f0      	b.n	8004188 <__cvt+0xa0>

080041a6 <__exponent>:
 80041a6:	4603      	mov	r3, r0
 80041a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041aa:	2900      	cmp	r1, #0
 80041ac:	f803 2b02 	strb.w	r2, [r3], #2
 80041b0:	bfb6      	itet	lt
 80041b2:	222d      	movlt	r2, #45	; 0x2d
 80041b4:	222b      	movge	r2, #43	; 0x2b
 80041b6:	4249      	neglt	r1, r1
 80041b8:	2909      	cmp	r1, #9
 80041ba:	7042      	strb	r2, [r0, #1]
 80041bc:	dd2b      	ble.n	8004216 <__exponent+0x70>
 80041be:	f10d 0407 	add.w	r4, sp, #7
 80041c2:	46a4      	mov	ip, r4
 80041c4:	270a      	movs	r7, #10
 80041c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80041ca:	460a      	mov	r2, r1
 80041cc:	46a6      	mov	lr, r4
 80041ce:	fb07 1516 	mls	r5, r7, r6, r1
 80041d2:	2a63      	cmp	r2, #99	; 0x63
 80041d4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80041d8:	4631      	mov	r1, r6
 80041da:	f104 34ff 	add.w	r4, r4, #4294967295
 80041de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80041e2:	dcf0      	bgt.n	80041c6 <__exponent+0x20>
 80041e4:	3130      	adds	r1, #48	; 0x30
 80041e6:	f1ae 0502 	sub.w	r5, lr, #2
 80041ea:	f804 1c01 	strb.w	r1, [r4, #-1]
 80041ee:	4629      	mov	r1, r5
 80041f0:	1c44      	adds	r4, r0, #1
 80041f2:	4561      	cmp	r1, ip
 80041f4:	d30a      	bcc.n	800420c <__exponent+0x66>
 80041f6:	f10d 0209 	add.w	r2, sp, #9
 80041fa:	eba2 020e 	sub.w	r2, r2, lr
 80041fe:	4565      	cmp	r5, ip
 8004200:	bf88      	it	hi
 8004202:	2200      	movhi	r2, #0
 8004204:	4413      	add	r3, r2
 8004206:	1a18      	subs	r0, r3, r0
 8004208:	b003      	add	sp, #12
 800420a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800420c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004210:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004214:	e7ed      	b.n	80041f2 <__exponent+0x4c>
 8004216:	2330      	movs	r3, #48	; 0x30
 8004218:	3130      	adds	r1, #48	; 0x30
 800421a:	7083      	strb	r3, [r0, #2]
 800421c:	70c1      	strb	r1, [r0, #3]
 800421e:	1d03      	adds	r3, r0, #4
 8004220:	e7f1      	b.n	8004206 <__exponent+0x60>
	...

08004224 <_printf_float>:
 8004224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004228:	b091      	sub	sp, #68	; 0x44
 800422a:	460c      	mov	r4, r1
 800422c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004230:	4616      	mov	r6, r2
 8004232:	461f      	mov	r7, r3
 8004234:	4605      	mov	r5, r0
 8004236:	f002 feaf 	bl	8006f98 <_localeconv_r>
 800423a:	6803      	ldr	r3, [r0, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	9309      	str	r3, [sp, #36]	; 0x24
 8004240:	f7fb ff86 	bl	8000150 <strlen>
 8004244:	2300      	movs	r3, #0
 8004246:	930e      	str	r3, [sp, #56]	; 0x38
 8004248:	f8d8 3000 	ldr.w	r3, [r8]
 800424c:	900a      	str	r0, [sp, #40]	; 0x28
 800424e:	3307      	adds	r3, #7
 8004250:	f023 0307 	bic.w	r3, r3, #7
 8004254:	f103 0208 	add.w	r2, r3, #8
 8004258:	f894 9018 	ldrb.w	r9, [r4, #24]
 800425c:	f8d4 b000 	ldr.w	fp, [r4]
 8004260:	f8c8 2000 	str.w	r2, [r8]
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800426c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004270:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004274:	930b      	str	r3, [sp, #44]	; 0x2c
 8004276:	f04f 32ff 	mov.w	r2, #4294967295
 800427a:	4640      	mov	r0, r8
 800427c:	4b9c      	ldr	r3, [pc, #624]	; (80044f0 <_printf_float+0x2cc>)
 800427e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004280:	f7fc fbc4 	bl	8000a0c <__aeabi_dcmpun>
 8004284:	bb70      	cbnz	r0, 80042e4 <_printf_float+0xc0>
 8004286:	f04f 32ff 	mov.w	r2, #4294967295
 800428a:	4640      	mov	r0, r8
 800428c:	4b98      	ldr	r3, [pc, #608]	; (80044f0 <_printf_float+0x2cc>)
 800428e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004290:	f7fc fb9e 	bl	80009d0 <__aeabi_dcmple>
 8004294:	bb30      	cbnz	r0, 80042e4 <_printf_float+0xc0>
 8004296:	2200      	movs	r2, #0
 8004298:	2300      	movs	r3, #0
 800429a:	4640      	mov	r0, r8
 800429c:	4651      	mov	r1, sl
 800429e:	f7fc fb8d 	bl	80009bc <__aeabi_dcmplt>
 80042a2:	b110      	cbz	r0, 80042aa <_printf_float+0x86>
 80042a4:	232d      	movs	r3, #45	; 0x2d
 80042a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042aa:	4b92      	ldr	r3, [pc, #584]	; (80044f4 <_printf_float+0x2d0>)
 80042ac:	4892      	ldr	r0, [pc, #584]	; (80044f8 <_printf_float+0x2d4>)
 80042ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80042b2:	bf94      	ite	ls
 80042b4:	4698      	movls	r8, r3
 80042b6:	4680      	movhi	r8, r0
 80042b8:	2303      	movs	r3, #3
 80042ba:	f04f 0a00 	mov.w	sl, #0
 80042be:	6123      	str	r3, [r4, #16]
 80042c0:	f02b 0304 	bic.w	r3, fp, #4
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	4633      	mov	r3, r6
 80042c8:	4621      	mov	r1, r4
 80042ca:	4628      	mov	r0, r5
 80042cc:	9700      	str	r7, [sp, #0]
 80042ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80042d0:	f000 f9d4 	bl	800467c <_printf_common>
 80042d4:	3001      	adds	r0, #1
 80042d6:	f040 8090 	bne.w	80043fa <_printf_float+0x1d6>
 80042da:	f04f 30ff 	mov.w	r0, #4294967295
 80042de:	b011      	add	sp, #68	; 0x44
 80042e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e4:	4642      	mov	r2, r8
 80042e6:	4653      	mov	r3, sl
 80042e8:	4640      	mov	r0, r8
 80042ea:	4651      	mov	r1, sl
 80042ec:	f7fc fb8e 	bl	8000a0c <__aeabi_dcmpun>
 80042f0:	b148      	cbz	r0, 8004306 <_printf_float+0xe2>
 80042f2:	f1ba 0f00 	cmp.w	sl, #0
 80042f6:	bfb8      	it	lt
 80042f8:	232d      	movlt	r3, #45	; 0x2d
 80042fa:	4880      	ldr	r0, [pc, #512]	; (80044fc <_printf_float+0x2d8>)
 80042fc:	bfb8      	it	lt
 80042fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004302:	4b7f      	ldr	r3, [pc, #508]	; (8004500 <_printf_float+0x2dc>)
 8004304:	e7d3      	b.n	80042ae <_printf_float+0x8a>
 8004306:	6863      	ldr	r3, [r4, #4]
 8004308:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	d142      	bne.n	8004396 <_printf_float+0x172>
 8004310:	2306      	movs	r3, #6
 8004312:	6063      	str	r3, [r4, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	9206      	str	r2, [sp, #24]
 8004318:	aa0e      	add	r2, sp, #56	; 0x38
 800431a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800431e:	aa0d      	add	r2, sp, #52	; 0x34
 8004320:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004324:	9203      	str	r2, [sp, #12]
 8004326:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800432a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800432e:	6023      	str	r3, [r4, #0]
 8004330:	6863      	ldr	r3, [r4, #4]
 8004332:	4642      	mov	r2, r8
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	4628      	mov	r0, r5
 8004338:	4653      	mov	r3, sl
 800433a:	910b      	str	r1, [sp, #44]	; 0x2c
 800433c:	f7ff fed4 	bl	80040e8 <__cvt>
 8004340:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004342:	4680      	mov	r8, r0
 8004344:	2947      	cmp	r1, #71	; 0x47
 8004346:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004348:	d108      	bne.n	800435c <_printf_float+0x138>
 800434a:	1cc8      	adds	r0, r1, #3
 800434c:	db02      	blt.n	8004354 <_printf_float+0x130>
 800434e:	6863      	ldr	r3, [r4, #4]
 8004350:	4299      	cmp	r1, r3
 8004352:	dd40      	ble.n	80043d6 <_printf_float+0x1b2>
 8004354:	f1a9 0902 	sub.w	r9, r9, #2
 8004358:	fa5f f989 	uxtb.w	r9, r9
 800435c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004360:	d81f      	bhi.n	80043a2 <_printf_float+0x17e>
 8004362:	464a      	mov	r2, r9
 8004364:	3901      	subs	r1, #1
 8004366:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800436a:	910d      	str	r1, [sp, #52]	; 0x34
 800436c:	f7ff ff1b 	bl	80041a6 <__exponent>
 8004370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004372:	4682      	mov	sl, r0
 8004374:	1813      	adds	r3, r2, r0
 8004376:	2a01      	cmp	r2, #1
 8004378:	6123      	str	r3, [r4, #16]
 800437a:	dc02      	bgt.n	8004382 <_printf_float+0x15e>
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	07d2      	lsls	r2, r2, #31
 8004380:	d501      	bpl.n	8004386 <_printf_float+0x162>
 8004382:	3301      	adds	r3, #1
 8004384:	6123      	str	r3, [r4, #16]
 8004386:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800438a:	2b00      	cmp	r3, #0
 800438c:	d09b      	beq.n	80042c6 <_printf_float+0xa2>
 800438e:	232d      	movs	r3, #45	; 0x2d
 8004390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004394:	e797      	b.n	80042c6 <_printf_float+0xa2>
 8004396:	2947      	cmp	r1, #71	; 0x47
 8004398:	d1bc      	bne.n	8004314 <_printf_float+0xf0>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1ba      	bne.n	8004314 <_printf_float+0xf0>
 800439e:	2301      	movs	r3, #1
 80043a0:	e7b7      	b.n	8004312 <_printf_float+0xee>
 80043a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80043a6:	d118      	bne.n	80043da <_printf_float+0x1b6>
 80043a8:	2900      	cmp	r1, #0
 80043aa:	6863      	ldr	r3, [r4, #4]
 80043ac:	dd0b      	ble.n	80043c6 <_printf_float+0x1a2>
 80043ae:	6121      	str	r1, [r4, #16]
 80043b0:	b913      	cbnz	r3, 80043b8 <_printf_float+0x194>
 80043b2:	6822      	ldr	r2, [r4, #0]
 80043b4:	07d0      	lsls	r0, r2, #31
 80043b6:	d502      	bpl.n	80043be <_printf_float+0x19a>
 80043b8:	3301      	adds	r3, #1
 80043ba:	440b      	add	r3, r1
 80043bc:	6123      	str	r3, [r4, #16]
 80043be:	f04f 0a00 	mov.w	sl, #0
 80043c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80043c4:	e7df      	b.n	8004386 <_printf_float+0x162>
 80043c6:	b913      	cbnz	r3, 80043ce <_printf_float+0x1aa>
 80043c8:	6822      	ldr	r2, [r4, #0]
 80043ca:	07d2      	lsls	r2, r2, #31
 80043cc:	d501      	bpl.n	80043d2 <_printf_float+0x1ae>
 80043ce:	3302      	adds	r3, #2
 80043d0:	e7f4      	b.n	80043bc <_printf_float+0x198>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e7f2      	b.n	80043bc <_printf_float+0x198>
 80043d6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80043da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043dc:	4299      	cmp	r1, r3
 80043de:	db05      	blt.n	80043ec <_printf_float+0x1c8>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	6121      	str	r1, [r4, #16]
 80043e4:	07d8      	lsls	r0, r3, #31
 80043e6:	d5ea      	bpl.n	80043be <_printf_float+0x19a>
 80043e8:	1c4b      	adds	r3, r1, #1
 80043ea:	e7e7      	b.n	80043bc <_printf_float+0x198>
 80043ec:	2900      	cmp	r1, #0
 80043ee:	bfcc      	ite	gt
 80043f0:	2201      	movgt	r2, #1
 80043f2:	f1c1 0202 	rsble	r2, r1, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	e7e0      	b.n	80043bc <_printf_float+0x198>
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	055a      	lsls	r2, r3, #21
 80043fe:	d407      	bmi.n	8004410 <_printf_float+0x1ec>
 8004400:	6923      	ldr	r3, [r4, #16]
 8004402:	4642      	mov	r2, r8
 8004404:	4631      	mov	r1, r6
 8004406:	4628      	mov	r0, r5
 8004408:	47b8      	blx	r7
 800440a:	3001      	adds	r0, #1
 800440c:	d12b      	bne.n	8004466 <_printf_float+0x242>
 800440e:	e764      	b.n	80042da <_printf_float+0xb6>
 8004410:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004414:	f240 80dd 	bls.w	80045d2 <_printf_float+0x3ae>
 8004418:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800441c:	2200      	movs	r2, #0
 800441e:	2300      	movs	r3, #0
 8004420:	f7fc fac2 	bl	80009a8 <__aeabi_dcmpeq>
 8004424:	2800      	cmp	r0, #0
 8004426:	d033      	beq.n	8004490 <_printf_float+0x26c>
 8004428:	2301      	movs	r3, #1
 800442a:	4631      	mov	r1, r6
 800442c:	4628      	mov	r0, r5
 800442e:	4a35      	ldr	r2, [pc, #212]	; (8004504 <_printf_float+0x2e0>)
 8004430:	47b8      	blx	r7
 8004432:	3001      	adds	r0, #1
 8004434:	f43f af51 	beq.w	80042da <_printf_float+0xb6>
 8004438:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800443c:	429a      	cmp	r2, r3
 800443e:	db02      	blt.n	8004446 <_printf_float+0x222>
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	07d8      	lsls	r0, r3, #31
 8004444:	d50f      	bpl.n	8004466 <_printf_float+0x242>
 8004446:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800444a:	4631      	mov	r1, r6
 800444c:	4628      	mov	r0, r5
 800444e:	47b8      	blx	r7
 8004450:	3001      	adds	r0, #1
 8004452:	f43f af42 	beq.w	80042da <_printf_float+0xb6>
 8004456:	f04f 0800 	mov.w	r8, #0
 800445a:	f104 091a 	add.w	r9, r4, #26
 800445e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004460:	3b01      	subs	r3, #1
 8004462:	4543      	cmp	r3, r8
 8004464:	dc09      	bgt.n	800447a <_printf_float+0x256>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	079b      	lsls	r3, r3, #30
 800446a:	f100 8102 	bmi.w	8004672 <_printf_float+0x44e>
 800446e:	68e0      	ldr	r0, [r4, #12]
 8004470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004472:	4298      	cmp	r0, r3
 8004474:	bfb8      	it	lt
 8004476:	4618      	movlt	r0, r3
 8004478:	e731      	b.n	80042de <_printf_float+0xba>
 800447a:	2301      	movs	r3, #1
 800447c:	464a      	mov	r2, r9
 800447e:	4631      	mov	r1, r6
 8004480:	4628      	mov	r0, r5
 8004482:	47b8      	blx	r7
 8004484:	3001      	adds	r0, #1
 8004486:	f43f af28 	beq.w	80042da <_printf_float+0xb6>
 800448a:	f108 0801 	add.w	r8, r8, #1
 800448e:	e7e6      	b.n	800445e <_printf_float+0x23a>
 8004490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004492:	2b00      	cmp	r3, #0
 8004494:	dc38      	bgt.n	8004508 <_printf_float+0x2e4>
 8004496:	2301      	movs	r3, #1
 8004498:	4631      	mov	r1, r6
 800449a:	4628      	mov	r0, r5
 800449c:	4a19      	ldr	r2, [pc, #100]	; (8004504 <_printf_float+0x2e0>)
 800449e:	47b8      	blx	r7
 80044a0:	3001      	adds	r0, #1
 80044a2:	f43f af1a 	beq.w	80042da <_printf_float+0xb6>
 80044a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044aa:	4313      	orrs	r3, r2
 80044ac:	d102      	bne.n	80044b4 <_printf_float+0x290>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	07d9      	lsls	r1, r3, #31
 80044b2:	d5d8      	bpl.n	8004466 <_printf_float+0x242>
 80044b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044b8:	4631      	mov	r1, r6
 80044ba:	4628      	mov	r0, r5
 80044bc:	47b8      	blx	r7
 80044be:	3001      	adds	r0, #1
 80044c0:	f43f af0b 	beq.w	80042da <_printf_float+0xb6>
 80044c4:	f04f 0900 	mov.w	r9, #0
 80044c8:	f104 0a1a 	add.w	sl, r4, #26
 80044cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044ce:	425b      	negs	r3, r3
 80044d0:	454b      	cmp	r3, r9
 80044d2:	dc01      	bgt.n	80044d8 <_printf_float+0x2b4>
 80044d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044d6:	e794      	b.n	8004402 <_printf_float+0x1de>
 80044d8:	2301      	movs	r3, #1
 80044da:	4652      	mov	r2, sl
 80044dc:	4631      	mov	r1, r6
 80044de:	4628      	mov	r0, r5
 80044e0:	47b8      	blx	r7
 80044e2:	3001      	adds	r0, #1
 80044e4:	f43f aef9 	beq.w	80042da <_printf_float+0xb6>
 80044e8:	f109 0901 	add.w	r9, r9, #1
 80044ec:	e7ee      	b.n	80044cc <_printf_float+0x2a8>
 80044ee:	bf00      	nop
 80044f0:	7fefffff 	.word	0x7fefffff
 80044f4:	0800c318 	.word	0x0800c318
 80044f8:	0800c31c 	.word	0x0800c31c
 80044fc:	0800c324 	.word	0x0800c324
 8004500:	0800c320 	.word	0x0800c320
 8004504:	0800c328 	.word	0x0800c328
 8004508:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800450a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800450c:	429a      	cmp	r2, r3
 800450e:	bfa8      	it	ge
 8004510:	461a      	movge	r2, r3
 8004512:	2a00      	cmp	r2, #0
 8004514:	4691      	mov	r9, r2
 8004516:	dc37      	bgt.n	8004588 <_printf_float+0x364>
 8004518:	f04f 0b00 	mov.w	fp, #0
 800451c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004520:	f104 021a 	add.w	r2, r4, #26
 8004524:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004528:	ebaa 0309 	sub.w	r3, sl, r9
 800452c:	455b      	cmp	r3, fp
 800452e:	dc33      	bgt.n	8004598 <_printf_float+0x374>
 8004530:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004534:	429a      	cmp	r2, r3
 8004536:	db3b      	blt.n	80045b0 <_printf_float+0x38c>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	07da      	lsls	r2, r3, #31
 800453c:	d438      	bmi.n	80045b0 <_printf_float+0x38c>
 800453e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004540:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004542:	eba2 030a 	sub.w	r3, r2, sl
 8004546:	eba2 0901 	sub.w	r9, r2, r1
 800454a:	4599      	cmp	r9, r3
 800454c:	bfa8      	it	ge
 800454e:	4699      	movge	r9, r3
 8004550:	f1b9 0f00 	cmp.w	r9, #0
 8004554:	dc34      	bgt.n	80045c0 <_printf_float+0x39c>
 8004556:	f04f 0800 	mov.w	r8, #0
 800455a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800455e:	f104 0a1a 	add.w	sl, r4, #26
 8004562:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	eba3 0309 	sub.w	r3, r3, r9
 800456c:	4543      	cmp	r3, r8
 800456e:	f77f af7a 	ble.w	8004466 <_printf_float+0x242>
 8004572:	2301      	movs	r3, #1
 8004574:	4652      	mov	r2, sl
 8004576:	4631      	mov	r1, r6
 8004578:	4628      	mov	r0, r5
 800457a:	47b8      	blx	r7
 800457c:	3001      	adds	r0, #1
 800457e:	f43f aeac 	beq.w	80042da <_printf_float+0xb6>
 8004582:	f108 0801 	add.w	r8, r8, #1
 8004586:	e7ec      	b.n	8004562 <_printf_float+0x33e>
 8004588:	4613      	mov	r3, r2
 800458a:	4631      	mov	r1, r6
 800458c:	4642      	mov	r2, r8
 800458e:	4628      	mov	r0, r5
 8004590:	47b8      	blx	r7
 8004592:	3001      	adds	r0, #1
 8004594:	d1c0      	bne.n	8004518 <_printf_float+0x2f4>
 8004596:	e6a0      	b.n	80042da <_printf_float+0xb6>
 8004598:	2301      	movs	r3, #1
 800459a:	4631      	mov	r1, r6
 800459c:	4628      	mov	r0, r5
 800459e:	920b      	str	r2, [sp, #44]	; 0x2c
 80045a0:	47b8      	blx	r7
 80045a2:	3001      	adds	r0, #1
 80045a4:	f43f ae99 	beq.w	80042da <_printf_float+0xb6>
 80045a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045aa:	f10b 0b01 	add.w	fp, fp, #1
 80045ae:	e7b9      	b.n	8004524 <_printf_float+0x300>
 80045b0:	4631      	mov	r1, r6
 80045b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045b6:	4628      	mov	r0, r5
 80045b8:	47b8      	blx	r7
 80045ba:	3001      	adds	r0, #1
 80045bc:	d1bf      	bne.n	800453e <_printf_float+0x31a>
 80045be:	e68c      	b.n	80042da <_printf_float+0xb6>
 80045c0:	464b      	mov	r3, r9
 80045c2:	4631      	mov	r1, r6
 80045c4:	4628      	mov	r0, r5
 80045c6:	eb08 020a 	add.w	r2, r8, sl
 80045ca:	47b8      	blx	r7
 80045cc:	3001      	adds	r0, #1
 80045ce:	d1c2      	bne.n	8004556 <_printf_float+0x332>
 80045d0:	e683      	b.n	80042da <_printf_float+0xb6>
 80045d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045d4:	2a01      	cmp	r2, #1
 80045d6:	dc01      	bgt.n	80045dc <_printf_float+0x3b8>
 80045d8:	07db      	lsls	r3, r3, #31
 80045da:	d537      	bpl.n	800464c <_printf_float+0x428>
 80045dc:	2301      	movs	r3, #1
 80045de:	4642      	mov	r2, r8
 80045e0:	4631      	mov	r1, r6
 80045e2:	4628      	mov	r0, r5
 80045e4:	47b8      	blx	r7
 80045e6:	3001      	adds	r0, #1
 80045e8:	f43f ae77 	beq.w	80042da <_printf_float+0xb6>
 80045ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045f0:	4631      	mov	r1, r6
 80045f2:	4628      	mov	r0, r5
 80045f4:	47b8      	blx	r7
 80045f6:	3001      	adds	r0, #1
 80045f8:	f43f ae6f 	beq.w	80042da <_printf_float+0xb6>
 80045fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004600:	2200      	movs	r2, #0
 8004602:	2300      	movs	r3, #0
 8004604:	f7fc f9d0 	bl	80009a8 <__aeabi_dcmpeq>
 8004608:	b9d8      	cbnz	r0, 8004642 <_printf_float+0x41e>
 800460a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800460c:	f108 0201 	add.w	r2, r8, #1
 8004610:	3b01      	subs	r3, #1
 8004612:	4631      	mov	r1, r6
 8004614:	4628      	mov	r0, r5
 8004616:	47b8      	blx	r7
 8004618:	3001      	adds	r0, #1
 800461a:	d10e      	bne.n	800463a <_printf_float+0x416>
 800461c:	e65d      	b.n	80042da <_printf_float+0xb6>
 800461e:	2301      	movs	r3, #1
 8004620:	464a      	mov	r2, r9
 8004622:	4631      	mov	r1, r6
 8004624:	4628      	mov	r0, r5
 8004626:	47b8      	blx	r7
 8004628:	3001      	adds	r0, #1
 800462a:	f43f ae56 	beq.w	80042da <_printf_float+0xb6>
 800462e:	f108 0801 	add.w	r8, r8, #1
 8004632:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004634:	3b01      	subs	r3, #1
 8004636:	4543      	cmp	r3, r8
 8004638:	dcf1      	bgt.n	800461e <_printf_float+0x3fa>
 800463a:	4653      	mov	r3, sl
 800463c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004640:	e6e0      	b.n	8004404 <_printf_float+0x1e0>
 8004642:	f04f 0800 	mov.w	r8, #0
 8004646:	f104 091a 	add.w	r9, r4, #26
 800464a:	e7f2      	b.n	8004632 <_printf_float+0x40e>
 800464c:	2301      	movs	r3, #1
 800464e:	4642      	mov	r2, r8
 8004650:	e7df      	b.n	8004612 <_printf_float+0x3ee>
 8004652:	2301      	movs	r3, #1
 8004654:	464a      	mov	r2, r9
 8004656:	4631      	mov	r1, r6
 8004658:	4628      	mov	r0, r5
 800465a:	47b8      	blx	r7
 800465c:	3001      	adds	r0, #1
 800465e:	f43f ae3c 	beq.w	80042da <_printf_float+0xb6>
 8004662:	f108 0801 	add.w	r8, r8, #1
 8004666:	68e3      	ldr	r3, [r4, #12]
 8004668:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800466a:	1a5b      	subs	r3, r3, r1
 800466c:	4543      	cmp	r3, r8
 800466e:	dcf0      	bgt.n	8004652 <_printf_float+0x42e>
 8004670:	e6fd      	b.n	800446e <_printf_float+0x24a>
 8004672:	f04f 0800 	mov.w	r8, #0
 8004676:	f104 0919 	add.w	r9, r4, #25
 800467a:	e7f4      	b.n	8004666 <_printf_float+0x442>

0800467c <_printf_common>:
 800467c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004680:	4616      	mov	r6, r2
 8004682:	4699      	mov	r9, r3
 8004684:	688a      	ldr	r2, [r1, #8]
 8004686:	690b      	ldr	r3, [r1, #16]
 8004688:	4607      	mov	r7, r0
 800468a:	4293      	cmp	r3, r2
 800468c:	bfb8      	it	lt
 800468e:	4613      	movlt	r3, r2
 8004690:	6033      	str	r3, [r6, #0]
 8004692:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004696:	460c      	mov	r4, r1
 8004698:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800469c:	b10a      	cbz	r2, 80046a2 <_printf_common+0x26>
 800469e:	3301      	adds	r3, #1
 80046a0:	6033      	str	r3, [r6, #0]
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	0699      	lsls	r1, r3, #26
 80046a6:	bf42      	ittt	mi
 80046a8:	6833      	ldrmi	r3, [r6, #0]
 80046aa:	3302      	addmi	r3, #2
 80046ac:	6033      	strmi	r3, [r6, #0]
 80046ae:	6825      	ldr	r5, [r4, #0]
 80046b0:	f015 0506 	ands.w	r5, r5, #6
 80046b4:	d106      	bne.n	80046c4 <_printf_common+0x48>
 80046b6:	f104 0a19 	add.w	sl, r4, #25
 80046ba:	68e3      	ldr	r3, [r4, #12]
 80046bc:	6832      	ldr	r2, [r6, #0]
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	42ab      	cmp	r3, r5
 80046c2:	dc28      	bgt.n	8004716 <_printf_common+0x9a>
 80046c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046c8:	1e13      	subs	r3, r2, #0
 80046ca:	6822      	ldr	r2, [r4, #0]
 80046cc:	bf18      	it	ne
 80046ce:	2301      	movne	r3, #1
 80046d0:	0692      	lsls	r2, r2, #26
 80046d2:	d42d      	bmi.n	8004730 <_printf_common+0xb4>
 80046d4:	4649      	mov	r1, r9
 80046d6:	4638      	mov	r0, r7
 80046d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046dc:	47c0      	blx	r8
 80046de:	3001      	adds	r0, #1
 80046e0:	d020      	beq.n	8004724 <_printf_common+0xa8>
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	68e5      	ldr	r5, [r4, #12]
 80046e6:	f003 0306 	and.w	r3, r3, #6
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	bf18      	it	ne
 80046ee:	2500      	movne	r5, #0
 80046f0:	6832      	ldr	r2, [r6, #0]
 80046f2:	f04f 0600 	mov.w	r6, #0
 80046f6:	68a3      	ldr	r3, [r4, #8]
 80046f8:	bf08      	it	eq
 80046fa:	1aad      	subeq	r5, r5, r2
 80046fc:	6922      	ldr	r2, [r4, #16]
 80046fe:	bf08      	it	eq
 8004700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004704:	4293      	cmp	r3, r2
 8004706:	bfc4      	itt	gt
 8004708:	1a9b      	subgt	r3, r3, r2
 800470a:	18ed      	addgt	r5, r5, r3
 800470c:	341a      	adds	r4, #26
 800470e:	42b5      	cmp	r5, r6
 8004710:	d11a      	bne.n	8004748 <_printf_common+0xcc>
 8004712:	2000      	movs	r0, #0
 8004714:	e008      	b.n	8004728 <_printf_common+0xac>
 8004716:	2301      	movs	r3, #1
 8004718:	4652      	mov	r2, sl
 800471a:	4649      	mov	r1, r9
 800471c:	4638      	mov	r0, r7
 800471e:	47c0      	blx	r8
 8004720:	3001      	adds	r0, #1
 8004722:	d103      	bne.n	800472c <_printf_common+0xb0>
 8004724:	f04f 30ff 	mov.w	r0, #4294967295
 8004728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472c:	3501      	adds	r5, #1
 800472e:	e7c4      	b.n	80046ba <_printf_common+0x3e>
 8004730:	2030      	movs	r0, #48	; 0x30
 8004732:	18e1      	adds	r1, r4, r3
 8004734:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800473e:	4422      	add	r2, r4
 8004740:	3302      	adds	r3, #2
 8004742:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004746:	e7c5      	b.n	80046d4 <_printf_common+0x58>
 8004748:	2301      	movs	r3, #1
 800474a:	4622      	mov	r2, r4
 800474c:	4649      	mov	r1, r9
 800474e:	4638      	mov	r0, r7
 8004750:	47c0      	blx	r8
 8004752:	3001      	adds	r0, #1
 8004754:	d0e6      	beq.n	8004724 <_printf_common+0xa8>
 8004756:	3601      	adds	r6, #1
 8004758:	e7d9      	b.n	800470e <_printf_common+0x92>
	...

0800475c <_printf_i>:
 800475c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004760:	460c      	mov	r4, r1
 8004762:	7e27      	ldrb	r7, [r4, #24]
 8004764:	4691      	mov	r9, r2
 8004766:	2f78      	cmp	r7, #120	; 0x78
 8004768:	4680      	mov	r8, r0
 800476a:	469a      	mov	sl, r3
 800476c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800476e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004772:	d807      	bhi.n	8004784 <_printf_i+0x28>
 8004774:	2f62      	cmp	r7, #98	; 0x62
 8004776:	d80a      	bhi.n	800478e <_printf_i+0x32>
 8004778:	2f00      	cmp	r7, #0
 800477a:	f000 80d9 	beq.w	8004930 <_printf_i+0x1d4>
 800477e:	2f58      	cmp	r7, #88	; 0x58
 8004780:	f000 80a4 	beq.w	80048cc <_printf_i+0x170>
 8004784:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800478c:	e03a      	b.n	8004804 <_printf_i+0xa8>
 800478e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004792:	2b15      	cmp	r3, #21
 8004794:	d8f6      	bhi.n	8004784 <_printf_i+0x28>
 8004796:	a001      	add	r0, pc, #4	; (adr r0, 800479c <_printf_i+0x40>)
 8004798:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800479c:	080047f5 	.word	0x080047f5
 80047a0:	08004809 	.word	0x08004809
 80047a4:	08004785 	.word	0x08004785
 80047a8:	08004785 	.word	0x08004785
 80047ac:	08004785 	.word	0x08004785
 80047b0:	08004785 	.word	0x08004785
 80047b4:	08004809 	.word	0x08004809
 80047b8:	08004785 	.word	0x08004785
 80047bc:	08004785 	.word	0x08004785
 80047c0:	08004785 	.word	0x08004785
 80047c4:	08004785 	.word	0x08004785
 80047c8:	08004917 	.word	0x08004917
 80047cc:	08004839 	.word	0x08004839
 80047d0:	080048f9 	.word	0x080048f9
 80047d4:	08004785 	.word	0x08004785
 80047d8:	08004785 	.word	0x08004785
 80047dc:	08004939 	.word	0x08004939
 80047e0:	08004785 	.word	0x08004785
 80047e4:	08004839 	.word	0x08004839
 80047e8:	08004785 	.word	0x08004785
 80047ec:	08004785 	.word	0x08004785
 80047f0:	08004901 	.word	0x08004901
 80047f4:	680b      	ldr	r3, [r1, #0]
 80047f6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047fa:	1d1a      	adds	r2, r3, #4
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	600a      	str	r2, [r1, #0]
 8004800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004804:	2301      	movs	r3, #1
 8004806:	e0a4      	b.n	8004952 <_printf_i+0x1f6>
 8004808:	6825      	ldr	r5, [r4, #0]
 800480a:	6808      	ldr	r0, [r1, #0]
 800480c:	062e      	lsls	r6, r5, #24
 800480e:	f100 0304 	add.w	r3, r0, #4
 8004812:	d50a      	bpl.n	800482a <_printf_i+0xce>
 8004814:	6805      	ldr	r5, [r0, #0]
 8004816:	600b      	str	r3, [r1, #0]
 8004818:	2d00      	cmp	r5, #0
 800481a:	da03      	bge.n	8004824 <_printf_i+0xc8>
 800481c:	232d      	movs	r3, #45	; 0x2d
 800481e:	426d      	negs	r5, r5
 8004820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004824:	230a      	movs	r3, #10
 8004826:	485e      	ldr	r0, [pc, #376]	; (80049a0 <_printf_i+0x244>)
 8004828:	e019      	b.n	800485e <_printf_i+0x102>
 800482a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800482e:	6805      	ldr	r5, [r0, #0]
 8004830:	600b      	str	r3, [r1, #0]
 8004832:	bf18      	it	ne
 8004834:	b22d      	sxthne	r5, r5
 8004836:	e7ef      	b.n	8004818 <_printf_i+0xbc>
 8004838:	680b      	ldr	r3, [r1, #0]
 800483a:	6825      	ldr	r5, [r4, #0]
 800483c:	1d18      	adds	r0, r3, #4
 800483e:	6008      	str	r0, [r1, #0]
 8004840:	0628      	lsls	r0, r5, #24
 8004842:	d501      	bpl.n	8004848 <_printf_i+0xec>
 8004844:	681d      	ldr	r5, [r3, #0]
 8004846:	e002      	b.n	800484e <_printf_i+0xf2>
 8004848:	0669      	lsls	r1, r5, #25
 800484a:	d5fb      	bpl.n	8004844 <_printf_i+0xe8>
 800484c:	881d      	ldrh	r5, [r3, #0]
 800484e:	2f6f      	cmp	r7, #111	; 0x6f
 8004850:	bf0c      	ite	eq
 8004852:	2308      	moveq	r3, #8
 8004854:	230a      	movne	r3, #10
 8004856:	4852      	ldr	r0, [pc, #328]	; (80049a0 <_printf_i+0x244>)
 8004858:	2100      	movs	r1, #0
 800485a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800485e:	6866      	ldr	r6, [r4, #4]
 8004860:	2e00      	cmp	r6, #0
 8004862:	bfa8      	it	ge
 8004864:	6821      	ldrge	r1, [r4, #0]
 8004866:	60a6      	str	r6, [r4, #8]
 8004868:	bfa4      	itt	ge
 800486a:	f021 0104 	bicge.w	r1, r1, #4
 800486e:	6021      	strge	r1, [r4, #0]
 8004870:	b90d      	cbnz	r5, 8004876 <_printf_i+0x11a>
 8004872:	2e00      	cmp	r6, #0
 8004874:	d04d      	beq.n	8004912 <_printf_i+0x1b6>
 8004876:	4616      	mov	r6, r2
 8004878:	fbb5 f1f3 	udiv	r1, r5, r3
 800487c:	fb03 5711 	mls	r7, r3, r1, r5
 8004880:	5dc7      	ldrb	r7, [r0, r7]
 8004882:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004886:	462f      	mov	r7, r5
 8004888:	42bb      	cmp	r3, r7
 800488a:	460d      	mov	r5, r1
 800488c:	d9f4      	bls.n	8004878 <_printf_i+0x11c>
 800488e:	2b08      	cmp	r3, #8
 8004890:	d10b      	bne.n	80048aa <_printf_i+0x14e>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	07df      	lsls	r7, r3, #31
 8004896:	d508      	bpl.n	80048aa <_printf_i+0x14e>
 8004898:	6923      	ldr	r3, [r4, #16]
 800489a:	6861      	ldr	r1, [r4, #4]
 800489c:	4299      	cmp	r1, r3
 800489e:	bfde      	ittt	le
 80048a0:	2330      	movle	r3, #48	; 0x30
 80048a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048aa:	1b92      	subs	r2, r2, r6
 80048ac:	6122      	str	r2, [r4, #16]
 80048ae:	464b      	mov	r3, r9
 80048b0:	4621      	mov	r1, r4
 80048b2:	4640      	mov	r0, r8
 80048b4:	f8cd a000 	str.w	sl, [sp]
 80048b8:	aa03      	add	r2, sp, #12
 80048ba:	f7ff fedf 	bl	800467c <_printf_common>
 80048be:	3001      	adds	r0, #1
 80048c0:	d14c      	bne.n	800495c <_printf_i+0x200>
 80048c2:	f04f 30ff 	mov.w	r0, #4294967295
 80048c6:	b004      	add	sp, #16
 80048c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048cc:	4834      	ldr	r0, [pc, #208]	; (80049a0 <_printf_i+0x244>)
 80048ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048d2:	680e      	ldr	r6, [r1, #0]
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80048da:	061f      	lsls	r7, r3, #24
 80048dc:	600e      	str	r6, [r1, #0]
 80048de:	d514      	bpl.n	800490a <_printf_i+0x1ae>
 80048e0:	07d9      	lsls	r1, r3, #31
 80048e2:	bf44      	itt	mi
 80048e4:	f043 0320 	orrmi.w	r3, r3, #32
 80048e8:	6023      	strmi	r3, [r4, #0]
 80048ea:	b91d      	cbnz	r5, 80048f4 <_printf_i+0x198>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	f023 0320 	bic.w	r3, r3, #32
 80048f2:	6023      	str	r3, [r4, #0]
 80048f4:	2310      	movs	r3, #16
 80048f6:	e7af      	b.n	8004858 <_printf_i+0xfc>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	f043 0320 	orr.w	r3, r3, #32
 80048fe:	6023      	str	r3, [r4, #0]
 8004900:	2378      	movs	r3, #120	; 0x78
 8004902:	4828      	ldr	r0, [pc, #160]	; (80049a4 <_printf_i+0x248>)
 8004904:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004908:	e7e3      	b.n	80048d2 <_printf_i+0x176>
 800490a:	065e      	lsls	r6, r3, #25
 800490c:	bf48      	it	mi
 800490e:	b2ad      	uxthmi	r5, r5
 8004910:	e7e6      	b.n	80048e0 <_printf_i+0x184>
 8004912:	4616      	mov	r6, r2
 8004914:	e7bb      	b.n	800488e <_printf_i+0x132>
 8004916:	680b      	ldr	r3, [r1, #0]
 8004918:	6826      	ldr	r6, [r4, #0]
 800491a:	1d1d      	adds	r5, r3, #4
 800491c:	6960      	ldr	r0, [r4, #20]
 800491e:	600d      	str	r5, [r1, #0]
 8004920:	0635      	lsls	r5, r6, #24
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	d501      	bpl.n	800492a <_printf_i+0x1ce>
 8004926:	6018      	str	r0, [r3, #0]
 8004928:	e002      	b.n	8004930 <_printf_i+0x1d4>
 800492a:	0671      	lsls	r1, r6, #25
 800492c:	d5fb      	bpl.n	8004926 <_printf_i+0x1ca>
 800492e:	8018      	strh	r0, [r3, #0]
 8004930:	2300      	movs	r3, #0
 8004932:	4616      	mov	r6, r2
 8004934:	6123      	str	r3, [r4, #16]
 8004936:	e7ba      	b.n	80048ae <_printf_i+0x152>
 8004938:	680b      	ldr	r3, [r1, #0]
 800493a:	1d1a      	adds	r2, r3, #4
 800493c:	600a      	str	r2, [r1, #0]
 800493e:	681e      	ldr	r6, [r3, #0]
 8004940:	2100      	movs	r1, #0
 8004942:	4630      	mov	r0, r6
 8004944:	6862      	ldr	r2, [r4, #4]
 8004946:	f002 fb45 	bl	8006fd4 <memchr>
 800494a:	b108      	cbz	r0, 8004950 <_printf_i+0x1f4>
 800494c:	1b80      	subs	r0, r0, r6
 800494e:	6060      	str	r0, [r4, #4]
 8004950:	6863      	ldr	r3, [r4, #4]
 8004952:	6123      	str	r3, [r4, #16]
 8004954:	2300      	movs	r3, #0
 8004956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800495a:	e7a8      	b.n	80048ae <_printf_i+0x152>
 800495c:	4632      	mov	r2, r6
 800495e:	4649      	mov	r1, r9
 8004960:	4640      	mov	r0, r8
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	47d0      	blx	sl
 8004966:	3001      	adds	r0, #1
 8004968:	d0ab      	beq.n	80048c2 <_printf_i+0x166>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	079b      	lsls	r3, r3, #30
 800496e:	d413      	bmi.n	8004998 <_printf_i+0x23c>
 8004970:	68e0      	ldr	r0, [r4, #12]
 8004972:	9b03      	ldr	r3, [sp, #12]
 8004974:	4298      	cmp	r0, r3
 8004976:	bfb8      	it	lt
 8004978:	4618      	movlt	r0, r3
 800497a:	e7a4      	b.n	80048c6 <_printf_i+0x16a>
 800497c:	2301      	movs	r3, #1
 800497e:	4632      	mov	r2, r6
 8004980:	4649      	mov	r1, r9
 8004982:	4640      	mov	r0, r8
 8004984:	47d0      	blx	sl
 8004986:	3001      	adds	r0, #1
 8004988:	d09b      	beq.n	80048c2 <_printf_i+0x166>
 800498a:	3501      	adds	r5, #1
 800498c:	68e3      	ldr	r3, [r4, #12]
 800498e:	9903      	ldr	r1, [sp, #12]
 8004990:	1a5b      	subs	r3, r3, r1
 8004992:	42ab      	cmp	r3, r5
 8004994:	dcf2      	bgt.n	800497c <_printf_i+0x220>
 8004996:	e7eb      	b.n	8004970 <_printf_i+0x214>
 8004998:	2500      	movs	r5, #0
 800499a:	f104 0619 	add.w	r6, r4, #25
 800499e:	e7f5      	b.n	800498c <_printf_i+0x230>
 80049a0:	0800c32a 	.word	0x0800c32a
 80049a4:	0800c33b 	.word	0x0800c33b

080049a8 <_scanf_float>:
 80049a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ac:	b087      	sub	sp, #28
 80049ae:	9303      	str	r3, [sp, #12]
 80049b0:	688b      	ldr	r3, [r1, #8]
 80049b2:	4617      	mov	r7, r2
 80049b4:	1e5a      	subs	r2, r3, #1
 80049b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80049ba:	bf85      	ittet	hi
 80049bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80049c0:	195b      	addhi	r3, r3, r5
 80049c2:	2300      	movls	r3, #0
 80049c4:	9302      	strhi	r3, [sp, #8]
 80049c6:	bf88      	it	hi
 80049c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80049cc:	468b      	mov	fp, r1
 80049ce:	f04f 0500 	mov.w	r5, #0
 80049d2:	bf8c      	ite	hi
 80049d4:	608b      	strhi	r3, [r1, #8]
 80049d6:	9302      	strls	r3, [sp, #8]
 80049d8:	680b      	ldr	r3, [r1, #0]
 80049da:	4680      	mov	r8, r0
 80049dc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80049e0:	f84b 3b1c 	str.w	r3, [fp], #28
 80049e4:	460c      	mov	r4, r1
 80049e6:	465e      	mov	r6, fp
 80049e8:	46aa      	mov	sl, r5
 80049ea:	46a9      	mov	r9, r5
 80049ec:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80049f0:	9501      	str	r5, [sp, #4]
 80049f2:	68a2      	ldr	r2, [r4, #8]
 80049f4:	b152      	cbz	r2, 8004a0c <_scanf_float+0x64>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b4e      	cmp	r3, #78	; 0x4e
 80049fc:	d864      	bhi.n	8004ac8 <_scanf_float+0x120>
 80049fe:	2b40      	cmp	r3, #64	; 0x40
 8004a00:	d83c      	bhi.n	8004a7c <_scanf_float+0xd4>
 8004a02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004a06:	b2c8      	uxtb	r0, r1
 8004a08:	280e      	cmp	r0, #14
 8004a0a:	d93a      	bls.n	8004a82 <_scanf_float+0xda>
 8004a0c:	f1b9 0f00 	cmp.w	r9, #0
 8004a10:	d003      	beq.n	8004a1a <_scanf_float+0x72>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a1e:	f1ba 0f01 	cmp.w	sl, #1
 8004a22:	f200 8113 	bhi.w	8004c4c <_scanf_float+0x2a4>
 8004a26:	455e      	cmp	r6, fp
 8004a28:	f200 8105 	bhi.w	8004c36 <_scanf_float+0x28e>
 8004a2c:	2501      	movs	r5, #1
 8004a2e:	4628      	mov	r0, r5
 8004a30:	b007      	add	sp, #28
 8004a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004a3a:	2a0d      	cmp	r2, #13
 8004a3c:	d8e6      	bhi.n	8004a0c <_scanf_float+0x64>
 8004a3e:	a101      	add	r1, pc, #4	; (adr r1, 8004a44 <_scanf_float+0x9c>)
 8004a40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004a44:	08004b83 	.word	0x08004b83
 8004a48:	08004a0d 	.word	0x08004a0d
 8004a4c:	08004a0d 	.word	0x08004a0d
 8004a50:	08004a0d 	.word	0x08004a0d
 8004a54:	08004be3 	.word	0x08004be3
 8004a58:	08004bbb 	.word	0x08004bbb
 8004a5c:	08004a0d 	.word	0x08004a0d
 8004a60:	08004a0d 	.word	0x08004a0d
 8004a64:	08004b91 	.word	0x08004b91
 8004a68:	08004a0d 	.word	0x08004a0d
 8004a6c:	08004a0d 	.word	0x08004a0d
 8004a70:	08004a0d 	.word	0x08004a0d
 8004a74:	08004a0d 	.word	0x08004a0d
 8004a78:	08004b49 	.word	0x08004b49
 8004a7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004a80:	e7db      	b.n	8004a3a <_scanf_float+0x92>
 8004a82:	290e      	cmp	r1, #14
 8004a84:	d8c2      	bhi.n	8004a0c <_scanf_float+0x64>
 8004a86:	a001      	add	r0, pc, #4	; (adr r0, 8004a8c <_scanf_float+0xe4>)
 8004a88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004a8c:	08004b3b 	.word	0x08004b3b
 8004a90:	08004a0d 	.word	0x08004a0d
 8004a94:	08004b3b 	.word	0x08004b3b
 8004a98:	08004bcf 	.word	0x08004bcf
 8004a9c:	08004a0d 	.word	0x08004a0d
 8004aa0:	08004ae9 	.word	0x08004ae9
 8004aa4:	08004b25 	.word	0x08004b25
 8004aa8:	08004b25 	.word	0x08004b25
 8004aac:	08004b25 	.word	0x08004b25
 8004ab0:	08004b25 	.word	0x08004b25
 8004ab4:	08004b25 	.word	0x08004b25
 8004ab8:	08004b25 	.word	0x08004b25
 8004abc:	08004b25 	.word	0x08004b25
 8004ac0:	08004b25 	.word	0x08004b25
 8004ac4:	08004b25 	.word	0x08004b25
 8004ac8:	2b6e      	cmp	r3, #110	; 0x6e
 8004aca:	d809      	bhi.n	8004ae0 <_scanf_float+0x138>
 8004acc:	2b60      	cmp	r3, #96	; 0x60
 8004ace:	d8b2      	bhi.n	8004a36 <_scanf_float+0x8e>
 8004ad0:	2b54      	cmp	r3, #84	; 0x54
 8004ad2:	d077      	beq.n	8004bc4 <_scanf_float+0x21c>
 8004ad4:	2b59      	cmp	r3, #89	; 0x59
 8004ad6:	d199      	bne.n	8004a0c <_scanf_float+0x64>
 8004ad8:	2d07      	cmp	r5, #7
 8004ada:	d197      	bne.n	8004a0c <_scanf_float+0x64>
 8004adc:	2508      	movs	r5, #8
 8004ade:	e029      	b.n	8004b34 <_scanf_float+0x18c>
 8004ae0:	2b74      	cmp	r3, #116	; 0x74
 8004ae2:	d06f      	beq.n	8004bc4 <_scanf_float+0x21c>
 8004ae4:	2b79      	cmp	r3, #121	; 0x79
 8004ae6:	e7f6      	b.n	8004ad6 <_scanf_float+0x12e>
 8004ae8:	6821      	ldr	r1, [r4, #0]
 8004aea:	05c8      	lsls	r0, r1, #23
 8004aec:	d51a      	bpl.n	8004b24 <_scanf_float+0x17c>
 8004aee:	9b02      	ldr	r3, [sp, #8]
 8004af0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004af4:	6021      	str	r1, [r4, #0]
 8004af6:	f109 0901 	add.w	r9, r9, #1
 8004afa:	b11b      	cbz	r3, 8004b04 <_scanf_float+0x15c>
 8004afc:	3b01      	subs	r3, #1
 8004afe:	3201      	adds	r2, #1
 8004b00:	9302      	str	r3, [sp, #8]
 8004b02:	60a2      	str	r2, [r4, #8]
 8004b04:	68a3      	ldr	r3, [r4, #8]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	60a3      	str	r3, [r4, #8]
 8004b0a:	6923      	ldr	r3, [r4, #16]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	6123      	str	r3, [r4, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	607b      	str	r3, [r7, #4]
 8004b18:	f340 8084 	ble.w	8004c24 <_scanf_float+0x27c>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	603b      	str	r3, [r7, #0]
 8004b22:	e766      	b.n	80049f2 <_scanf_float+0x4a>
 8004b24:	eb1a 0f05 	cmn.w	sl, r5
 8004b28:	f47f af70 	bne.w	8004a0c <_scanf_float+0x64>
 8004b2c:	6822      	ldr	r2, [r4, #0]
 8004b2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004b32:	6022      	str	r2, [r4, #0]
 8004b34:	f806 3b01 	strb.w	r3, [r6], #1
 8004b38:	e7e4      	b.n	8004b04 <_scanf_float+0x15c>
 8004b3a:	6822      	ldr	r2, [r4, #0]
 8004b3c:	0610      	lsls	r0, r2, #24
 8004b3e:	f57f af65 	bpl.w	8004a0c <_scanf_float+0x64>
 8004b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b46:	e7f4      	b.n	8004b32 <_scanf_float+0x18a>
 8004b48:	f1ba 0f00 	cmp.w	sl, #0
 8004b4c:	d10e      	bne.n	8004b6c <_scanf_float+0x1c4>
 8004b4e:	f1b9 0f00 	cmp.w	r9, #0
 8004b52:	d10e      	bne.n	8004b72 <_scanf_float+0x1ca>
 8004b54:	6822      	ldr	r2, [r4, #0]
 8004b56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b5e:	d108      	bne.n	8004b72 <_scanf_float+0x1ca>
 8004b60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b64:	f04f 0a01 	mov.w	sl, #1
 8004b68:	6022      	str	r2, [r4, #0]
 8004b6a:	e7e3      	b.n	8004b34 <_scanf_float+0x18c>
 8004b6c:	f1ba 0f02 	cmp.w	sl, #2
 8004b70:	d055      	beq.n	8004c1e <_scanf_float+0x276>
 8004b72:	2d01      	cmp	r5, #1
 8004b74:	d002      	beq.n	8004b7c <_scanf_float+0x1d4>
 8004b76:	2d04      	cmp	r5, #4
 8004b78:	f47f af48 	bne.w	8004a0c <_scanf_float+0x64>
 8004b7c:	3501      	adds	r5, #1
 8004b7e:	b2ed      	uxtb	r5, r5
 8004b80:	e7d8      	b.n	8004b34 <_scanf_float+0x18c>
 8004b82:	f1ba 0f01 	cmp.w	sl, #1
 8004b86:	f47f af41 	bne.w	8004a0c <_scanf_float+0x64>
 8004b8a:	f04f 0a02 	mov.w	sl, #2
 8004b8e:	e7d1      	b.n	8004b34 <_scanf_float+0x18c>
 8004b90:	b97d      	cbnz	r5, 8004bb2 <_scanf_float+0x20a>
 8004b92:	f1b9 0f00 	cmp.w	r9, #0
 8004b96:	f47f af3c 	bne.w	8004a12 <_scanf_float+0x6a>
 8004b9a:	6822      	ldr	r2, [r4, #0]
 8004b9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004ba0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004ba4:	f47f af39 	bne.w	8004a1a <_scanf_float+0x72>
 8004ba8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004bac:	2501      	movs	r5, #1
 8004bae:	6022      	str	r2, [r4, #0]
 8004bb0:	e7c0      	b.n	8004b34 <_scanf_float+0x18c>
 8004bb2:	2d03      	cmp	r5, #3
 8004bb4:	d0e2      	beq.n	8004b7c <_scanf_float+0x1d4>
 8004bb6:	2d05      	cmp	r5, #5
 8004bb8:	e7de      	b.n	8004b78 <_scanf_float+0x1d0>
 8004bba:	2d02      	cmp	r5, #2
 8004bbc:	f47f af26 	bne.w	8004a0c <_scanf_float+0x64>
 8004bc0:	2503      	movs	r5, #3
 8004bc2:	e7b7      	b.n	8004b34 <_scanf_float+0x18c>
 8004bc4:	2d06      	cmp	r5, #6
 8004bc6:	f47f af21 	bne.w	8004a0c <_scanf_float+0x64>
 8004bca:	2507      	movs	r5, #7
 8004bcc:	e7b2      	b.n	8004b34 <_scanf_float+0x18c>
 8004bce:	6822      	ldr	r2, [r4, #0]
 8004bd0:	0591      	lsls	r1, r2, #22
 8004bd2:	f57f af1b 	bpl.w	8004a0c <_scanf_float+0x64>
 8004bd6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004bda:	6022      	str	r2, [r4, #0]
 8004bdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8004be0:	e7a8      	b.n	8004b34 <_scanf_float+0x18c>
 8004be2:	6822      	ldr	r2, [r4, #0]
 8004be4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004be8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004bec:	d006      	beq.n	8004bfc <_scanf_float+0x254>
 8004bee:	0550      	lsls	r0, r2, #21
 8004bf0:	f57f af0c 	bpl.w	8004a0c <_scanf_float+0x64>
 8004bf4:	f1b9 0f00 	cmp.w	r9, #0
 8004bf8:	f43f af0f 	beq.w	8004a1a <_scanf_float+0x72>
 8004bfc:	0591      	lsls	r1, r2, #22
 8004bfe:	bf58      	it	pl
 8004c00:	9901      	ldrpl	r1, [sp, #4]
 8004c02:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004c06:	bf58      	it	pl
 8004c08:	eba9 0101 	subpl.w	r1, r9, r1
 8004c0c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004c10:	f04f 0900 	mov.w	r9, #0
 8004c14:	bf58      	it	pl
 8004c16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004c1a:	6022      	str	r2, [r4, #0]
 8004c1c:	e78a      	b.n	8004b34 <_scanf_float+0x18c>
 8004c1e:	f04f 0a03 	mov.w	sl, #3
 8004c22:	e787      	b.n	8004b34 <_scanf_float+0x18c>
 8004c24:	4639      	mov	r1, r7
 8004c26:	4640      	mov	r0, r8
 8004c28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004c2c:	4798      	blx	r3
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	f43f aedf 	beq.w	80049f2 <_scanf_float+0x4a>
 8004c34:	e6ea      	b.n	8004a0c <_scanf_float+0x64>
 8004c36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c3a:	463a      	mov	r2, r7
 8004c3c:	4640      	mov	r0, r8
 8004c3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c42:	4798      	blx	r3
 8004c44:	6923      	ldr	r3, [r4, #16]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	6123      	str	r3, [r4, #16]
 8004c4a:	e6ec      	b.n	8004a26 <_scanf_float+0x7e>
 8004c4c:	1e6b      	subs	r3, r5, #1
 8004c4e:	2b06      	cmp	r3, #6
 8004c50:	d825      	bhi.n	8004c9e <_scanf_float+0x2f6>
 8004c52:	2d02      	cmp	r5, #2
 8004c54:	d836      	bhi.n	8004cc4 <_scanf_float+0x31c>
 8004c56:	455e      	cmp	r6, fp
 8004c58:	f67f aee8 	bls.w	8004a2c <_scanf_float+0x84>
 8004c5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c60:	463a      	mov	r2, r7
 8004c62:	4640      	mov	r0, r8
 8004c64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c68:	4798      	blx	r3
 8004c6a:	6923      	ldr	r3, [r4, #16]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	6123      	str	r3, [r4, #16]
 8004c70:	e7f1      	b.n	8004c56 <_scanf_float+0x2ae>
 8004c72:	9802      	ldr	r0, [sp, #8]
 8004c74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c78:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004c7c:	463a      	mov	r2, r7
 8004c7e:	9002      	str	r0, [sp, #8]
 8004c80:	4640      	mov	r0, r8
 8004c82:	4798      	blx	r3
 8004c84:	6923      	ldr	r3, [r4, #16]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	6123      	str	r3, [r4, #16]
 8004c8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c8e:	fa5f fa8a 	uxtb.w	sl, sl
 8004c92:	f1ba 0f02 	cmp.w	sl, #2
 8004c96:	d1ec      	bne.n	8004c72 <_scanf_float+0x2ca>
 8004c98:	3d03      	subs	r5, #3
 8004c9a:	b2ed      	uxtb	r5, r5
 8004c9c:	1b76      	subs	r6, r6, r5
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	05da      	lsls	r2, r3, #23
 8004ca2:	d52f      	bpl.n	8004d04 <_scanf_float+0x35c>
 8004ca4:	055b      	lsls	r3, r3, #21
 8004ca6:	d510      	bpl.n	8004cca <_scanf_float+0x322>
 8004ca8:	455e      	cmp	r6, fp
 8004caa:	f67f aebf 	bls.w	8004a2c <_scanf_float+0x84>
 8004cae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cb2:	463a      	mov	r2, r7
 8004cb4:	4640      	mov	r0, r8
 8004cb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004cba:	4798      	blx	r3
 8004cbc:	6923      	ldr	r3, [r4, #16]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	6123      	str	r3, [r4, #16]
 8004cc2:	e7f1      	b.n	8004ca8 <_scanf_float+0x300>
 8004cc4:	46aa      	mov	sl, r5
 8004cc6:	9602      	str	r6, [sp, #8]
 8004cc8:	e7df      	b.n	8004c8a <_scanf_float+0x2e2>
 8004cca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004cce:	6923      	ldr	r3, [r4, #16]
 8004cd0:	2965      	cmp	r1, #101	; 0x65
 8004cd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8004cd6:	f106 35ff 	add.w	r5, r6, #4294967295
 8004cda:	6123      	str	r3, [r4, #16]
 8004cdc:	d00c      	beq.n	8004cf8 <_scanf_float+0x350>
 8004cde:	2945      	cmp	r1, #69	; 0x45
 8004ce0:	d00a      	beq.n	8004cf8 <_scanf_float+0x350>
 8004ce2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ce6:	463a      	mov	r2, r7
 8004ce8:	4640      	mov	r0, r8
 8004cea:	4798      	blx	r3
 8004cec:	6923      	ldr	r3, [r4, #16]
 8004cee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	1eb5      	subs	r5, r6, #2
 8004cf6:	6123      	str	r3, [r4, #16]
 8004cf8:	463a      	mov	r2, r7
 8004cfa:	4640      	mov	r0, r8
 8004cfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d00:	4798      	blx	r3
 8004d02:	462e      	mov	r6, r5
 8004d04:	6825      	ldr	r5, [r4, #0]
 8004d06:	f015 0510 	ands.w	r5, r5, #16
 8004d0a:	d159      	bne.n	8004dc0 <_scanf_float+0x418>
 8004d0c:	7035      	strb	r5, [r6, #0]
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d18:	d11c      	bne.n	8004d54 <_scanf_float+0x3ac>
 8004d1a:	9b01      	ldr	r3, [sp, #4]
 8004d1c:	454b      	cmp	r3, r9
 8004d1e:	eba3 0209 	sub.w	r2, r3, r9
 8004d22:	d124      	bne.n	8004d6e <_scanf_float+0x3c6>
 8004d24:	2200      	movs	r2, #0
 8004d26:	4659      	mov	r1, fp
 8004d28:	4640      	mov	r0, r8
 8004d2a:	f000 fec5 	bl	8005ab8 <_strtod_r>
 8004d2e:	f8d4 c000 	ldr.w	ip, [r4]
 8004d32:	9b03      	ldr	r3, [sp, #12]
 8004d34:	f01c 0f02 	tst.w	ip, #2
 8004d38:	4606      	mov	r6, r0
 8004d3a:	460f      	mov	r7, r1
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	d021      	beq.n	8004d84 <_scanf_float+0x3dc>
 8004d40:	9903      	ldr	r1, [sp, #12]
 8004d42:	1d1a      	adds	r2, r3, #4
 8004d44:	600a      	str	r2, [r1, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	e9c3 6700 	strd	r6, r7, [r3]
 8004d4c:	68e3      	ldr	r3, [r4, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60e3      	str	r3, [r4, #12]
 8004d52:	e66c      	b.n	8004a2e <_scanf_float+0x86>
 8004d54:	9b04      	ldr	r3, [sp, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0e4      	beq.n	8004d24 <_scanf_float+0x37c>
 8004d5a:	9905      	ldr	r1, [sp, #20]
 8004d5c:	230a      	movs	r3, #10
 8004d5e:	462a      	mov	r2, r5
 8004d60:	4640      	mov	r0, r8
 8004d62:	3101      	adds	r1, #1
 8004d64:	f000 ff34 	bl	8005bd0 <_strtol_r>
 8004d68:	9b04      	ldr	r3, [sp, #16]
 8004d6a:	9e05      	ldr	r6, [sp, #20]
 8004d6c:	1ac2      	subs	r2, r0, r3
 8004d6e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004d72:	429e      	cmp	r6, r3
 8004d74:	bf28      	it	cs
 8004d76:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	4911      	ldr	r1, [pc, #68]	; (8004dc4 <_scanf_float+0x41c>)
 8004d7e:	f000 f85d 	bl	8004e3c <siprintf>
 8004d82:	e7cf      	b.n	8004d24 <_scanf_float+0x37c>
 8004d84:	f01c 0f04 	tst.w	ip, #4
 8004d88:	f103 0e04 	add.w	lr, r3, #4
 8004d8c:	d003      	beq.n	8004d96 <_scanf_float+0x3ee>
 8004d8e:	9903      	ldr	r1, [sp, #12]
 8004d90:	f8c1 e000 	str.w	lr, [r1]
 8004d94:	e7d7      	b.n	8004d46 <_scanf_float+0x39e>
 8004d96:	9a03      	ldr	r2, [sp, #12]
 8004d98:	f8c2 e000 	str.w	lr, [r2]
 8004d9c:	f8d3 8000 	ldr.w	r8, [r3]
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	f7fb fe32 	bl	8000a0c <__aeabi_dcmpun>
 8004da8:	b128      	cbz	r0, 8004db6 <_scanf_float+0x40e>
 8004daa:	4807      	ldr	r0, [pc, #28]	; (8004dc8 <_scanf_float+0x420>)
 8004dac:	f000 f80e 	bl	8004dcc <nanf>
 8004db0:	f8c8 0000 	str.w	r0, [r8]
 8004db4:	e7ca      	b.n	8004d4c <_scanf_float+0x3a4>
 8004db6:	4630      	mov	r0, r6
 8004db8:	4639      	mov	r1, r7
 8004dba:	f7fb fe85 	bl	8000ac8 <__aeabi_d2f>
 8004dbe:	e7f7      	b.n	8004db0 <_scanf_float+0x408>
 8004dc0:	2500      	movs	r5, #0
 8004dc2:	e634      	b.n	8004a2e <_scanf_float+0x86>
 8004dc4:	0800c34c 	.word	0x0800c34c
 8004dc8:	0800c768 	.word	0x0800c768

08004dcc <nanf>:
 8004dcc:	4800      	ldr	r0, [pc, #0]	; (8004dd0 <nanf+0x4>)
 8004dce:	4770      	bx	lr
 8004dd0:	7fc00000 	.word	0x7fc00000

08004dd4 <sniprintf>:
 8004dd4:	b40c      	push	{r2, r3}
 8004dd6:	b530      	push	{r4, r5, lr}
 8004dd8:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <sniprintf+0x64>)
 8004dda:	1e0c      	subs	r4, r1, #0
 8004ddc:	681d      	ldr	r5, [r3, #0]
 8004dde:	b09d      	sub	sp, #116	; 0x74
 8004de0:	da08      	bge.n	8004df4 <sniprintf+0x20>
 8004de2:	238b      	movs	r3, #139	; 0x8b
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295
 8004de8:	602b      	str	r3, [r5, #0]
 8004dea:	b01d      	add	sp, #116	; 0x74
 8004dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004df0:	b002      	add	sp, #8
 8004df2:	4770      	bx	lr
 8004df4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004df8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004dfc:	bf0c      	ite	eq
 8004dfe:	4623      	moveq	r3, r4
 8004e00:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004e04:	9304      	str	r3, [sp, #16]
 8004e06:	9307      	str	r3, [sp, #28]
 8004e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e0c:	9002      	str	r0, [sp, #8]
 8004e0e:	9006      	str	r0, [sp, #24]
 8004e10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004e14:	4628      	mov	r0, r5
 8004e16:	ab21      	add	r3, sp, #132	; 0x84
 8004e18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004e1a:	a902      	add	r1, sp, #8
 8004e1c:	9301      	str	r3, [sp, #4]
 8004e1e:	f002 febd 	bl	8007b9c <_svfiprintf_r>
 8004e22:	1c43      	adds	r3, r0, #1
 8004e24:	bfbc      	itt	lt
 8004e26:	238b      	movlt	r3, #139	; 0x8b
 8004e28:	602b      	strlt	r3, [r5, #0]
 8004e2a:	2c00      	cmp	r4, #0
 8004e2c:	d0dd      	beq.n	8004dea <sniprintf+0x16>
 8004e2e:	2200      	movs	r2, #0
 8004e30:	9b02      	ldr	r3, [sp, #8]
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	e7d9      	b.n	8004dea <sniprintf+0x16>
 8004e36:	bf00      	nop
 8004e38:	20000024 	.word	0x20000024

08004e3c <siprintf>:
 8004e3c:	b40e      	push	{r1, r2, r3}
 8004e3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e42:	b500      	push	{lr}
 8004e44:	b09c      	sub	sp, #112	; 0x70
 8004e46:	ab1d      	add	r3, sp, #116	; 0x74
 8004e48:	9002      	str	r0, [sp, #8]
 8004e4a:	9006      	str	r0, [sp, #24]
 8004e4c:	9107      	str	r1, [sp, #28]
 8004e4e:	9104      	str	r1, [sp, #16]
 8004e50:	4808      	ldr	r0, [pc, #32]	; (8004e74 <siprintf+0x38>)
 8004e52:	4909      	ldr	r1, [pc, #36]	; (8004e78 <siprintf+0x3c>)
 8004e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e58:	9105      	str	r1, [sp, #20]
 8004e5a:	6800      	ldr	r0, [r0, #0]
 8004e5c:	a902      	add	r1, sp, #8
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	f002 fe9c 	bl	8007b9c <_svfiprintf_r>
 8004e64:	2200      	movs	r2, #0
 8004e66:	9b02      	ldr	r3, [sp, #8]
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	b01c      	add	sp, #112	; 0x70
 8004e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e70:	b003      	add	sp, #12
 8004e72:	4770      	bx	lr
 8004e74:	20000024 	.word	0x20000024
 8004e78:	ffff0208 	.word	0xffff0208

08004e7c <strcpy>:
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e82:	f803 2b01 	strb.w	r2, [r3], #1
 8004e86:	2a00      	cmp	r2, #0
 8004e88:	d1f9      	bne.n	8004e7e <strcpy+0x2>
 8004e8a:	4770      	bx	lr

08004e8c <sulp>:
 8004e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e90:	460f      	mov	r7, r1
 8004e92:	4690      	mov	r8, r2
 8004e94:	f002 fc2a 	bl	80076ec <__ulp>
 8004e98:	4604      	mov	r4, r0
 8004e9a:	460d      	mov	r5, r1
 8004e9c:	f1b8 0f00 	cmp.w	r8, #0
 8004ea0:	d011      	beq.n	8004ec6 <sulp+0x3a>
 8004ea2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004ea6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	dd0b      	ble.n	8004ec6 <sulp+0x3a>
 8004eae:	2400      	movs	r4, #0
 8004eb0:	051b      	lsls	r3, r3, #20
 8004eb2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004eb6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004eba:	4622      	mov	r2, r4
 8004ebc:	462b      	mov	r3, r5
 8004ebe:	f7fb fb0b 	bl	80004d8 <__aeabi_dmul>
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	460d      	mov	r5, r1
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	4629      	mov	r1, r5
 8004eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004ed0 <_strtod_l>:
 8004ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed4:	469b      	mov	fp, r3
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	b0a1      	sub	sp, #132	; 0x84
 8004eda:	931c      	str	r3, [sp, #112]	; 0x70
 8004edc:	4ba1      	ldr	r3, [pc, #644]	; (8005164 <_strtod_l+0x294>)
 8004ede:	4682      	mov	sl, r0
 8004ee0:	681f      	ldr	r7, [r3, #0]
 8004ee2:	460e      	mov	r6, r1
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ee8:	f7fb f932 	bl	8000150 <strlen>
 8004eec:	f04f 0800 	mov.w	r8, #0
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	f04f 0900 	mov.w	r9, #0
 8004ef6:	961b      	str	r6, [sp, #108]	; 0x6c
 8004ef8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004efa:	781a      	ldrb	r2, [r3, #0]
 8004efc:	2a2b      	cmp	r2, #43	; 0x2b
 8004efe:	d04c      	beq.n	8004f9a <_strtod_l+0xca>
 8004f00:	d83a      	bhi.n	8004f78 <_strtod_l+0xa8>
 8004f02:	2a0d      	cmp	r2, #13
 8004f04:	d833      	bhi.n	8004f6e <_strtod_l+0x9e>
 8004f06:	2a08      	cmp	r2, #8
 8004f08:	d833      	bhi.n	8004f72 <_strtod_l+0xa2>
 8004f0a:	2a00      	cmp	r2, #0
 8004f0c:	d03d      	beq.n	8004f8a <_strtod_l+0xba>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	930c      	str	r3, [sp, #48]	; 0x30
 8004f12:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004f14:	782b      	ldrb	r3, [r5, #0]
 8004f16:	2b30      	cmp	r3, #48	; 0x30
 8004f18:	f040 80af 	bne.w	800507a <_strtod_l+0x1aa>
 8004f1c:	786b      	ldrb	r3, [r5, #1]
 8004f1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004f22:	2b58      	cmp	r3, #88	; 0x58
 8004f24:	d16c      	bne.n	8005000 <_strtod_l+0x130>
 8004f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f28:	4650      	mov	r0, sl
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	ab1c      	add	r3, sp, #112	; 0x70
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	4a8d      	ldr	r2, [pc, #564]	; (8005168 <_strtod_l+0x298>)
 8004f32:	f8cd b008 	str.w	fp, [sp, #8]
 8004f36:	ab1d      	add	r3, sp, #116	; 0x74
 8004f38:	a91b      	add	r1, sp, #108	; 0x6c
 8004f3a:	f001 fd2f 	bl	800699c <__gethex>
 8004f3e:	f010 0607 	ands.w	r6, r0, #7
 8004f42:	4604      	mov	r4, r0
 8004f44:	d005      	beq.n	8004f52 <_strtod_l+0x82>
 8004f46:	2e06      	cmp	r6, #6
 8004f48:	d129      	bne.n	8004f9e <_strtod_l+0xce>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	3501      	adds	r5, #1
 8004f4e:	951b      	str	r5, [sp, #108]	; 0x6c
 8004f50:	930c      	str	r3, [sp, #48]	; 0x30
 8004f52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f040 8596 	bne.w	8005a86 <_strtod_l+0xbb6>
 8004f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f5c:	b1d3      	cbz	r3, 8004f94 <_strtod_l+0xc4>
 8004f5e:	4642      	mov	r2, r8
 8004f60:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f64:	4610      	mov	r0, r2
 8004f66:	4619      	mov	r1, r3
 8004f68:	b021      	add	sp, #132	; 0x84
 8004f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6e:	2a20      	cmp	r2, #32
 8004f70:	d1cd      	bne.n	8004f0e <_strtod_l+0x3e>
 8004f72:	3301      	adds	r3, #1
 8004f74:	931b      	str	r3, [sp, #108]	; 0x6c
 8004f76:	e7bf      	b.n	8004ef8 <_strtod_l+0x28>
 8004f78:	2a2d      	cmp	r2, #45	; 0x2d
 8004f7a:	d1c8      	bne.n	8004f0e <_strtod_l+0x3e>
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	920c      	str	r2, [sp, #48]	; 0x30
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	921b      	str	r2, [sp, #108]	; 0x6c
 8004f84:	785b      	ldrb	r3, [r3, #1]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1c3      	bne.n	8004f12 <_strtod_l+0x42>
 8004f8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f8c:	961b      	str	r6, [sp, #108]	; 0x6c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f040 8577 	bne.w	8005a82 <_strtod_l+0xbb2>
 8004f94:	4642      	mov	r2, r8
 8004f96:	464b      	mov	r3, r9
 8004f98:	e7e4      	b.n	8004f64 <_strtod_l+0x94>
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	e7ef      	b.n	8004f7e <_strtod_l+0xae>
 8004f9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004fa0:	b13a      	cbz	r2, 8004fb2 <_strtod_l+0xe2>
 8004fa2:	2135      	movs	r1, #53	; 0x35
 8004fa4:	a81e      	add	r0, sp, #120	; 0x78
 8004fa6:	f002 fca5 	bl	80078f4 <__copybits>
 8004faa:	4650      	mov	r0, sl
 8004fac:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004fae:	f002 f86d 	bl	800708c <_Bfree>
 8004fb2:	3e01      	subs	r6, #1
 8004fb4:	2e05      	cmp	r6, #5
 8004fb6:	d807      	bhi.n	8004fc8 <_strtod_l+0xf8>
 8004fb8:	e8df f006 	tbb	[pc, r6]
 8004fbc:	1d180b0e 	.word	0x1d180b0e
 8004fc0:	030e      	.short	0x030e
 8004fc2:	f04f 0900 	mov.w	r9, #0
 8004fc6:	46c8      	mov	r8, r9
 8004fc8:	0721      	lsls	r1, r4, #28
 8004fca:	d5c2      	bpl.n	8004f52 <_strtod_l+0x82>
 8004fcc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004fd0:	e7bf      	b.n	8004f52 <_strtod_l+0x82>
 8004fd2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8004fd6:	e7f7      	b.n	8004fc8 <_strtod_l+0xf8>
 8004fd8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004fda:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8004fde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004fe2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004fe6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004fea:	e7ed      	b.n	8004fc8 <_strtod_l+0xf8>
 8004fec:	f04f 0800 	mov.w	r8, #0
 8004ff0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800516c <_strtod_l+0x29c>
 8004ff4:	e7e8      	b.n	8004fc8 <_strtod_l+0xf8>
 8004ff6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004ffa:	f04f 38ff 	mov.w	r8, #4294967295
 8004ffe:	e7e3      	b.n	8004fc8 <_strtod_l+0xf8>
 8005000:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	921b      	str	r2, [sp, #108]	; 0x6c
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	2b30      	cmp	r3, #48	; 0x30
 800500a:	d0f9      	beq.n	8005000 <_strtod_l+0x130>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0a0      	beq.n	8004f52 <_strtod_l+0x82>
 8005010:	2301      	movs	r3, #1
 8005012:	9307      	str	r3, [sp, #28]
 8005014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005016:	220a      	movs	r2, #10
 8005018:	9308      	str	r3, [sp, #32]
 800501a:	2300      	movs	r3, #0
 800501c:	469b      	mov	fp, r3
 800501e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005022:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005024:	7805      	ldrb	r5, [r0, #0]
 8005026:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800502a:	b2d9      	uxtb	r1, r3
 800502c:	2909      	cmp	r1, #9
 800502e:	d926      	bls.n	800507e <_strtod_l+0x1ae>
 8005030:	4622      	mov	r2, r4
 8005032:	4639      	mov	r1, r7
 8005034:	f002 fec8 	bl	8007dc8 <strncmp>
 8005038:	2800      	cmp	r0, #0
 800503a:	d032      	beq.n	80050a2 <_strtod_l+0x1d2>
 800503c:	2000      	movs	r0, #0
 800503e:	462b      	mov	r3, r5
 8005040:	465c      	mov	r4, fp
 8005042:	4602      	mov	r2, r0
 8005044:	9004      	str	r0, [sp, #16]
 8005046:	2b65      	cmp	r3, #101	; 0x65
 8005048:	d001      	beq.n	800504e <_strtod_l+0x17e>
 800504a:	2b45      	cmp	r3, #69	; 0x45
 800504c:	d113      	bne.n	8005076 <_strtod_l+0x1a6>
 800504e:	b91c      	cbnz	r4, 8005058 <_strtod_l+0x188>
 8005050:	9b07      	ldr	r3, [sp, #28]
 8005052:	4303      	orrs	r3, r0
 8005054:	d099      	beq.n	8004f8a <_strtod_l+0xba>
 8005056:	2400      	movs	r4, #0
 8005058:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800505a:	1c73      	adds	r3, r6, #1
 800505c:	931b      	str	r3, [sp, #108]	; 0x6c
 800505e:	7873      	ldrb	r3, [r6, #1]
 8005060:	2b2b      	cmp	r3, #43	; 0x2b
 8005062:	d078      	beq.n	8005156 <_strtod_l+0x286>
 8005064:	2b2d      	cmp	r3, #45	; 0x2d
 8005066:	d07b      	beq.n	8005160 <_strtod_l+0x290>
 8005068:	2700      	movs	r7, #0
 800506a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800506e:	2909      	cmp	r1, #9
 8005070:	f240 8082 	bls.w	8005178 <_strtod_l+0x2a8>
 8005074:	961b      	str	r6, [sp, #108]	; 0x6c
 8005076:	2500      	movs	r5, #0
 8005078:	e09e      	b.n	80051b8 <_strtod_l+0x2e8>
 800507a:	2300      	movs	r3, #0
 800507c:	e7c9      	b.n	8005012 <_strtod_l+0x142>
 800507e:	f1bb 0f08 	cmp.w	fp, #8
 8005082:	bfd5      	itete	le
 8005084:	9906      	ldrle	r1, [sp, #24]
 8005086:	9905      	ldrgt	r1, [sp, #20]
 8005088:	fb02 3301 	mlale	r3, r2, r1, r3
 800508c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005090:	f100 0001 	add.w	r0, r0, #1
 8005094:	bfd4      	ite	le
 8005096:	9306      	strle	r3, [sp, #24]
 8005098:	9305      	strgt	r3, [sp, #20]
 800509a:	f10b 0b01 	add.w	fp, fp, #1
 800509e:	901b      	str	r0, [sp, #108]	; 0x6c
 80050a0:	e7bf      	b.n	8005022 <_strtod_l+0x152>
 80050a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050a4:	191a      	adds	r2, r3, r4
 80050a6:	921b      	str	r2, [sp, #108]	; 0x6c
 80050a8:	5d1b      	ldrb	r3, [r3, r4]
 80050aa:	f1bb 0f00 	cmp.w	fp, #0
 80050ae:	d036      	beq.n	800511e <_strtod_l+0x24e>
 80050b0:	465c      	mov	r4, fp
 80050b2:	9004      	str	r0, [sp, #16]
 80050b4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80050b8:	2a09      	cmp	r2, #9
 80050ba:	d912      	bls.n	80050e2 <_strtod_l+0x212>
 80050bc:	2201      	movs	r2, #1
 80050be:	e7c2      	b.n	8005046 <_strtod_l+0x176>
 80050c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050c2:	3001      	adds	r0, #1
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	921b      	str	r2, [sp, #108]	; 0x6c
 80050c8:	785b      	ldrb	r3, [r3, #1]
 80050ca:	2b30      	cmp	r3, #48	; 0x30
 80050cc:	d0f8      	beq.n	80050c0 <_strtod_l+0x1f0>
 80050ce:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80050d2:	2a08      	cmp	r2, #8
 80050d4:	f200 84dc 	bhi.w	8005a90 <_strtod_l+0xbc0>
 80050d8:	9004      	str	r0, [sp, #16]
 80050da:	2000      	movs	r0, #0
 80050dc:	4604      	mov	r4, r0
 80050de:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80050e0:	9208      	str	r2, [sp, #32]
 80050e2:	3b30      	subs	r3, #48	; 0x30
 80050e4:	f100 0201 	add.w	r2, r0, #1
 80050e8:	d013      	beq.n	8005112 <_strtod_l+0x242>
 80050ea:	9904      	ldr	r1, [sp, #16]
 80050ec:	1905      	adds	r5, r0, r4
 80050ee:	4411      	add	r1, r2
 80050f0:	9104      	str	r1, [sp, #16]
 80050f2:	4622      	mov	r2, r4
 80050f4:	210a      	movs	r1, #10
 80050f6:	42aa      	cmp	r2, r5
 80050f8:	d113      	bne.n	8005122 <_strtod_l+0x252>
 80050fa:	1822      	adds	r2, r4, r0
 80050fc:	2a08      	cmp	r2, #8
 80050fe:	f104 0401 	add.w	r4, r4, #1
 8005102:	4404      	add	r4, r0
 8005104:	dc1b      	bgt.n	800513e <_strtod_l+0x26e>
 8005106:	220a      	movs	r2, #10
 8005108:	9906      	ldr	r1, [sp, #24]
 800510a:	fb02 3301 	mla	r3, r2, r1, r3
 800510e:	9306      	str	r3, [sp, #24]
 8005110:	2200      	movs	r2, #0
 8005112:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005114:	4610      	mov	r0, r2
 8005116:	1c59      	adds	r1, r3, #1
 8005118:	911b      	str	r1, [sp, #108]	; 0x6c
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	e7ca      	b.n	80050b4 <_strtod_l+0x1e4>
 800511e:	4658      	mov	r0, fp
 8005120:	e7d3      	b.n	80050ca <_strtod_l+0x1fa>
 8005122:	2a08      	cmp	r2, #8
 8005124:	dc04      	bgt.n	8005130 <_strtod_l+0x260>
 8005126:	9f06      	ldr	r7, [sp, #24]
 8005128:	434f      	muls	r7, r1
 800512a:	9706      	str	r7, [sp, #24]
 800512c:	3201      	adds	r2, #1
 800512e:	e7e2      	b.n	80050f6 <_strtod_l+0x226>
 8005130:	1c57      	adds	r7, r2, #1
 8005132:	2f10      	cmp	r7, #16
 8005134:	bfde      	ittt	le
 8005136:	9f05      	ldrle	r7, [sp, #20]
 8005138:	434f      	mulle	r7, r1
 800513a:	9705      	strle	r7, [sp, #20]
 800513c:	e7f6      	b.n	800512c <_strtod_l+0x25c>
 800513e:	2c10      	cmp	r4, #16
 8005140:	bfdf      	itttt	le
 8005142:	220a      	movle	r2, #10
 8005144:	9905      	ldrle	r1, [sp, #20]
 8005146:	fb02 3301 	mlale	r3, r2, r1, r3
 800514a:	9305      	strle	r3, [sp, #20]
 800514c:	e7e0      	b.n	8005110 <_strtod_l+0x240>
 800514e:	2300      	movs	r3, #0
 8005150:	2201      	movs	r2, #1
 8005152:	9304      	str	r3, [sp, #16]
 8005154:	e77c      	b.n	8005050 <_strtod_l+0x180>
 8005156:	2700      	movs	r7, #0
 8005158:	1cb3      	adds	r3, r6, #2
 800515a:	931b      	str	r3, [sp, #108]	; 0x6c
 800515c:	78b3      	ldrb	r3, [r6, #2]
 800515e:	e784      	b.n	800506a <_strtod_l+0x19a>
 8005160:	2701      	movs	r7, #1
 8005162:	e7f9      	b.n	8005158 <_strtod_l+0x288>
 8005164:	0800c5a8 	.word	0x0800c5a8
 8005168:	0800c354 	.word	0x0800c354
 800516c:	7ff00000 	.word	0x7ff00000
 8005170:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005172:	1c59      	adds	r1, r3, #1
 8005174:	911b      	str	r1, [sp, #108]	; 0x6c
 8005176:	785b      	ldrb	r3, [r3, #1]
 8005178:	2b30      	cmp	r3, #48	; 0x30
 800517a:	d0f9      	beq.n	8005170 <_strtod_l+0x2a0>
 800517c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005180:	2908      	cmp	r1, #8
 8005182:	f63f af78 	bhi.w	8005076 <_strtod_l+0x1a6>
 8005186:	f04f 0e0a 	mov.w	lr, #10
 800518a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800518e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005190:	9309      	str	r3, [sp, #36]	; 0x24
 8005192:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005194:	1c59      	adds	r1, r3, #1
 8005196:	911b      	str	r1, [sp, #108]	; 0x6c
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800519e:	2d09      	cmp	r5, #9
 80051a0:	d935      	bls.n	800520e <_strtod_l+0x33e>
 80051a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80051a4:	1b49      	subs	r1, r1, r5
 80051a6:	2908      	cmp	r1, #8
 80051a8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80051ac:	dc02      	bgt.n	80051b4 <_strtod_l+0x2e4>
 80051ae:	4565      	cmp	r5, ip
 80051b0:	bfa8      	it	ge
 80051b2:	4665      	movge	r5, ip
 80051b4:	b107      	cbz	r7, 80051b8 <_strtod_l+0x2e8>
 80051b6:	426d      	negs	r5, r5
 80051b8:	2c00      	cmp	r4, #0
 80051ba:	d14c      	bne.n	8005256 <_strtod_l+0x386>
 80051bc:	9907      	ldr	r1, [sp, #28]
 80051be:	4301      	orrs	r1, r0
 80051c0:	f47f aec7 	bne.w	8004f52 <_strtod_l+0x82>
 80051c4:	2a00      	cmp	r2, #0
 80051c6:	f47f aee0 	bne.w	8004f8a <_strtod_l+0xba>
 80051ca:	2b69      	cmp	r3, #105	; 0x69
 80051cc:	d026      	beq.n	800521c <_strtod_l+0x34c>
 80051ce:	dc23      	bgt.n	8005218 <_strtod_l+0x348>
 80051d0:	2b49      	cmp	r3, #73	; 0x49
 80051d2:	d023      	beq.n	800521c <_strtod_l+0x34c>
 80051d4:	2b4e      	cmp	r3, #78	; 0x4e
 80051d6:	f47f aed8 	bne.w	8004f8a <_strtod_l+0xba>
 80051da:	499c      	ldr	r1, [pc, #624]	; (800544c <_strtod_l+0x57c>)
 80051dc:	a81b      	add	r0, sp, #108	; 0x6c
 80051de:	f001 fe2b 	bl	8006e38 <__match>
 80051e2:	2800      	cmp	r0, #0
 80051e4:	f43f aed1 	beq.w	8004f8a <_strtod_l+0xba>
 80051e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b28      	cmp	r3, #40	; 0x28
 80051ee:	d12c      	bne.n	800524a <_strtod_l+0x37a>
 80051f0:	4997      	ldr	r1, [pc, #604]	; (8005450 <_strtod_l+0x580>)
 80051f2:	aa1e      	add	r2, sp, #120	; 0x78
 80051f4:	a81b      	add	r0, sp, #108	; 0x6c
 80051f6:	f001 fe33 	bl	8006e60 <__hexnan>
 80051fa:	2805      	cmp	r0, #5
 80051fc:	d125      	bne.n	800524a <_strtod_l+0x37a>
 80051fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005200:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8005204:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005208:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800520c:	e6a1      	b.n	8004f52 <_strtod_l+0x82>
 800520e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8005212:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005216:	e7bc      	b.n	8005192 <_strtod_l+0x2c2>
 8005218:	2b6e      	cmp	r3, #110	; 0x6e
 800521a:	e7dc      	b.n	80051d6 <_strtod_l+0x306>
 800521c:	498d      	ldr	r1, [pc, #564]	; (8005454 <_strtod_l+0x584>)
 800521e:	a81b      	add	r0, sp, #108	; 0x6c
 8005220:	f001 fe0a 	bl	8006e38 <__match>
 8005224:	2800      	cmp	r0, #0
 8005226:	f43f aeb0 	beq.w	8004f8a <_strtod_l+0xba>
 800522a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800522c:	498a      	ldr	r1, [pc, #552]	; (8005458 <_strtod_l+0x588>)
 800522e:	3b01      	subs	r3, #1
 8005230:	a81b      	add	r0, sp, #108	; 0x6c
 8005232:	931b      	str	r3, [sp, #108]	; 0x6c
 8005234:	f001 fe00 	bl	8006e38 <__match>
 8005238:	b910      	cbnz	r0, 8005240 <_strtod_l+0x370>
 800523a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800523c:	3301      	adds	r3, #1
 800523e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005240:	f04f 0800 	mov.w	r8, #0
 8005244:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8005468 <_strtod_l+0x598>
 8005248:	e683      	b.n	8004f52 <_strtod_l+0x82>
 800524a:	4884      	ldr	r0, [pc, #528]	; (800545c <_strtod_l+0x58c>)
 800524c:	f002 fda6 	bl	8007d9c <nan>
 8005250:	4680      	mov	r8, r0
 8005252:	4689      	mov	r9, r1
 8005254:	e67d      	b.n	8004f52 <_strtod_l+0x82>
 8005256:	9b04      	ldr	r3, [sp, #16]
 8005258:	f1bb 0f00 	cmp.w	fp, #0
 800525c:	bf08      	it	eq
 800525e:	46a3      	moveq	fp, r4
 8005260:	1aeb      	subs	r3, r5, r3
 8005262:	2c10      	cmp	r4, #16
 8005264:	9806      	ldr	r0, [sp, #24]
 8005266:	4626      	mov	r6, r4
 8005268:	9307      	str	r3, [sp, #28]
 800526a:	bfa8      	it	ge
 800526c:	2610      	movge	r6, #16
 800526e:	f7fb f8b9 	bl	80003e4 <__aeabi_ui2d>
 8005272:	2c09      	cmp	r4, #9
 8005274:	4680      	mov	r8, r0
 8005276:	4689      	mov	r9, r1
 8005278:	dd13      	ble.n	80052a2 <_strtod_l+0x3d2>
 800527a:	4b79      	ldr	r3, [pc, #484]	; (8005460 <_strtod_l+0x590>)
 800527c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005280:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005284:	f7fb f928 	bl	80004d8 <__aeabi_dmul>
 8005288:	4680      	mov	r8, r0
 800528a:	9805      	ldr	r0, [sp, #20]
 800528c:	4689      	mov	r9, r1
 800528e:	f7fb f8a9 	bl	80003e4 <__aeabi_ui2d>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4640      	mov	r0, r8
 8005298:	4649      	mov	r1, r9
 800529a:	f7fa ff67 	bl	800016c <__adddf3>
 800529e:	4680      	mov	r8, r0
 80052a0:	4689      	mov	r9, r1
 80052a2:	2c0f      	cmp	r4, #15
 80052a4:	dc36      	bgt.n	8005314 <_strtod_l+0x444>
 80052a6:	9b07      	ldr	r3, [sp, #28]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f43f ae52 	beq.w	8004f52 <_strtod_l+0x82>
 80052ae:	dd22      	ble.n	80052f6 <_strtod_l+0x426>
 80052b0:	2b16      	cmp	r3, #22
 80052b2:	dc09      	bgt.n	80052c8 <_strtod_l+0x3f8>
 80052b4:	4c6a      	ldr	r4, [pc, #424]	; (8005460 <_strtod_l+0x590>)
 80052b6:	4642      	mov	r2, r8
 80052b8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80052bc:	464b      	mov	r3, r9
 80052be:	e9d4 0100 	ldrd	r0, r1, [r4]
 80052c2:	f7fb f909 	bl	80004d8 <__aeabi_dmul>
 80052c6:	e7c3      	b.n	8005250 <_strtod_l+0x380>
 80052c8:	9a07      	ldr	r2, [sp, #28]
 80052ca:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80052ce:	4293      	cmp	r3, r2
 80052d0:	db20      	blt.n	8005314 <_strtod_l+0x444>
 80052d2:	4d63      	ldr	r5, [pc, #396]	; (8005460 <_strtod_l+0x590>)
 80052d4:	f1c4 040f 	rsb	r4, r4, #15
 80052d8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80052dc:	4642      	mov	r2, r8
 80052de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052e2:	464b      	mov	r3, r9
 80052e4:	f7fb f8f8 	bl	80004d8 <__aeabi_dmul>
 80052e8:	9b07      	ldr	r3, [sp, #28]
 80052ea:	1b1c      	subs	r4, r3, r4
 80052ec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80052f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052f4:	e7e5      	b.n	80052c2 <_strtod_l+0x3f2>
 80052f6:	9b07      	ldr	r3, [sp, #28]
 80052f8:	3316      	adds	r3, #22
 80052fa:	db0b      	blt.n	8005314 <_strtod_l+0x444>
 80052fc:	9b04      	ldr	r3, [sp, #16]
 80052fe:	4a58      	ldr	r2, [pc, #352]	; (8005460 <_strtod_l+0x590>)
 8005300:	1b5d      	subs	r5, r3, r5
 8005302:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005306:	4640      	mov	r0, r8
 8005308:	e9d5 2300 	ldrd	r2, r3, [r5]
 800530c:	4649      	mov	r1, r9
 800530e:	f7fb fa0d 	bl	800072c <__aeabi_ddiv>
 8005312:	e79d      	b.n	8005250 <_strtod_l+0x380>
 8005314:	9b07      	ldr	r3, [sp, #28]
 8005316:	1ba6      	subs	r6, r4, r6
 8005318:	441e      	add	r6, r3
 800531a:	2e00      	cmp	r6, #0
 800531c:	dd71      	ble.n	8005402 <_strtod_l+0x532>
 800531e:	f016 030f 	ands.w	r3, r6, #15
 8005322:	d00a      	beq.n	800533a <_strtod_l+0x46a>
 8005324:	494e      	ldr	r1, [pc, #312]	; (8005460 <_strtod_l+0x590>)
 8005326:	4642      	mov	r2, r8
 8005328:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800532c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005330:	464b      	mov	r3, r9
 8005332:	f7fb f8d1 	bl	80004d8 <__aeabi_dmul>
 8005336:	4680      	mov	r8, r0
 8005338:	4689      	mov	r9, r1
 800533a:	f036 060f 	bics.w	r6, r6, #15
 800533e:	d050      	beq.n	80053e2 <_strtod_l+0x512>
 8005340:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005344:	dd27      	ble.n	8005396 <_strtod_l+0x4c6>
 8005346:	f04f 0b00 	mov.w	fp, #0
 800534a:	f8cd b010 	str.w	fp, [sp, #16]
 800534e:	f8cd b020 	str.w	fp, [sp, #32]
 8005352:	f8cd b018 	str.w	fp, [sp, #24]
 8005356:	2322      	movs	r3, #34	; 0x22
 8005358:	f04f 0800 	mov.w	r8, #0
 800535c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8005468 <_strtod_l+0x598>
 8005360:	f8ca 3000 	str.w	r3, [sl]
 8005364:	9b08      	ldr	r3, [sp, #32]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f43f adf3 	beq.w	8004f52 <_strtod_l+0x82>
 800536c:	4650      	mov	r0, sl
 800536e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005370:	f001 fe8c 	bl	800708c <_Bfree>
 8005374:	4650      	mov	r0, sl
 8005376:	9906      	ldr	r1, [sp, #24]
 8005378:	f001 fe88 	bl	800708c <_Bfree>
 800537c:	4650      	mov	r0, sl
 800537e:	9904      	ldr	r1, [sp, #16]
 8005380:	f001 fe84 	bl	800708c <_Bfree>
 8005384:	4650      	mov	r0, sl
 8005386:	9908      	ldr	r1, [sp, #32]
 8005388:	f001 fe80 	bl	800708c <_Bfree>
 800538c:	4659      	mov	r1, fp
 800538e:	4650      	mov	r0, sl
 8005390:	f001 fe7c 	bl	800708c <_Bfree>
 8005394:	e5dd      	b.n	8004f52 <_strtod_l+0x82>
 8005396:	2300      	movs	r3, #0
 8005398:	4640      	mov	r0, r8
 800539a:	4649      	mov	r1, r9
 800539c:	461f      	mov	r7, r3
 800539e:	1136      	asrs	r6, r6, #4
 80053a0:	2e01      	cmp	r6, #1
 80053a2:	dc21      	bgt.n	80053e8 <_strtod_l+0x518>
 80053a4:	b10b      	cbz	r3, 80053aa <_strtod_l+0x4da>
 80053a6:	4680      	mov	r8, r0
 80053a8:	4689      	mov	r9, r1
 80053aa:	4b2e      	ldr	r3, [pc, #184]	; (8005464 <_strtod_l+0x594>)
 80053ac:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80053b0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80053b4:	4642      	mov	r2, r8
 80053b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053ba:	464b      	mov	r3, r9
 80053bc:	f7fb f88c 	bl	80004d8 <__aeabi_dmul>
 80053c0:	4b29      	ldr	r3, [pc, #164]	; (8005468 <_strtod_l+0x598>)
 80053c2:	460a      	mov	r2, r1
 80053c4:	400b      	ands	r3, r1
 80053c6:	4929      	ldr	r1, [pc, #164]	; (800546c <_strtod_l+0x59c>)
 80053c8:	4680      	mov	r8, r0
 80053ca:	428b      	cmp	r3, r1
 80053cc:	d8bb      	bhi.n	8005346 <_strtod_l+0x476>
 80053ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80053d2:	428b      	cmp	r3, r1
 80053d4:	bf86      	itte	hi
 80053d6:	f04f 38ff 	movhi.w	r8, #4294967295
 80053da:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005470 <_strtod_l+0x5a0>
 80053de:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80053e2:	2300      	movs	r3, #0
 80053e4:	9305      	str	r3, [sp, #20]
 80053e6:	e07e      	b.n	80054e6 <_strtod_l+0x616>
 80053e8:	07f2      	lsls	r2, r6, #31
 80053ea:	d507      	bpl.n	80053fc <_strtod_l+0x52c>
 80053ec:	4b1d      	ldr	r3, [pc, #116]	; (8005464 <_strtod_l+0x594>)
 80053ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f7fb f86f 	bl	80004d8 <__aeabi_dmul>
 80053fa:	2301      	movs	r3, #1
 80053fc:	3701      	adds	r7, #1
 80053fe:	1076      	asrs	r6, r6, #1
 8005400:	e7ce      	b.n	80053a0 <_strtod_l+0x4d0>
 8005402:	d0ee      	beq.n	80053e2 <_strtod_l+0x512>
 8005404:	4276      	negs	r6, r6
 8005406:	f016 020f 	ands.w	r2, r6, #15
 800540a:	d00a      	beq.n	8005422 <_strtod_l+0x552>
 800540c:	4b14      	ldr	r3, [pc, #80]	; (8005460 <_strtod_l+0x590>)
 800540e:	4640      	mov	r0, r8
 8005410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005414:	4649      	mov	r1, r9
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	f7fb f987 	bl	800072c <__aeabi_ddiv>
 800541e:	4680      	mov	r8, r0
 8005420:	4689      	mov	r9, r1
 8005422:	1136      	asrs	r6, r6, #4
 8005424:	d0dd      	beq.n	80053e2 <_strtod_l+0x512>
 8005426:	2e1f      	cmp	r6, #31
 8005428:	dd24      	ble.n	8005474 <_strtod_l+0x5a4>
 800542a:	f04f 0b00 	mov.w	fp, #0
 800542e:	f8cd b010 	str.w	fp, [sp, #16]
 8005432:	f8cd b020 	str.w	fp, [sp, #32]
 8005436:	f8cd b018 	str.w	fp, [sp, #24]
 800543a:	2322      	movs	r3, #34	; 0x22
 800543c:	f04f 0800 	mov.w	r8, #0
 8005440:	f04f 0900 	mov.w	r9, #0
 8005444:	f8ca 3000 	str.w	r3, [sl]
 8005448:	e78c      	b.n	8005364 <_strtod_l+0x494>
 800544a:	bf00      	nop
 800544c:	0800c325 	.word	0x0800c325
 8005450:	0800c368 	.word	0x0800c368
 8005454:	0800c31d 	.word	0x0800c31d
 8005458:	0800c4ac 	.word	0x0800c4ac
 800545c:	0800c768 	.word	0x0800c768
 8005460:	0800c648 	.word	0x0800c648
 8005464:	0800c620 	.word	0x0800c620
 8005468:	7ff00000 	.word	0x7ff00000
 800546c:	7ca00000 	.word	0x7ca00000
 8005470:	7fefffff 	.word	0x7fefffff
 8005474:	f016 0310 	ands.w	r3, r6, #16
 8005478:	bf18      	it	ne
 800547a:	236a      	movne	r3, #106	; 0x6a
 800547c:	4640      	mov	r0, r8
 800547e:	9305      	str	r3, [sp, #20]
 8005480:	4649      	mov	r1, r9
 8005482:	2300      	movs	r3, #0
 8005484:	4fb2      	ldr	r7, [pc, #712]	; (8005750 <_strtod_l+0x880>)
 8005486:	07f2      	lsls	r2, r6, #31
 8005488:	d504      	bpl.n	8005494 <_strtod_l+0x5c4>
 800548a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800548e:	f7fb f823 	bl	80004d8 <__aeabi_dmul>
 8005492:	2301      	movs	r3, #1
 8005494:	1076      	asrs	r6, r6, #1
 8005496:	f107 0708 	add.w	r7, r7, #8
 800549a:	d1f4      	bne.n	8005486 <_strtod_l+0x5b6>
 800549c:	b10b      	cbz	r3, 80054a2 <_strtod_l+0x5d2>
 800549e:	4680      	mov	r8, r0
 80054a0:	4689      	mov	r9, r1
 80054a2:	9b05      	ldr	r3, [sp, #20]
 80054a4:	b1bb      	cbz	r3, 80054d6 <_strtod_l+0x606>
 80054a6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80054aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	4649      	mov	r1, r9
 80054b2:	dd10      	ble.n	80054d6 <_strtod_l+0x606>
 80054b4:	2b1f      	cmp	r3, #31
 80054b6:	f340 812b 	ble.w	8005710 <_strtod_l+0x840>
 80054ba:	2b34      	cmp	r3, #52	; 0x34
 80054bc:	bfd8      	it	le
 80054be:	f04f 32ff 	movle.w	r2, #4294967295
 80054c2:	f04f 0800 	mov.w	r8, #0
 80054c6:	bfcf      	iteee	gt
 80054c8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80054cc:	3b20      	suble	r3, #32
 80054ce:	fa02 f303 	lslle.w	r3, r2, r3
 80054d2:	ea03 0901 	andle.w	r9, r3, r1
 80054d6:	2200      	movs	r2, #0
 80054d8:	2300      	movs	r3, #0
 80054da:	4640      	mov	r0, r8
 80054dc:	4649      	mov	r1, r9
 80054de:	f7fb fa63 	bl	80009a8 <__aeabi_dcmpeq>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d1a1      	bne.n	800542a <_strtod_l+0x55a>
 80054e6:	9b06      	ldr	r3, [sp, #24]
 80054e8:	465a      	mov	r2, fp
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	4650      	mov	r0, sl
 80054ee:	4623      	mov	r3, r4
 80054f0:	9908      	ldr	r1, [sp, #32]
 80054f2:	f001 fe37 	bl	8007164 <__s2b>
 80054f6:	9008      	str	r0, [sp, #32]
 80054f8:	2800      	cmp	r0, #0
 80054fa:	f43f af24 	beq.w	8005346 <_strtod_l+0x476>
 80054fe:	9b04      	ldr	r3, [sp, #16]
 8005500:	f04f 0b00 	mov.w	fp, #0
 8005504:	1b5d      	subs	r5, r3, r5
 8005506:	9b07      	ldr	r3, [sp, #28]
 8005508:	f8cd b010 	str.w	fp, [sp, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	bfb4      	ite	lt
 8005510:	462b      	movlt	r3, r5
 8005512:	2300      	movge	r3, #0
 8005514:	930e      	str	r3, [sp, #56]	; 0x38
 8005516:	9b07      	ldr	r3, [sp, #28]
 8005518:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800551c:	9316      	str	r3, [sp, #88]	; 0x58
 800551e:	9b08      	ldr	r3, [sp, #32]
 8005520:	4650      	mov	r0, sl
 8005522:	6859      	ldr	r1, [r3, #4]
 8005524:	f001 fd72 	bl	800700c <_Balloc>
 8005528:	9006      	str	r0, [sp, #24]
 800552a:	2800      	cmp	r0, #0
 800552c:	f43f af13 	beq.w	8005356 <_strtod_l+0x486>
 8005530:	9b08      	ldr	r3, [sp, #32]
 8005532:	300c      	adds	r0, #12
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	f103 010c 	add.w	r1, r3, #12
 800553a:	3202      	adds	r2, #2
 800553c:	0092      	lsls	r2, r2, #2
 800553e:	f001 fd57 	bl	8006ff0 <memcpy>
 8005542:	ab1e      	add	r3, sp, #120	; 0x78
 8005544:	9301      	str	r3, [sp, #4]
 8005546:	ab1d      	add	r3, sp, #116	; 0x74
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	4642      	mov	r2, r8
 800554c:	464b      	mov	r3, r9
 800554e:	4650      	mov	r0, sl
 8005550:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8005554:	f002 f944 	bl	80077e0 <__d2b>
 8005558:	901c      	str	r0, [sp, #112]	; 0x70
 800555a:	2800      	cmp	r0, #0
 800555c:	f43f aefb 	beq.w	8005356 <_strtod_l+0x486>
 8005560:	2101      	movs	r1, #1
 8005562:	4650      	mov	r0, sl
 8005564:	f001 fe96 	bl	8007294 <__i2b>
 8005568:	4603      	mov	r3, r0
 800556a:	9004      	str	r0, [sp, #16]
 800556c:	2800      	cmp	r0, #0
 800556e:	f43f aef2 	beq.w	8005356 <_strtod_l+0x486>
 8005572:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005574:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005576:	2d00      	cmp	r5, #0
 8005578:	bfab      	itete	ge
 800557a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800557c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800557e:	18ee      	addge	r6, r5, r3
 8005580:	1b5c      	sublt	r4, r3, r5
 8005582:	9b05      	ldr	r3, [sp, #20]
 8005584:	bfa8      	it	ge
 8005586:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005588:	eba5 0503 	sub.w	r5, r5, r3
 800558c:	4415      	add	r5, r2
 800558e:	4b71      	ldr	r3, [pc, #452]	; (8005754 <_strtod_l+0x884>)
 8005590:	f105 35ff 	add.w	r5, r5, #4294967295
 8005594:	bfb8      	it	lt
 8005596:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005598:	429d      	cmp	r5, r3
 800559a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800559e:	f280 80c9 	bge.w	8005734 <_strtod_l+0x864>
 80055a2:	1b5b      	subs	r3, r3, r5
 80055a4:	2b1f      	cmp	r3, #31
 80055a6:	f04f 0701 	mov.w	r7, #1
 80055aa:	eba2 0203 	sub.w	r2, r2, r3
 80055ae:	f300 80b6 	bgt.w	800571e <_strtod_l+0x84e>
 80055b2:	2500      	movs	r5, #0
 80055b4:	fa07 f303 	lsl.w	r3, r7, r3
 80055b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80055ba:	18b7      	adds	r7, r6, r2
 80055bc:	9b05      	ldr	r3, [sp, #20]
 80055be:	42be      	cmp	r6, r7
 80055c0:	4414      	add	r4, r2
 80055c2:	441c      	add	r4, r3
 80055c4:	4633      	mov	r3, r6
 80055c6:	bfa8      	it	ge
 80055c8:	463b      	movge	r3, r7
 80055ca:	42a3      	cmp	r3, r4
 80055cc:	bfa8      	it	ge
 80055ce:	4623      	movge	r3, r4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	bfc2      	ittt	gt
 80055d4:	1aff      	subgt	r7, r7, r3
 80055d6:	1ae4      	subgt	r4, r4, r3
 80055d8:	1af6      	subgt	r6, r6, r3
 80055da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055dc:	2b00      	cmp	r3, #0
 80055de:	dd17      	ble.n	8005610 <_strtod_l+0x740>
 80055e0:	461a      	mov	r2, r3
 80055e2:	4650      	mov	r0, sl
 80055e4:	9904      	ldr	r1, [sp, #16]
 80055e6:	f001 ff0f 	bl	8007408 <__pow5mult>
 80055ea:	9004      	str	r0, [sp, #16]
 80055ec:	2800      	cmp	r0, #0
 80055ee:	f43f aeb2 	beq.w	8005356 <_strtod_l+0x486>
 80055f2:	4601      	mov	r1, r0
 80055f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80055f6:	4650      	mov	r0, sl
 80055f8:	f001 fe62 	bl	80072c0 <__multiply>
 80055fc:	9009      	str	r0, [sp, #36]	; 0x24
 80055fe:	2800      	cmp	r0, #0
 8005600:	f43f aea9 	beq.w	8005356 <_strtod_l+0x486>
 8005604:	4650      	mov	r0, sl
 8005606:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005608:	f001 fd40 	bl	800708c <_Bfree>
 800560c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800560e:	931c      	str	r3, [sp, #112]	; 0x70
 8005610:	2f00      	cmp	r7, #0
 8005612:	f300 8093 	bgt.w	800573c <_strtod_l+0x86c>
 8005616:	9b07      	ldr	r3, [sp, #28]
 8005618:	2b00      	cmp	r3, #0
 800561a:	dd08      	ble.n	800562e <_strtod_l+0x75e>
 800561c:	4650      	mov	r0, sl
 800561e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005620:	9906      	ldr	r1, [sp, #24]
 8005622:	f001 fef1 	bl	8007408 <__pow5mult>
 8005626:	9006      	str	r0, [sp, #24]
 8005628:	2800      	cmp	r0, #0
 800562a:	f43f ae94 	beq.w	8005356 <_strtod_l+0x486>
 800562e:	2c00      	cmp	r4, #0
 8005630:	dd08      	ble.n	8005644 <_strtod_l+0x774>
 8005632:	4622      	mov	r2, r4
 8005634:	4650      	mov	r0, sl
 8005636:	9906      	ldr	r1, [sp, #24]
 8005638:	f001 ff40 	bl	80074bc <__lshift>
 800563c:	9006      	str	r0, [sp, #24]
 800563e:	2800      	cmp	r0, #0
 8005640:	f43f ae89 	beq.w	8005356 <_strtod_l+0x486>
 8005644:	2e00      	cmp	r6, #0
 8005646:	dd08      	ble.n	800565a <_strtod_l+0x78a>
 8005648:	4632      	mov	r2, r6
 800564a:	4650      	mov	r0, sl
 800564c:	9904      	ldr	r1, [sp, #16]
 800564e:	f001 ff35 	bl	80074bc <__lshift>
 8005652:	9004      	str	r0, [sp, #16]
 8005654:	2800      	cmp	r0, #0
 8005656:	f43f ae7e 	beq.w	8005356 <_strtod_l+0x486>
 800565a:	4650      	mov	r0, sl
 800565c:	9a06      	ldr	r2, [sp, #24]
 800565e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005660:	f001 ffb4 	bl	80075cc <__mdiff>
 8005664:	4683      	mov	fp, r0
 8005666:	2800      	cmp	r0, #0
 8005668:	f43f ae75 	beq.w	8005356 <_strtod_l+0x486>
 800566c:	2400      	movs	r4, #0
 800566e:	68c3      	ldr	r3, [r0, #12]
 8005670:	9904      	ldr	r1, [sp, #16]
 8005672:	60c4      	str	r4, [r0, #12]
 8005674:	930d      	str	r3, [sp, #52]	; 0x34
 8005676:	f001 ff8d 	bl	8007594 <__mcmp>
 800567a:	42a0      	cmp	r0, r4
 800567c:	da70      	bge.n	8005760 <_strtod_l+0x890>
 800567e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005680:	ea53 0308 	orrs.w	r3, r3, r8
 8005684:	f040 8096 	bne.w	80057b4 <_strtod_l+0x8e4>
 8005688:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800568c:	2b00      	cmp	r3, #0
 800568e:	f040 8091 	bne.w	80057b4 <_strtod_l+0x8e4>
 8005692:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005696:	0d1b      	lsrs	r3, r3, #20
 8005698:	051b      	lsls	r3, r3, #20
 800569a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800569e:	f240 8089 	bls.w	80057b4 <_strtod_l+0x8e4>
 80056a2:	f8db 3014 	ldr.w	r3, [fp, #20]
 80056a6:	b923      	cbnz	r3, 80056b2 <_strtod_l+0x7e2>
 80056a8:	f8db 3010 	ldr.w	r3, [fp, #16]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	f340 8081 	ble.w	80057b4 <_strtod_l+0x8e4>
 80056b2:	4659      	mov	r1, fp
 80056b4:	2201      	movs	r2, #1
 80056b6:	4650      	mov	r0, sl
 80056b8:	f001 ff00 	bl	80074bc <__lshift>
 80056bc:	9904      	ldr	r1, [sp, #16]
 80056be:	4683      	mov	fp, r0
 80056c0:	f001 ff68 	bl	8007594 <__mcmp>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	dd75      	ble.n	80057b4 <_strtod_l+0x8e4>
 80056c8:	9905      	ldr	r1, [sp, #20]
 80056ca:	464b      	mov	r3, r9
 80056cc:	4a22      	ldr	r2, [pc, #136]	; (8005758 <_strtod_l+0x888>)
 80056ce:	2900      	cmp	r1, #0
 80056d0:	f000 8091 	beq.w	80057f6 <_strtod_l+0x926>
 80056d4:	ea02 0109 	and.w	r1, r2, r9
 80056d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80056dc:	f300 808b 	bgt.w	80057f6 <_strtod_l+0x926>
 80056e0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80056e4:	f77f aea9 	ble.w	800543a <_strtod_l+0x56a>
 80056e8:	2300      	movs	r3, #0
 80056ea:	4a1c      	ldr	r2, [pc, #112]	; (800575c <_strtod_l+0x88c>)
 80056ec:	4640      	mov	r0, r8
 80056ee:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80056f2:	4649      	mov	r1, r9
 80056f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80056f8:	f7fa feee 	bl	80004d8 <__aeabi_dmul>
 80056fc:	460b      	mov	r3, r1
 80056fe:	4303      	orrs	r3, r0
 8005700:	bf08      	it	eq
 8005702:	2322      	moveq	r3, #34	; 0x22
 8005704:	4680      	mov	r8, r0
 8005706:	4689      	mov	r9, r1
 8005708:	bf08      	it	eq
 800570a:	f8ca 3000 	streq.w	r3, [sl]
 800570e:	e62d      	b.n	800536c <_strtod_l+0x49c>
 8005710:	f04f 32ff 	mov.w	r2, #4294967295
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	ea03 0808 	and.w	r8, r3, r8
 800571c:	e6db      	b.n	80054d6 <_strtod_l+0x606>
 800571e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005722:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005726:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800572a:	35e2      	adds	r5, #226	; 0xe2
 800572c:	fa07 f505 	lsl.w	r5, r7, r5
 8005730:	970f      	str	r7, [sp, #60]	; 0x3c
 8005732:	e742      	b.n	80055ba <_strtod_l+0x6ea>
 8005734:	2301      	movs	r3, #1
 8005736:	2500      	movs	r5, #0
 8005738:	930f      	str	r3, [sp, #60]	; 0x3c
 800573a:	e73e      	b.n	80055ba <_strtod_l+0x6ea>
 800573c:	463a      	mov	r2, r7
 800573e:	4650      	mov	r0, sl
 8005740:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005742:	f001 febb 	bl	80074bc <__lshift>
 8005746:	901c      	str	r0, [sp, #112]	; 0x70
 8005748:	2800      	cmp	r0, #0
 800574a:	f47f af64 	bne.w	8005616 <_strtod_l+0x746>
 800574e:	e602      	b.n	8005356 <_strtod_l+0x486>
 8005750:	0800c380 	.word	0x0800c380
 8005754:	fffffc02 	.word	0xfffffc02
 8005758:	7ff00000 	.word	0x7ff00000
 800575c:	39500000 	.word	0x39500000
 8005760:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005764:	d166      	bne.n	8005834 <_strtod_l+0x964>
 8005766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005768:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800576c:	b35a      	cbz	r2, 80057c6 <_strtod_l+0x8f6>
 800576e:	4a9c      	ldr	r2, [pc, #624]	; (80059e0 <_strtod_l+0xb10>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d12c      	bne.n	80057ce <_strtod_l+0x8fe>
 8005774:	9b05      	ldr	r3, [sp, #20]
 8005776:	4640      	mov	r0, r8
 8005778:	b303      	cbz	r3, 80057bc <_strtod_l+0x8ec>
 800577a:	464b      	mov	r3, r9
 800577c:	4a99      	ldr	r2, [pc, #612]	; (80059e4 <_strtod_l+0xb14>)
 800577e:	f04f 31ff 	mov.w	r1, #4294967295
 8005782:	401a      	ands	r2, r3
 8005784:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005788:	d81b      	bhi.n	80057c2 <_strtod_l+0x8f2>
 800578a:	0d12      	lsrs	r2, r2, #20
 800578c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005790:	fa01 f303 	lsl.w	r3, r1, r3
 8005794:	4298      	cmp	r0, r3
 8005796:	d11a      	bne.n	80057ce <_strtod_l+0x8fe>
 8005798:	4b93      	ldr	r3, [pc, #588]	; (80059e8 <_strtod_l+0xb18>)
 800579a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800579c:	429a      	cmp	r2, r3
 800579e:	d102      	bne.n	80057a6 <_strtod_l+0x8d6>
 80057a0:	3001      	adds	r0, #1
 80057a2:	f43f add8 	beq.w	8005356 <_strtod_l+0x486>
 80057a6:	f04f 0800 	mov.w	r8, #0
 80057aa:	4b8e      	ldr	r3, [pc, #568]	; (80059e4 <_strtod_l+0xb14>)
 80057ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057ae:	401a      	ands	r2, r3
 80057b0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80057b4:	9b05      	ldr	r3, [sp, #20]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d196      	bne.n	80056e8 <_strtod_l+0x818>
 80057ba:	e5d7      	b.n	800536c <_strtod_l+0x49c>
 80057bc:	f04f 33ff 	mov.w	r3, #4294967295
 80057c0:	e7e8      	b.n	8005794 <_strtod_l+0x8c4>
 80057c2:	460b      	mov	r3, r1
 80057c4:	e7e6      	b.n	8005794 <_strtod_l+0x8c4>
 80057c6:	ea53 0308 	orrs.w	r3, r3, r8
 80057ca:	f43f af7d 	beq.w	80056c8 <_strtod_l+0x7f8>
 80057ce:	b1e5      	cbz	r5, 800580a <_strtod_l+0x93a>
 80057d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d2:	421d      	tst	r5, r3
 80057d4:	d0ee      	beq.n	80057b4 <_strtod_l+0x8e4>
 80057d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057d8:	4640      	mov	r0, r8
 80057da:	4649      	mov	r1, r9
 80057dc:	9a05      	ldr	r2, [sp, #20]
 80057de:	b1c3      	cbz	r3, 8005812 <_strtod_l+0x942>
 80057e0:	f7ff fb54 	bl	8004e8c <sulp>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057ec:	f7fa fcbe 	bl	800016c <__adddf3>
 80057f0:	4680      	mov	r8, r0
 80057f2:	4689      	mov	r9, r1
 80057f4:	e7de      	b.n	80057b4 <_strtod_l+0x8e4>
 80057f6:	4013      	ands	r3, r2
 80057f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80057fc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005800:	f04f 38ff 	mov.w	r8, #4294967295
 8005804:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005808:	e7d4      	b.n	80057b4 <_strtod_l+0x8e4>
 800580a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800580c:	ea13 0f08 	tst.w	r3, r8
 8005810:	e7e0      	b.n	80057d4 <_strtod_l+0x904>
 8005812:	f7ff fb3b 	bl	8004e8c <sulp>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800581e:	f7fa fca3 	bl	8000168 <__aeabi_dsub>
 8005822:	2200      	movs	r2, #0
 8005824:	2300      	movs	r3, #0
 8005826:	4680      	mov	r8, r0
 8005828:	4689      	mov	r9, r1
 800582a:	f7fb f8bd 	bl	80009a8 <__aeabi_dcmpeq>
 800582e:	2800      	cmp	r0, #0
 8005830:	d0c0      	beq.n	80057b4 <_strtod_l+0x8e4>
 8005832:	e602      	b.n	800543a <_strtod_l+0x56a>
 8005834:	4658      	mov	r0, fp
 8005836:	9904      	ldr	r1, [sp, #16]
 8005838:	f002 f82e 	bl	8007898 <__ratio>
 800583c:	2200      	movs	r2, #0
 800583e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005842:	4606      	mov	r6, r0
 8005844:	460f      	mov	r7, r1
 8005846:	f7fb f8c3 	bl	80009d0 <__aeabi_dcmple>
 800584a:	2800      	cmp	r0, #0
 800584c:	d075      	beq.n	800593a <_strtod_l+0xa6a>
 800584e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005850:	2b00      	cmp	r3, #0
 8005852:	d047      	beq.n	80058e4 <_strtod_l+0xa14>
 8005854:	2600      	movs	r6, #0
 8005856:	4f65      	ldr	r7, [pc, #404]	; (80059ec <_strtod_l+0xb1c>)
 8005858:	4d64      	ldr	r5, [pc, #400]	; (80059ec <_strtod_l+0xb1c>)
 800585a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800585c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005860:	0d1b      	lsrs	r3, r3, #20
 8005862:	051b      	lsls	r3, r3, #20
 8005864:	930f      	str	r3, [sp, #60]	; 0x3c
 8005866:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005868:	4b61      	ldr	r3, [pc, #388]	; (80059f0 <_strtod_l+0xb20>)
 800586a:	429a      	cmp	r2, r3
 800586c:	f040 80c8 	bne.w	8005a00 <_strtod_l+0xb30>
 8005870:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005874:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800587a:	4640      	mov	r0, r8
 800587c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005880:	4649      	mov	r1, r9
 8005882:	f001 ff33 	bl	80076ec <__ulp>
 8005886:	4602      	mov	r2, r0
 8005888:	460b      	mov	r3, r1
 800588a:	4630      	mov	r0, r6
 800588c:	4639      	mov	r1, r7
 800588e:	f7fa fe23 	bl	80004d8 <__aeabi_dmul>
 8005892:	4642      	mov	r2, r8
 8005894:	464b      	mov	r3, r9
 8005896:	f7fa fc69 	bl	800016c <__adddf3>
 800589a:	460b      	mov	r3, r1
 800589c:	4951      	ldr	r1, [pc, #324]	; (80059e4 <_strtod_l+0xb14>)
 800589e:	4a55      	ldr	r2, [pc, #340]	; (80059f4 <_strtod_l+0xb24>)
 80058a0:	4019      	ands	r1, r3
 80058a2:	4291      	cmp	r1, r2
 80058a4:	4680      	mov	r8, r0
 80058a6:	d95e      	bls.n	8005966 <_strtod_l+0xa96>
 80058a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058aa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d103      	bne.n	80058ba <_strtod_l+0x9ea>
 80058b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058b4:	3301      	adds	r3, #1
 80058b6:	f43f ad4e 	beq.w	8005356 <_strtod_l+0x486>
 80058ba:	f04f 38ff 	mov.w	r8, #4294967295
 80058be:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80059e8 <_strtod_l+0xb18>
 80058c2:	4650      	mov	r0, sl
 80058c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80058c6:	f001 fbe1 	bl	800708c <_Bfree>
 80058ca:	4650      	mov	r0, sl
 80058cc:	9906      	ldr	r1, [sp, #24]
 80058ce:	f001 fbdd 	bl	800708c <_Bfree>
 80058d2:	4650      	mov	r0, sl
 80058d4:	9904      	ldr	r1, [sp, #16]
 80058d6:	f001 fbd9 	bl	800708c <_Bfree>
 80058da:	4659      	mov	r1, fp
 80058dc:	4650      	mov	r0, sl
 80058de:	f001 fbd5 	bl	800708c <_Bfree>
 80058e2:	e61c      	b.n	800551e <_strtod_l+0x64e>
 80058e4:	f1b8 0f00 	cmp.w	r8, #0
 80058e8:	d119      	bne.n	800591e <_strtod_l+0xa4e>
 80058ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058f0:	b9e3      	cbnz	r3, 800592c <_strtod_l+0xa5c>
 80058f2:	2200      	movs	r2, #0
 80058f4:	4630      	mov	r0, r6
 80058f6:	4639      	mov	r1, r7
 80058f8:	4b3c      	ldr	r3, [pc, #240]	; (80059ec <_strtod_l+0xb1c>)
 80058fa:	f7fb f85f 	bl	80009bc <__aeabi_dcmplt>
 80058fe:	b9c8      	cbnz	r0, 8005934 <_strtod_l+0xa64>
 8005900:	2200      	movs	r2, #0
 8005902:	4630      	mov	r0, r6
 8005904:	4639      	mov	r1, r7
 8005906:	4b3c      	ldr	r3, [pc, #240]	; (80059f8 <_strtod_l+0xb28>)
 8005908:	f7fa fde6 	bl	80004d8 <__aeabi_dmul>
 800590c:	4604      	mov	r4, r0
 800590e:	460d      	mov	r5, r1
 8005910:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005914:	9418      	str	r4, [sp, #96]	; 0x60
 8005916:	9319      	str	r3, [sp, #100]	; 0x64
 8005918:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800591c:	e79d      	b.n	800585a <_strtod_l+0x98a>
 800591e:	f1b8 0f01 	cmp.w	r8, #1
 8005922:	d103      	bne.n	800592c <_strtod_l+0xa5c>
 8005924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	f43f ad87 	beq.w	800543a <_strtod_l+0x56a>
 800592c:	2600      	movs	r6, #0
 800592e:	2400      	movs	r4, #0
 8005930:	4f32      	ldr	r7, [pc, #200]	; (80059fc <_strtod_l+0xb2c>)
 8005932:	e791      	b.n	8005858 <_strtod_l+0x988>
 8005934:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005936:	4d30      	ldr	r5, [pc, #192]	; (80059f8 <_strtod_l+0xb28>)
 8005938:	e7ea      	b.n	8005910 <_strtod_l+0xa40>
 800593a:	4b2f      	ldr	r3, [pc, #188]	; (80059f8 <_strtod_l+0xb28>)
 800593c:	2200      	movs	r2, #0
 800593e:	4630      	mov	r0, r6
 8005940:	4639      	mov	r1, r7
 8005942:	f7fa fdc9 	bl	80004d8 <__aeabi_dmul>
 8005946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005948:	4604      	mov	r4, r0
 800594a:	460d      	mov	r5, r1
 800594c:	b933      	cbnz	r3, 800595c <_strtod_l+0xa8c>
 800594e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005952:	9010      	str	r0, [sp, #64]	; 0x40
 8005954:	9311      	str	r3, [sp, #68]	; 0x44
 8005956:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800595a:	e77e      	b.n	800585a <_strtod_l+0x98a>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005964:	e7f7      	b.n	8005956 <_strtod_l+0xa86>
 8005966:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800596a:	9b05      	ldr	r3, [sp, #20]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1a8      	bne.n	80058c2 <_strtod_l+0x9f2>
 8005970:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005974:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005976:	0d1b      	lsrs	r3, r3, #20
 8005978:	051b      	lsls	r3, r3, #20
 800597a:	429a      	cmp	r2, r3
 800597c:	d1a1      	bne.n	80058c2 <_strtod_l+0x9f2>
 800597e:	4620      	mov	r0, r4
 8005980:	4629      	mov	r1, r5
 8005982:	f7fb fb9f 	bl	80010c4 <__aeabi_d2lz>
 8005986:	f7fa fd79 	bl	800047c <__aeabi_l2d>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	4620      	mov	r0, r4
 8005990:	4629      	mov	r1, r5
 8005992:	f7fa fbe9 	bl	8000168 <__aeabi_dsub>
 8005996:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005998:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800599c:	ea43 0308 	orr.w	r3, r3, r8
 80059a0:	4313      	orrs	r3, r2
 80059a2:	4604      	mov	r4, r0
 80059a4:	460d      	mov	r5, r1
 80059a6:	d066      	beq.n	8005a76 <_strtod_l+0xba6>
 80059a8:	a309      	add	r3, pc, #36	; (adr r3, 80059d0 <_strtod_l+0xb00>)
 80059aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ae:	f7fb f805 	bl	80009bc <__aeabi_dcmplt>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	f47f acda 	bne.w	800536c <_strtod_l+0x49c>
 80059b8:	a307      	add	r3, pc, #28	; (adr r3, 80059d8 <_strtod_l+0xb08>)
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	4620      	mov	r0, r4
 80059c0:	4629      	mov	r1, r5
 80059c2:	f7fb f819 	bl	80009f8 <__aeabi_dcmpgt>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	f43f af7b 	beq.w	80058c2 <_strtod_l+0x9f2>
 80059cc:	e4ce      	b.n	800536c <_strtod_l+0x49c>
 80059ce:	bf00      	nop
 80059d0:	94a03595 	.word	0x94a03595
 80059d4:	3fdfffff 	.word	0x3fdfffff
 80059d8:	35afe535 	.word	0x35afe535
 80059dc:	3fe00000 	.word	0x3fe00000
 80059e0:	000fffff 	.word	0x000fffff
 80059e4:	7ff00000 	.word	0x7ff00000
 80059e8:	7fefffff 	.word	0x7fefffff
 80059ec:	3ff00000 	.word	0x3ff00000
 80059f0:	7fe00000 	.word	0x7fe00000
 80059f4:	7c9fffff 	.word	0x7c9fffff
 80059f8:	3fe00000 	.word	0x3fe00000
 80059fc:	bff00000 	.word	0xbff00000
 8005a00:	9b05      	ldr	r3, [sp, #20]
 8005a02:	b313      	cbz	r3, 8005a4a <_strtod_l+0xb7a>
 8005a04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005a0a:	d81e      	bhi.n	8005a4a <_strtod_l+0xb7a>
 8005a0c:	a326      	add	r3, pc, #152	; (adr r3, 8005aa8 <_strtod_l+0xbd8>)
 8005a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a12:	4620      	mov	r0, r4
 8005a14:	4629      	mov	r1, r5
 8005a16:	f7fa ffdb 	bl	80009d0 <__aeabi_dcmple>
 8005a1a:	b190      	cbz	r0, 8005a42 <_strtod_l+0xb72>
 8005a1c:	4629      	mov	r1, r5
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f7fb f832 	bl	8000a88 <__aeabi_d2uiz>
 8005a24:	2801      	cmp	r0, #1
 8005a26:	bf38      	it	cc
 8005a28:	2001      	movcc	r0, #1
 8005a2a:	f7fa fcdb 	bl	80003e4 <__aeabi_ui2d>
 8005a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a30:	4604      	mov	r4, r0
 8005a32:	460d      	mov	r5, r1
 8005a34:	b9d3      	cbnz	r3, 8005a6c <_strtod_l+0xb9c>
 8005a36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a3a:	9012      	str	r0, [sp, #72]	; 0x48
 8005a3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005a3e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005a42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a44:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005a48:	1a9f      	subs	r7, r3, r2
 8005a4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a4e:	f001 fe4d 	bl	80076ec <__ulp>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4630      	mov	r0, r6
 8005a58:	4639      	mov	r1, r7
 8005a5a:	f7fa fd3d 	bl	80004d8 <__aeabi_dmul>
 8005a5e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005a62:	f7fa fb83 	bl	800016c <__adddf3>
 8005a66:	4680      	mov	r8, r0
 8005a68:	4689      	mov	r9, r1
 8005a6a:	e77e      	b.n	800596a <_strtod_l+0xa9a>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005a74:	e7e3      	b.n	8005a3e <_strtod_l+0xb6e>
 8005a76:	a30e      	add	r3, pc, #56	; (adr r3, 8005ab0 <_strtod_l+0xbe0>)
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f7fa ff9e 	bl	80009bc <__aeabi_dcmplt>
 8005a80:	e7a1      	b.n	80059c6 <_strtod_l+0xaf6>
 8005a82:	2300      	movs	r3, #0
 8005a84:	930c      	str	r3, [sp, #48]	; 0x30
 8005a86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	f7ff ba65 	b.w	8004f5a <_strtod_l+0x8a>
 8005a90:	2b65      	cmp	r3, #101	; 0x65
 8005a92:	f43f ab5c 	beq.w	800514e <_strtod_l+0x27e>
 8005a96:	2b45      	cmp	r3, #69	; 0x45
 8005a98:	f43f ab59 	beq.w	800514e <_strtod_l+0x27e>
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f7ff bb8d 	b.w	80051bc <_strtod_l+0x2ec>
 8005aa2:	bf00      	nop
 8005aa4:	f3af 8000 	nop.w
 8005aa8:	ffc00000 	.word	0xffc00000
 8005aac:	41dfffff 	.word	0x41dfffff
 8005ab0:	94a03595 	.word	0x94a03595
 8005ab4:	3fcfffff 	.word	0x3fcfffff

08005ab8 <_strtod_r>:
 8005ab8:	4b01      	ldr	r3, [pc, #4]	; (8005ac0 <_strtod_r+0x8>)
 8005aba:	f7ff ba09 	b.w	8004ed0 <_strtod_l>
 8005abe:	bf00      	nop
 8005ac0:	2000008c 	.word	0x2000008c

08005ac4 <_strtol_l.isra.0>:
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aca:	4686      	mov	lr, r0
 8005acc:	d001      	beq.n	8005ad2 <_strtol_l.isra.0+0xe>
 8005ace:	2b24      	cmp	r3, #36	; 0x24
 8005ad0:	d906      	bls.n	8005ae0 <_strtol_l.isra.0+0x1c>
 8005ad2:	f7fe fad7 	bl	8004084 <__errno>
 8005ad6:	2316      	movs	r3, #22
 8005ad8:	6003      	str	r3, [r0, #0]
 8005ada:	2000      	movs	r0, #0
 8005adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae0:	468c      	mov	ip, r1
 8005ae2:	4e3a      	ldr	r6, [pc, #232]	; (8005bcc <_strtol_l.isra.0+0x108>)
 8005ae4:	4660      	mov	r0, ip
 8005ae6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005aea:	5da5      	ldrb	r5, [r4, r6]
 8005aec:	f015 0508 	ands.w	r5, r5, #8
 8005af0:	d1f8      	bne.n	8005ae4 <_strtol_l.isra.0+0x20>
 8005af2:	2c2d      	cmp	r4, #45	; 0x2d
 8005af4:	d133      	bne.n	8005b5e <_strtol_l.isra.0+0x9a>
 8005af6:	f04f 0801 	mov.w	r8, #1
 8005afa:	f89c 4000 	ldrb.w	r4, [ip]
 8005afe:	f100 0c02 	add.w	ip, r0, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d05d      	beq.n	8005bc2 <_strtol_l.isra.0+0xfe>
 8005b06:	2b10      	cmp	r3, #16
 8005b08:	d10c      	bne.n	8005b24 <_strtol_l.isra.0+0x60>
 8005b0a:	2c30      	cmp	r4, #48	; 0x30
 8005b0c:	d10a      	bne.n	8005b24 <_strtol_l.isra.0+0x60>
 8005b0e:	f89c 0000 	ldrb.w	r0, [ip]
 8005b12:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005b16:	2858      	cmp	r0, #88	; 0x58
 8005b18:	d14e      	bne.n	8005bb8 <_strtol_l.isra.0+0xf4>
 8005b1a:	2310      	movs	r3, #16
 8005b1c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005b20:	f10c 0c02 	add.w	ip, ip, #2
 8005b24:	2500      	movs	r5, #0
 8005b26:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8005b2a:	3f01      	subs	r7, #1
 8005b2c:	fbb7 f9f3 	udiv	r9, r7, r3
 8005b30:	4628      	mov	r0, r5
 8005b32:	fb03 7a19 	mls	sl, r3, r9, r7
 8005b36:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005b3a:	2e09      	cmp	r6, #9
 8005b3c:	d818      	bhi.n	8005b70 <_strtol_l.isra.0+0xac>
 8005b3e:	4634      	mov	r4, r6
 8005b40:	42a3      	cmp	r3, r4
 8005b42:	dd24      	ble.n	8005b8e <_strtol_l.isra.0+0xca>
 8005b44:	2d00      	cmp	r5, #0
 8005b46:	db1f      	blt.n	8005b88 <_strtol_l.isra.0+0xc4>
 8005b48:	4581      	cmp	r9, r0
 8005b4a:	d31d      	bcc.n	8005b88 <_strtol_l.isra.0+0xc4>
 8005b4c:	d101      	bne.n	8005b52 <_strtol_l.isra.0+0x8e>
 8005b4e:	45a2      	cmp	sl, r4
 8005b50:	db1a      	blt.n	8005b88 <_strtol_l.isra.0+0xc4>
 8005b52:	2501      	movs	r5, #1
 8005b54:	fb00 4003 	mla	r0, r0, r3, r4
 8005b58:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005b5c:	e7eb      	b.n	8005b36 <_strtol_l.isra.0+0x72>
 8005b5e:	2c2b      	cmp	r4, #43	; 0x2b
 8005b60:	bf08      	it	eq
 8005b62:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005b66:	46a8      	mov	r8, r5
 8005b68:	bf08      	it	eq
 8005b6a:	f100 0c02 	addeq.w	ip, r0, #2
 8005b6e:	e7c8      	b.n	8005b02 <_strtol_l.isra.0+0x3e>
 8005b70:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005b74:	2e19      	cmp	r6, #25
 8005b76:	d801      	bhi.n	8005b7c <_strtol_l.isra.0+0xb8>
 8005b78:	3c37      	subs	r4, #55	; 0x37
 8005b7a:	e7e1      	b.n	8005b40 <_strtol_l.isra.0+0x7c>
 8005b7c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005b80:	2e19      	cmp	r6, #25
 8005b82:	d804      	bhi.n	8005b8e <_strtol_l.isra.0+0xca>
 8005b84:	3c57      	subs	r4, #87	; 0x57
 8005b86:	e7db      	b.n	8005b40 <_strtol_l.isra.0+0x7c>
 8005b88:	f04f 35ff 	mov.w	r5, #4294967295
 8005b8c:	e7e4      	b.n	8005b58 <_strtol_l.isra.0+0x94>
 8005b8e:	2d00      	cmp	r5, #0
 8005b90:	da08      	bge.n	8005ba4 <_strtol_l.isra.0+0xe0>
 8005b92:	2322      	movs	r3, #34	; 0x22
 8005b94:	4638      	mov	r0, r7
 8005b96:	f8ce 3000 	str.w	r3, [lr]
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	d09e      	beq.n	8005adc <_strtol_l.isra.0+0x18>
 8005b9e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005ba2:	e007      	b.n	8005bb4 <_strtol_l.isra.0+0xf0>
 8005ba4:	f1b8 0f00 	cmp.w	r8, #0
 8005ba8:	d000      	beq.n	8005bac <_strtol_l.isra.0+0xe8>
 8005baa:	4240      	negs	r0, r0
 8005bac:	2a00      	cmp	r2, #0
 8005bae:	d095      	beq.n	8005adc <_strtol_l.isra.0+0x18>
 8005bb0:	2d00      	cmp	r5, #0
 8005bb2:	d1f4      	bne.n	8005b9e <_strtol_l.isra.0+0xda>
 8005bb4:	6011      	str	r1, [r2, #0]
 8005bb6:	e791      	b.n	8005adc <_strtol_l.isra.0+0x18>
 8005bb8:	2430      	movs	r4, #48	; 0x30
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1b2      	bne.n	8005b24 <_strtol_l.isra.0+0x60>
 8005bbe:	2308      	movs	r3, #8
 8005bc0:	e7b0      	b.n	8005b24 <_strtol_l.isra.0+0x60>
 8005bc2:	2c30      	cmp	r4, #48	; 0x30
 8005bc4:	d0a3      	beq.n	8005b0e <_strtol_l.isra.0+0x4a>
 8005bc6:	230a      	movs	r3, #10
 8005bc8:	e7ac      	b.n	8005b24 <_strtol_l.isra.0+0x60>
 8005bca:	bf00      	nop
 8005bcc:	0800c3a9 	.word	0x0800c3a9

08005bd0 <_strtol_r>:
 8005bd0:	f7ff bf78 	b.w	8005ac4 <_strtol_l.isra.0>

08005bd4 <quorem>:
 8005bd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd8:	6903      	ldr	r3, [r0, #16]
 8005bda:	690c      	ldr	r4, [r1, #16]
 8005bdc:	4607      	mov	r7, r0
 8005bde:	42a3      	cmp	r3, r4
 8005be0:	f2c0 8083 	blt.w	8005cea <quorem+0x116>
 8005be4:	3c01      	subs	r4, #1
 8005be6:	f100 0514 	add.w	r5, r0, #20
 8005bea:	f101 0814 	add.w	r8, r1, #20
 8005bee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bf2:	9301      	str	r3, [sp, #4]
 8005bf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c0c:	d332      	bcc.n	8005c74 <quorem+0xa0>
 8005c0e:	f04f 0e00 	mov.w	lr, #0
 8005c12:	4640      	mov	r0, r8
 8005c14:	46ac      	mov	ip, r5
 8005c16:	46f2      	mov	sl, lr
 8005c18:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c1c:	b293      	uxth	r3, r2
 8005c1e:	fb06 e303 	mla	r3, r6, r3, lr
 8005c22:	0c12      	lsrs	r2, r2, #16
 8005c24:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c28:	fb06 e202 	mla	r2, r6, r2, lr
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	ebaa 0303 	sub.w	r3, sl, r3
 8005c32:	f8dc a000 	ldr.w	sl, [ip]
 8005c36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c3a:	fa1f fa8a 	uxth.w	sl, sl
 8005c3e:	4453      	add	r3, sl
 8005c40:	fa1f fa82 	uxth.w	sl, r2
 8005c44:	f8dc 2000 	ldr.w	r2, [ip]
 8005c48:	4581      	cmp	r9, r0
 8005c4a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005c4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c58:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c5c:	f84c 3b04 	str.w	r3, [ip], #4
 8005c60:	d2da      	bcs.n	8005c18 <quorem+0x44>
 8005c62:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c66:	b92b      	cbnz	r3, 8005c74 <quorem+0xa0>
 8005c68:	9b01      	ldr	r3, [sp, #4]
 8005c6a:	3b04      	subs	r3, #4
 8005c6c:	429d      	cmp	r5, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	d32f      	bcc.n	8005cd2 <quorem+0xfe>
 8005c72:	613c      	str	r4, [r7, #16]
 8005c74:	4638      	mov	r0, r7
 8005c76:	f001 fc8d 	bl	8007594 <__mcmp>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	db25      	blt.n	8005cca <quorem+0xf6>
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f04f 0c00 	mov.w	ip, #0
 8005c84:	3601      	adds	r6, #1
 8005c86:	f858 1b04 	ldr.w	r1, [r8], #4
 8005c8a:	f8d0 e000 	ldr.w	lr, [r0]
 8005c8e:	b28b      	uxth	r3, r1
 8005c90:	ebac 0303 	sub.w	r3, ip, r3
 8005c94:	fa1f f28e 	uxth.w	r2, lr
 8005c98:	4413      	add	r3, r2
 8005c9a:	0c0a      	lsrs	r2, r1, #16
 8005c9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ca0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005caa:	45c1      	cmp	r9, r8
 8005cac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005cb0:	f840 3b04 	str.w	r3, [r0], #4
 8005cb4:	d2e7      	bcs.n	8005c86 <quorem+0xb2>
 8005cb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cbe:	b922      	cbnz	r2, 8005cca <quorem+0xf6>
 8005cc0:	3b04      	subs	r3, #4
 8005cc2:	429d      	cmp	r5, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	d30a      	bcc.n	8005cde <quorem+0x10a>
 8005cc8:	613c      	str	r4, [r7, #16]
 8005cca:	4630      	mov	r0, r6
 8005ccc:	b003      	add	sp, #12
 8005cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd2:	6812      	ldr	r2, [r2, #0]
 8005cd4:	3b04      	subs	r3, #4
 8005cd6:	2a00      	cmp	r2, #0
 8005cd8:	d1cb      	bne.n	8005c72 <quorem+0x9e>
 8005cda:	3c01      	subs	r4, #1
 8005cdc:	e7c6      	b.n	8005c6c <quorem+0x98>
 8005cde:	6812      	ldr	r2, [r2, #0]
 8005ce0:	3b04      	subs	r3, #4
 8005ce2:	2a00      	cmp	r2, #0
 8005ce4:	d1f0      	bne.n	8005cc8 <quorem+0xf4>
 8005ce6:	3c01      	subs	r4, #1
 8005ce8:	e7eb      	b.n	8005cc2 <quorem+0xee>
 8005cea:	2000      	movs	r0, #0
 8005cec:	e7ee      	b.n	8005ccc <quorem+0xf8>
	...

08005cf0 <_dtoa_r>:
 8005cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	4616      	mov	r6, r2
 8005cf6:	461f      	mov	r7, r3
 8005cf8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005cfa:	b099      	sub	sp, #100	; 0x64
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005d02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005d06:	b974      	cbnz	r4, 8005d26 <_dtoa_r+0x36>
 8005d08:	2010      	movs	r0, #16
 8005d0a:	f001 f949 	bl	8006fa0 <malloc>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	6268      	str	r0, [r5, #36]	; 0x24
 8005d12:	b920      	cbnz	r0, 8005d1e <_dtoa_r+0x2e>
 8005d14:	21ea      	movs	r1, #234	; 0xea
 8005d16:	4bae      	ldr	r3, [pc, #696]	; (8005fd0 <_dtoa_r+0x2e0>)
 8005d18:	48ae      	ldr	r0, [pc, #696]	; (8005fd4 <_dtoa_r+0x2e4>)
 8005d1a:	f002 f875 	bl	8007e08 <__assert_func>
 8005d1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d22:	6004      	str	r4, [r0, #0]
 8005d24:	60c4      	str	r4, [r0, #12]
 8005d26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d28:	6819      	ldr	r1, [r3, #0]
 8005d2a:	b151      	cbz	r1, 8005d42 <_dtoa_r+0x52>
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	2301      	movs	r3, #1
 8005d30:	4093      	lsls	r3, r2
 8005d32:	604a      	str	r2, [r1, #4]
 8005d34:	608b      	str	r3, [r1, #8]
 8005d36:	4628      	mov	r0, r5
 8005d38:	f001 f9a8 	bl	800708c <_Bfree>
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	1e3b      	subs	r3, r7, #0
 8005d44:	bfaf      	iteee	ge
 8005d46:	2300      	movge	r3, #0
 8005d48:	2201      	movlt	r2, #1
 8005d4a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d4e:	9305      	strlt	r3, [sp, #20]
 8005d50:	bfa8      	it	ge
 8005d52:	f8c8 3000 	strge.w	r3, [r8]
 8005d56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005d5a:	4b9f      	ldr	r3, [pc, #636]	; (8005fd8 <_dtoa_r+0x2e8>)
 8005d5c:	bfb8      	it	lt
 8005d5e:	f8c8 2000 	strlt.w	r2, [r8]
 8005d62:	ea33 0309 	bics.w	r3, r3, r9
 8005d66:	d119      	bne.n	8005d9c <_dtoa_r+0xac>
 8005d68:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d74:	4333      	orrs	r3, r6
 8005d76:	f000 8580 	beq.w	800687a <_dtoa_r+0xb8a>
 8005d7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d7c:	b953      	cbnz	r3, 8005d94 <_dtoa_r+0xa4>
 8005d7e:	4b97      	ldr	r3, [pc, #604]	; (8005fdc <_dtoa_r+0x2ec>)
 8005d80:	e022      	b.n	8005dc8 <_dtoa_r+0xd8>
 8005d82:	4b97      	ldr	r3, [pc, #604]	; (8005fe0 <_dtoa_r+0x2f0>)
 8005d84:	9308      	str	r3, [sp, #32]
 8005d86:	3308      	adds	r3, #8
 8005d88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	9808      	ldr	r0, [sp, #32]
 8005d8e:	b019      	add	sp, #100	; 0x64
 8005d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d94:	4b91      	ldr	r3, [pc, #580]	; (8005fdc <_dtoa_r+0x2ec>)
 8005d96:	9308      	str	r3, [sp, #32]
 8005d98:	3303      	adds	r3, #3
 8005d9a:	e7f5      	b.n	8005d88 <_dtoa_r+0x98>
 8005d9c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005da0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005da4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005da8:	2200      	movs	r2, #0
 8005daa:	2300      	movs	r3, #0
 8005dac:	f7fa fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 8005db0:	4680      	mov	r8, r0
 8005db2:	b158      	cbz	r0, 8005dcc <_dtoa_r+0xdc>
 8005db4:	2301      	movs	r3, #1
 8005db6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 8559 	beq.w	8006874 <_dtoa_r+0xb84>
 8005dc2:	4888      	ldr	r0, [pc, #544]	; (8005fe4 <_dtoa_r+0x2f4>)
 8005dc4:	6018      	str	r0, [r3, #0]
 8005dc6:	1e43      	subs	r3, r0, #1
 8005dc8:	9308      	str	r3, [sp, #32]
 8005dca:	e7df      	b.n	8005d8c <_dtoa_r+0x9c>
 8005dcc:	ab16      	add	r3, sp, #88	; 0x58
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	ab17      	add	r3, sp, #92	; 0x5c
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005dda:	f001 fd01 	bl	80077e0 <__d2b>
 8005dde:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005de2:	4682      	mov	sl, r0
 8005de4:	2c00      	cmp	r4, #0
 8005de6:	d07e      	beq.n	8005ee6 <_dtoa_r+0x1f6>
 8005de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005df2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005df6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005dfa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005dfe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005e02:	2200      	movs	r2, #0
 8005e04:	4b78      	ldr	r3, [pc, #480]	; (8005fe8 <_dtoa_r+0x2f8>)
 8005e06:	f7fa f9af 	bl	8000168 <__aeabi_dsub>
 8005e0a:	a36b      	add	r3, pc, #428	; (adr r3, 8005fb8 <_dtoa_r+0x2c8>)
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	f7fa fb62 	bl	80004d8 <__aeabi_dmul>
 8005e14:	a36a      	add	r3, pc, #424	; (adr r3, 8005fc0 <_dtoa_r+0x2d0>)
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	f7fa f9a7 	bl	800016c <__adddf3>
 8005e1e:	4606      	mov	r6, r0
 8005e20:	4620      	mov	r0, r4
 8005e22:	460f      	mov	r7, r1
 8005e24:	f7fa faee 	bl	8000404 <__aeabi_i2d>
 8005e28:	a367      	add	r3, pc, #412	; (adr r3, 8005fc8 <_dtoa_r+0x2d8>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	f7fa fb53 	bl	80004d8 <__aeabi_dmul>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4630      	mov	r0, r6
 8005e38:	4639      	mov	r1, r7
 8005e3a:	f7fa f997 	bl	800016c <__adddf3>
 8005e3e:	4606      	mov	r6, r0
 8005e40:	460f      	mov	r7, r1
 8005e42:	f7fa fdf9 	bl	8000a38 <__aeabi_d2iz>
 8005e46:	2200      	movs	r2, #0
 8005e48:	4681      	mov	r9, r0
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	4639      	mov	r1, r7
 8005e50:	f7fa fdb4 	bl	80009bc <__aeabi_dcmplt>
 8005e54:	b148      	cbz	r0, 8005e6a <_dtoa_r+0x17a>
 8005e56:	4648      	mov	r0, r9
 8005e58:	f7fa fad4 	bl	8000404 <__aeabi_i2d>
 8005e5c:	4632      	mov	r2, r6
 8005e5e:	463b      	mov	r3, r7
 8005e60:	f7fa fda2 	bl	80009a8 <__aeabi_dcmpeq>
 8005e64:	b908      	cbnz	r0, 8005e6a <_dtoa_r+0x17a>
 8005e66:	f109 39ff 	add.w	r9, r9, #4294967295
 8005e6a:	f1b9 0f16 	cmp.w	r9, #22
 8005e6e:	d857      	bhi.n	8005f20 <_dtoa_r+0x230>
 8005e70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e74:	4b5d      	ldr	r3, [pc, #372]	; (8005fec <_dtoa_r+0x2fc>)
 8005e76:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f7fa fd9d 	bl	80009bc <__aeabi_dcmplt>
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d04e      	beq.n	8005f24 <_dtoa_r+0x234>
 8005e86:	2300      	movs	r3, #0
 8005e88:	f109 39ff 	add.w	r9, r9, #4294967295
 8005e8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e90:	1b1c      	subs	r4, r3, r4
 8005e92:	1e63      	subs	r3, r4, #1
 8005e94:	9309      	str	r3, [sp, #36]	; 0x24
 8005e96:	bf49      	itett	mi
 8005e98:	f1c4 0301 	rsbmi	r3, r4, #1
 8005e9c:	2300      	movpl	r3, #0
 8005e9e:	9306      	strmi	r3, [sp, #24]
 8005ea0:	2300      	movmi	r3, #0
 8005ea2:	bf54      	ite	pl
 8005ea4:	9306      	strpl	r3, [sp, #24]
 8005ea6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005ea8:	f1b9 0f00 	cmp.w	r9, #0
 8005eac:	db3c      	blt.n	8005f28 <_dtoa_r+0x238>
 8005eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005eb4:	444b      	add	r3, r9
 8005eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb8:	2300      	movs	r3, #0
 8005eba:	930a      	str	r3, [sp, #40]	; 0x28
 8005ebc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ebe:	2b09      	cmp	r3, #9
 8005ec0:	d86c      	bhi.n	8005f9c <_dtoa_r+0x2ac>
 8005ec2:	2b05      	cmp	r3, #5
 8005ec4:	bfc4      	itt	gt
 8005ec6:	3b04      	subgt	r3, #4
 8005ec8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005eca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ecc:	bfc8      	it	gt
 8005ece:	2400      	movgt	r4, #0
 8005ed0:	f1a3 0302 	sub.w	r3, r3, #2
 8005ed4:	bfd8      	it	le
 8005ed6:	2401      	movle	r4, #1
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	f200 808b 	bhi.w	8005ff4 <_dtoa_r+0x304>
 8005ede:	e8df f003 	tbb	[pc, r3]
 8005ee2:	4f2d      	.short	0x4f2d
 8005ee4:	5b4d      	.short	0x5b4d
 8005ee6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005eea:	441c      	add	r4, r3
 8005eec:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	bfc3      	ittte	gt
 8005ef4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ef8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005efc:	fa09 f303 	lslgt.w	r3, r9, r3
 8005f00:	f1c3 0320 	rsble	r3, r3, #32
 8005f04:	bfc6      	itte	gt
 8005f06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f0a:	4318      	orrgt	r0, r3
 8005f0c:	fa06 f003 	lslle.w	r0, r6, r3
 8005f10:	f7fa fa68 	bl	80003e4 <__aeabi_ui2d>
 8005f14:	2301      	movs	r3, #1
 8005f16:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005f1a:	3c01      	subs	r4, #1
 8005f1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005f1e:	e770      	b.n	8005e02 <_dtoa_r+0x112>
 8005f20:	2301      	movs	r3, #1
 8005f22:	e7b3      	b.n	8005e8c <_dtoa_r+0x19c>
 8005f24:	900f      	str	r0, [sp, #60]	; 0x3c
 8005f26:	e7b2      	b.n	8005e8e <_dtoa_r+0x19e>
 8005f28:	9b06      	ldr	r3, [sp, #24]
 8005f2a:	eba3 0309 	sub.w	r3, r3, r9
 8005f2e:	9306      	str	r3, [sp, #24]
 8005f30:	f1c9 0300 	rsb	r3, r9, #0
 8005f34:	930a      	str	r3, [sp, #40]	; 0x28
 8005f36:	2300      	movs	r3, #0
 8005f38:	930e      	str	r3, [sp, #56]	; 0x38
 8005f3a:	e7bf      	b.n	8005ebc <_dtoa_r+0x1cc>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	dc59      	bgt.n	8005ffa <_dtoa_r+0x30a>
 8005f46:	f04f 0b01 	mov.w	fp, #1
 8005f4a:	465b      	mov	r3, fp
 8005f4c:	f8cd b008 	str.w	fp, [sp, #8]
 8005f50:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005f54:	2200      	movs	r2, #0
 8005f56:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005f58:	6042      	str	r2, [r0, #4]
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	f102 0614 	add.w	r6, r2, #20
 8005f60:	429e      	cmp	r6, r3
 8005f62:	6841      	ldr	r1, [r0, #4]
 8005f64:	d94f      	bls.n	8006006 <_dtoa_r+0x316>
 8005f66:	4628      	mov	r0, r5
 8005f68:	f001 f850 	bl	800700c <_Balloc>
 8005f6c:	9008      	str	r0, [sp, #32]
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d14d      	bne.n	800600e <_dtoa_r+0x31e>
 8005f72:	4602      	mov	r2, r0
 8005f74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f78:	4b1d      	ldr	r3, [pc, #116]	; (8005ff0 <_dtoa_r+0x300>)
 8005f7a:	e6cd      	b.n	8005d18 <_dtoa_r+0x28>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e7de      	b.n	8005f3e <_dtoa_r+0x24e>
 8005f80:	2300      	movs	r3, #0
 8005f82:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f86:	eb09 0b03 	add.w	fp, r9, r3
 8005f8a:	f10b 0301 	add.w	r3, fp, #1
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	9302      	str	r3, [sp, #8]
 8005f92:	bfb8      	it	lt
 8005f94:	2301      	movlt	r3, #1
 8005f96:	e7dd      	b.n	8005f54 <_dtoa_r+0x264>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e7f2      	b.n	8005f82 <_dtoa_r+0x292>
 8005f9c:	2401      	movs	r4, #1
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	940b      	str	r4, [sp, #44]	; 0x2c
 8005fa2:	9322      	str	r3, [sp, #136]	; 0x88
 8005fa4:	f04f 3bff 	mov.w	fp, #4294967295
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2312      	movs	r3, #18
 8005fac:	f8cd b008 	str.w	fp, [sp, #8]
 8005fb0:	9223      	str	r2, [sp, #140]	; 0x8c
 8005fb2:	e7cf      	b.n	8005f54 <_dtoa_r+0x264>
 8005fb4:	f3af 8000 	nop.w
 8005fb8:	636f4361 	.word	0x636f4361
 8005fbc:	3fd287a7 	.word	0x3fd287a7
 8005fc0:	8b60c8b3 	.word	0x8b60c8b3
 8005fc4:	3fc68a28 	.word	0x3fc68a28
 8005fc8:	509f79fb 	.word	0x509f79fb
 8005fcc:	3fd34413 	.word	0x3fd34413
 8005fd0:	0800c4b6 	.word	0x0800c4b6
 8005fd4:	0800c4cd 	.word	0x0800c4cd
 8005fd8:	7ff00000 	.word	0x7ff00000
 8005fdc:	0800c4b2 	.word	0x0800c4b2
 8005fe0:	0800c4a9 	.word	0x0800c4a9
 8005fe4:	0800c329 	.word	0x0800c329
 8005fe8:	3ff80000 	.word	0x3ff80000
 8005fec:	0800c648 	.word	0x0800c648
 8005ff0:	0800c52c 	.word	0x0800c52c
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ff8:	e7d4      	b.n	8005fa4 <_dtoa_r+0x2b4>
 8005ffa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005ffe:	465b      	mov	r3, fp
 8006000:	f8cd b008 	str.w	fp, [sp, #8]
 8006004:	e7a6      	b.n	8005f54 <_dtoa_r+0x264>
 8006006:	3101      	adds	r1, #1
 8006008:	6041      	str	r1, [r0, #4]
 800600a:	0052      	lsls	r2, r2, #1
 800600c:	e7a6      	b.n	8005f5c <_dtoa_r+0x26c>
 800600e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006010:	9a08      	ldr	r2, [sp, #32]
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	9b02      	ldr	r3, [sp, #8]
 8006016:	2b0e      	cmp	r3, #14
 8006018:	f200 80a8 	bhi.w	800616c <_dtoa_r+0x47c>
 800601c:	2c00      	cmp	r4, #0
 800601e:	f000 80a5 	beq.w	800616c <_dtoa_r+0x47c>
 8006022:	f1b9 0f00 	cmp.w	r9, #0
 8006026:	dd34      	ble.n	8006092 <_dtoa_r+0x3a2>
 8006028:	4a9a      	ldr	r2, [pc, #616]	; (8006294 <_dtoa_r+0x5a4>)
 800602a:	f009 030f 	and.w	r3, r9, #15
 800602e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006032:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006036:	e9d3 3400 	ldrd	r3, r4, [r3]
 800603a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800603e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006042:	d016      	beq.n	8006072 <_dtoa_r+0x382>
 8006044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006048:	4b93      	ldr	r3, [pc, #588]	; (8006298 <_dtoa_r+0x5a8>)
 800604a:	2703      	movs	r7, #3
 800604c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006050:	f7fa fb6c 	bl	800072c <__aeabi_ddiv>
 8006054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006058:	f004 040f 	and.w	r4, r4, #15
 800605c:	4e8e      	ldr	r6, [pc, #568]	; (8006298 <_dtoa_r+0x5a8>)
 800605e:	b954      	cbnz	r4, 8006076 <_dtoa_r+0x386>
 8006060:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006068:	f7fa fb60 	bl	800072c <__aeabi_ddiv>
 800606c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006070:	e029      	b.n	80060c6 <_dtoa_r+0x3d6>
 8006072:	2702      	movs	r7, #2
 8006074:	e7f2      	b.n	800605c <_dtoa_r+0x36c>
 8006076:	07e1      	lsls	r1, r4, #31
 8006078:	d508      	bpl.n	800608c <_dtoa_r+0x39c>
 800607a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800607e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006082:	f7fa fa29 	bl	80004d8 <__aeabi_dmul>
 8006086:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800608a:	3701      	adds	r7, #1
 800608c:	1064      	asrs	r4, r4, #1
 800608e:	3608      	adds	r6, #8
 8006090:	e7e5      	b.n	800605e <_dtoa_r+0x36e>
 8006092:	f000 80a5 	beq.w	80061e0 <_dtoa_r+0x4f0>
 8006096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800609a:	f1c9 0400 	rsb	r4, r9, #0
 800609e:	4b7d      	ldr	r3, [pc, #500]	; (8006294 <_dtoa_r+0x5a4>)
 80060a0:	f004 020f 	and.w	r2, r4, #15
 80060a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	f7fa fa14 	bl	80004d8 <__aeabi_dmul>
 80060b0:	2702      	movs	r7, #2
 80060b2:	2300      	movs	r3, #0
 80060b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060b8:	4e77      	ldr	r6, [pc, #476]	; (8006298 <_dtoa_r+0x5a8>)
 80060ba:	1124      	asrs	r4, r4, #4
 80060bc:	2c00      	cmp	r4, #0
 80060be:	f040 8084 	bne.w	80061ca <_dtoa_r+0x4da>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1d2      	bne.n	800606c <_dtoa_r+0x37c>
 80060c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 808b 	beq.w	80061e4 <_dtoa_r+0x4f4>
 80060ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80060d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80060d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060da:	2200      	movs	r2, #0
 80060dc:	4b6f      	ldr	r3, [pc, #444]	; (800629c <_dtoa_r+0x5ac>)
 80060de:	f7fa fc6d 	bl	80009bc <__aeabi_dcmplt>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d07e      	beq.n	80061e4 <_dtoa_r+0x4f4>
 80060e6:	9b02      	ldr	r3, [sp, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d07b      	beq.n	80061e4 <_dtoa_r+0x4f4>
 80060ec:	f1bb 0f00 	cmp.w	fp, #0
 80060f0:	dd38      	ble.n	8006164 <_dtoa_r+0x474>
 80060f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060f6:	2200      	movs	r2, #0
 80060f8:	4b69      	ldr	r3, [pc, #420]	; (80062a0 <_dtoa_r+0x5b0>)
 80060fa:	f7fa f9ed 	bl	80004d8 <__aeabi_dmul>
 80060fe:	465c      	mov	r4, fp
 8006100:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006104:	f109 38ff 	add.w	r8, r9, #4294967295
 8006108:	3701      	adds	r7, #1
 800610a:	4638      	mov	r0, r7
 800610c:	f7fa f97a 	bl	8000404 <__aeabi_i2d>
 8006110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006114:	f7fa f9e0 	bl	80004d8 <__aeabi_dmul>
 8006118:	2200      	movs	r2, #0
 800611a:	4b62      	ldr	r3, [pc, #392]	; (80062a4 <_dtoa_r+0x5b4>)
 800611c:	f7fa f826 	bl	800016c <__adddf3>
 8006120:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006124:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006128:	9611      	str	r6, [sp, #68]	; 0x44
 800612a:	2c00      	cmp	r4, #0
 800612c:	d15d      	bne.n	80061ea <_dtoa_r+0x4fa>
 800612e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006132:	2200      	movs	r2, #0
 8006134:	4b5c      	ldr	r3, [pc, #368]	; (80062a8 <_dtoa_r+0x5b8>)
 8006136:	f7fa f817 	bl	8000168 <__aeabi_dsub>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006142:	4633      	mov	r3, r6
 8006144:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006146:	f7fa fc57 	bl	80009f8 <__aeabi_dcmpgt>
 800614a:	2800      	cmp	r0, #0
 800614c:	f040 829e 	bne.w	800668c <_dtoa_r+0x99c>
 8006150:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006154:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006156:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800615a:	f7fa fc2f 	bl	80009bc <__aeabi_dcmplt>
 800615e:	2800      	cmp	r0, #0
 8006160:	f040 8292 	bne.w	8006688 <_dtoa_r+0x998>
 8006164:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006168:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800616c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800616e:	2b00      	cmp	r3, #0
 8006170:	f2c0 8153 	blt.w	800641a <_dtoa_r+0x72a>
 8006174:	f1b9 0f0e 	cmp.w	r9, #14
 8006178:	f300 814f 	bgt.w	800641a <_dtoa_r+0x72a>
 800617c:	4b45      	ldr	r3, [pc, #276]	; (8006294 <_dtoa_r+0x5a4>)
 800617e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006182:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006186:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800618a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800618c:	2b00      	cmp	r3, #0
 800618e:	f280 80db 	bge.w	8006348 <_dtoa_r+0x658>
 8006192:	9b02      	ldr	r3, [sp, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	f300 80d7 	bgt.w	8006348 <_dtoa_r+0x658>
 800619a:	f040 8274 	bne.w	8006686 <_dtoa_r+0x996>
 800619e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061a2:	2200      	movs	r2, #0
 80061a4:	4b40      	ldr	r3, [pc, #256]	; (80062a8 <_dtoa_r+0x5b8>)
 80061a6:	f7fa f997 	bl	80004d8 <__aeabi_dmul>
 80061aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061ae:	f7fa fc19 	bl	80009e4 <__aeabi_dcmpge>
 80061b2:	9c02      	ldr	r4, [sp, #8]
 80061b4:	4626      	mov	r6, r4
 80061b6:	2800      	cmp	r0, #0
 80061b8:	f040 824a 	bne.w	8006650 <_dtoa_r+0x960>
 80061bc:	2331      	movs	r3, #49	; 0x31
 80061be:	9f08      	ldr	r7, [sp, #32]
 80061c0:	f109 0901 	add.w	r9, r9, #1
 80061c4:	f807 3b01 	strb.w	r3, [r7], #1
 80061c8:	e246      	b.n	8006658 <_dtoa_r+0x968>
 80061ca:	07e2      	lsls	r2, r4, #31
 80061cc:	d505      	bpl.n	80061da <_dtoa_r+0x4ea>
 80061ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061d2:	f7fa f981 	bl	80004d8 <__aeabi_dmul>
 80061d6:	2301      	movs	r3, #1
 80061d8:	3701      	adds	r7, #1
 80061da:	1064      	asrs	r4, r4, #1
 80061dc:	3608      	adds	r6, #8
 80061de:	e76d      	b.n	80060bc <_dtoa_r+0x3cc>
 80061e0:	2702      	movs	r7, #2
 80061e2:	e770      	b.n	80060c6 <_dtoa_r+0x3d6>
 80061e4:	46c8      	mov	r8, r9
 80061e6:	9c02      	ldr	r4, [sp, #8]
 80061e8:	e78f      	b.n	800610a <_dtoa_r+0x41a>
 80061ea:	9908      	ldr	r1, [sp, #32]
 80061ec:	4b29      	ldr	r3, [pc, #164]	; (8006294 <_dtoa_r+0x5a4>)
 80061ee:	4421      	add	r1, r4
 80061f0:	9112      	str	r1, [sp, #72]	; 0x48
 80061f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80061f8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80061fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006200:	2900      	cmp	r1, #0
 8006202:	d055      	beq.n	80062b0 <_dtoa_r+0x5c0>
 8006204:	2000      	movs	r0, #0
 8006206:	4929      	ldr	r1, [pc, #164]	; (80062ac <_dtoa_r+0x5bc>)
 8006208:	f7fa fa90 	bl	800072c <__aeabi_ddiv>
 800620c:	463b      	mov	r3, r7
 800620e:	4632      	mov	r2, r6
 8006210:	f7f9 ffaa 	bl	8000168 <__aeabi_dsub>
 8006214:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006218:	9f08      	ldr	r7, [sp, #32]
 800621a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800621e:	f7fa fc0b 	bl	8000a38 <__aeabi_d2iz>
 8006222:	4604      	mov	r4, r0
 8006224:	f7fa f8ee 	bl	8000404 <__aeabi_i2d>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006230:	f7f9 ff9a 	bl	8000168 <__aeabi_dsub>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	3430      	adds	r4, #48	; 0x30
 800623a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800623e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006242:	f807 4b01 	strb.w	r4, [r7], #1
 8006246:	f7fa fbb9 	bl	80009bc <__aeabi_dcmplt>
 800624a:	2800      	cmp	r0, #0
 800624c:	d174      	bne.n	8006338 <_dtoa_r+0x648>
 800624e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006252:	2000      	movs	r0, #0
 8006254:	4911      	ldr	r1, [pc, #68]	; (800629c <_dtoa_r+0x5ac>)
 8006256:	f7f9 ff87 	bl	8000168 <__aeabi_dsub>
 800625a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800625e:	f7fa fbad 	bl	80009bc <__aeabi_dcmplt>
 8006262:	2800      	cmp	r0, #0
 8006264:	f040 80b6 	bne.w	80063d4 <_dtoa_r+0x6e4>
 8006268:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800626a:	429f      	cmp	r7, r3
 800626c:	f43f af7a 	beq.w	8006164 <_dtoa_r+0x474>
 8006270:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006274:	2200      	movs	r2, #0
 8006276:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <_dtoa_r+0x5b0>)
 8006278:	f7fa f92e 	bl	80004d8 <__aeabi_dmul>
 800627c:	2200      	movs	r2, #0
 800627e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006282:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006286:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <_dtoa_r+0x5b0>)
 8006288:	f7fa f926 	bl	80004d8 <__aeabi_dmul>
 800628c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006290:	e7c3      	b.n	800621a <_dtoa_r+0x52a>
 8006292:	bf00      	nop
 8006294:	0800c648 	.word	0x0800c648
 8006298:	0800c620 	.word	0x0800c620
 800629c:	3ff00000 	.word	0x3ff00000
 80062a0:	40240000 	.word	0x40240000
 80062a4:	401c0000 	.word	0x401c0000
 80062a8:	40140000 	.word	0x40140000
 80062ac:	3fe00000 	.word	0x3fe00000
 80062b0:	4630      	mov	r0, r6
 80062b2:	4639      	mov	r1, r7
 80062b4:	f7fa f910 	bl	80004d8 <__aeabi_dmul>
 80062b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062be:	9c08      	ldr	r4, [sp, #32]
 80062c0:	9314      	str	r3, [sp, #80]	; 0x50
 80062c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062c6:	f7fa fbb7 	bl	8000a38 <__aeabi_d2iz>
 80062ca:	9015      	str	r0, [sp, #84]	; 0x54
 80062cc:	f7fa f89a 	bl	8000404 <__aeabi_i2d>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062d8:	f7f9 ff46 	bl	8000168 <__aeabi_dsub>
 80062dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062de:	4606      	mov	r6, r0
 80062e0:	3330      	adds	r3, #48	; 0x30
 80062e2:	f804 3b01 	strb.w	r3, [r4], #1
 80062e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062e8:	460f      	mov	r7, r1
 80062ea:	429c      	cmp	r4, r3
 80062ec:	f04f 0200 	mov.w	r2, #0
 80062f0:	d124      	bne.n	800633c <_dtoa_r+0x64c>
 80062f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062f6:	4bb3      	ldr	r3, [pc, #716]	; (80065c4 <_dtoa_r+0x8d4>)
 80062f8:	f7f9 ff38 	bl	800016c <__adddf3>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4630      	mov	r0, r6
 8006302:	4639      	mov	r1, r7
 8006304:	f7fa fb78 	bl	80009f8 <__aeabi_dcmpgt>
 8006308:	2800      	cmp	r0, #0
 800630a:	d162      	bne.n	80063d2 <_dtoa_r+0x6e2>
 800630c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006310:	2000      	movs	r0, #0
 8006312:	49ac      	ldr	r1, [pc, #688]	; (80065c4 <_dtoa_r+0x8d4>)
 8006314:	f7f9 ff28 	bl	8000168 <__aeabi_dsub>
 8006318:	4602      	mov	r2, r0
 800631a:	460b      	mov	r3, r1
 800631c:	4630      	mov	r0, r6
 800631e:	4639      	mov	r1, r7
 8006320:	f7fa fb4c 	bl	80009bc <__aeabi_dcmplt>
 8006324:	2800      	cmp	r0, #0
 8006326:	f43f af1d 	beq.w	8006164 <_dtoa_r+0x474>
 800632a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800632c:	1e7b      	subs	r3, r7, #1
 800632e:	9314      	str	r3, [sp, #80]	; 0x50
 8006330:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006334:	2b30      	cmp	r3, #48	; 0x30
 8006336:	d0f8      	beq.n	800632a <_dtoa_r+0x63a>
 8006338:	46c1      	mov	r9, r8
 800633a:	e03a      	b.n	80063b2 <_dtoa_r+0x6c2>
 800633c:	4ba2      	ldr	r3, [pc, #648]	; (80065c8 <_dtoa_r+0x8d8>)
 800633e:	f7fa f8cb 	bl	80004d8 <__aeabi_dmul>
 8006342:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006346:	e7bc      	b.n	80062c2 <_dtoa_r+0x5d2>
 8006348:	9f08      	ldr	r7, [sp, #32]
 800634a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800634e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006352:	f7fa f9eb 	bl	800072c <__aeabi_ddiv>
 8006356:	f7fa fb6f 	bl	8000a38 <__aeabi_d2iz>
 800635a:	4604      	mov	r4, r0
 800635c:	f7fa f852 	bl	8000404 <__aeabi_i2d>
 8006360:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006364:	f7fa f8b8 	bl	80004d8 <__aeabi_dmul>
 8006368:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800636c:	460b      	mov	r3, r1
 800636e:	4602      	mov	r2, r0
 8006370:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006374:	f7f9 fef8 	bl	8000168 <__aeabi_dsub>
 8006378:	f807 6b01 	strb.w	r6, [r7], #1
 800637c:	9e08      	ldr	r6, [sp, #32]
 800637e:	9b02      	ldr	r3, [sp, #8]
 8006380:	1bbe      	subs	r6, r7, r6
 8006382:	42b3      	cmp	r3, r6
 8006384:	d13a      	bne.n	80063fc <_dtoa_r+0x70c>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	f7f9 feef 	bl	800016c <__adddf3>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006396:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800639a:	f7fa fb2d 	bl	80009f8 <__aeabi_dcmpgt>
 800639e:	bb58      	cbnz	r0, 80063f8 <_dtoa_r+0x708>
 80063a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063a8:	f7fa fafe 	bl	80009a8 <__aeabi_dcmpeq>
 80063ac:	b108      	cbz	r0, 80063b2 <_dtoa_r+0x6c2>
 80063ae:	07e1      	lsls	r1, r4, #31
 80063b0:	d422      	bmi.n	80063f8 <_dtoa_r+0x708>
 80063b2:	4628      	mov	r0, r5
 80063b4:	4651      	mov	r1, sl
 80063b6:	f000 fe69 	bl	800708c <_Bfree>
 80063ba:	2300      	movs	r3, #0
 80063bc:	703b      	strb	r3, [r7, #0]
 80063be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80063c0:	f109 0001 	add.w	r0, r9, #1
 80063c4:	6018      	str	r0, [r3, #0]
 80063c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f43f acdf 	beq.w	8005d8c <_dtoa_r+0x9c>
 80063ce:	601f      	str	r7, [r3, #0]
 80063d0:	e4dc      	b.n	8005d8c <_dtoa_r+0x9c>
 80063d2:	4627      	mov	r7, r4
 80063d4:	463b      	mov	r3, r7
 80063d6:	461f      	mov	r7, r3
 80063d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063dc:	2a39      	cmp	r2, #57	; 0x39
 80063de:	d107      	bne.n	80063f0 <_dtoa_r+0x700>
 80063e0:	9a08      	ldr	r2, [sp, #32]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d1f7      	bne.n	80063d6 <_dtoa_r+0x6e6>
 80063e6:	2230      	movs	r2, #48	; 0x30
 80063e8:	9908      	ldr	r1, [sp, #32]
 80063ea:	f108 0801 	add.w	r8, r8, #1
 80063ee:	700a      	strb	r2, [r1, #0]
 80063f0:	781a      	ldrb	r2, [r3, #0]
 80063f2:	3201      	adds	r2, #1
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	e79f      	b.n	8006338 <_dtoa_r+0x648>
 80063f8:	46c8      	mov	r8, r9
 80063fa:	e7eb      	b.n	80063d4 <_dtoa_r+0x6e4>
 80063fc:	2200      	movs	r2, #0
 80063fe:	4b72      	ldr	r3, [pc, #456]	; (80065c8 <_dtoa_r+0x8d8>)
 8006400:	f7fa f86a 	bl	80004d8 <__aeabi_dmul>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800640c:	2200      	movs	r2, #0
 800640e:	2300      	movs	r3, #0
 8006410:	f7fa faca 	bl	80009a8 <__aeabi_dcmpeq>
 8006414:	2800      	cmp	r0, #0
 8006416:	d098      	beq.n	800634a <_dtoa_r+0x65a>
 8006418:	e7cb      	b.n	80063b2 <_dtoa_r+0x6c2>
 800641a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800641c:	2a00      	cmp	r2, #0
 800641e:	f000 80cd 	beq.w	80065bc <_dtoa_r+0x8cc>
 8006422:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006424:	2a01      	cmp	r2, #1
 8006426:	f300 80af 	bgt.w	8006588 <_dtoa_r+0x898>
 800642a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800642c:	2a00      	cmp	r2, #0
 800642e:	f000 80a7 	beq.w	8006580 <_dtoa_r+0x890>
 8006432:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006436:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006438:	9f06      	ldr	r7, [sp, #24]
 800643a:	9a06      	ldr	r2, [sp, #24]
 800643c:	2101      	movs	r1, #1
 800643e:	441a      	add	r2, r3
 8006440:	9206      	str	r2, [sp, #24]
 8006442:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006444:	4628      	mov	r0, r5
 8006446:	441a      	add	r2, r3
 8006448:	9209      	str	r2, [sp, #36]	; 0x24
 800644a:	f000 ff23 	bl	8007294 <__i2b>
 800644e:	4606      	mov	r6, r0
 8006450:	2f00      	cmp	r7, #0
 8006452:	dd0c      	ble.n	800646e <_dtoa_r+0x77e>
 8006454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006456:	2b00      	cmp	r3, #0
 8006458:	dd09      	ble.n	800646e <_dtoa_r+0x77e>
 800645a:	42bb      	cmp	r3, r7
 800645c:	bfa8      	it	ge
 800645e:	463b      	movge	r3, r7
 8006460:	9a06      	ldr	r2, [sp, #24]
 8006462:	1aff      	subs	r7, r7, r3
 8006464:	1ad2      	subs	r2, r2, r3
 8006466:	9206      	str	r2, [sp, #24]
 8006468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	9309      	str	r3, [sp, #36]	; 0x24
 800646e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006470:	b1f3      	cbz	r3, 80064b0 <_dtoa_r+0x7c0>
 8006472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 80a9 	beq.w	80065cc <_dtoa_r+0x8dc>
 800647a:	2c00      	cmp	r4, #0
 800647c:	dd10      	ble.n	80064a0 <_dtoa_r+0x7b0>
 800647e:	4631      	mov	r1, r6
 8006480:	4622      	mov	r2, r4
 8006482:	4628      	mov	r0, r5
 8006484:	f000 ffc0 	bl	8007408 <__pow5mult>
 8006488:	4652      	mov	r2, sl
 800648a:	4601      	mov	r1, r0
 800648c:	4606      	mov	r6, r0
 800648e:	4628      	mov	r0, r5
 8006490:	f000 ff16 	bl	80072c0 <__multiply>
 8006494:	4680      	mov	r8, r0
 8006496:	4651      	mov	r1, sl
 8006498:	4628      	mov	r0, r5
 800649a:	f000 fdf7 	bl	800708c <_Bfree>
 800649e:	46c2      	mov	sl, r8
 80064a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064a2:	1b1a      	subs	r2, r3, r4
 80064a4:	d004      	beq.n	80064b0 <_dtoa_r+0x7c0>
 80064a6:	4651      	mov	r1, sl
 80064a8:	4628      	mov	r0, r5
 80064aa:	f000 ffad 	bl	8007408 <__pow5mult>
 80064ae:	4682      	mov	sl, r0
 80064b0:	2101      	movs	r1, #1
 80064b2:	4628      	mov	r0, r5
 80064b4:	f000 feee 	bl	8007294 <__i2b>
 80064b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064ba:	4604      	mov	r4, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f340 8087 	ble.w	80065d0 <_dtoa_r+0x8e0>
 80064c2:	461a      	mov	r2, r3
 80064c4:	4601      	mov	r1, r0
 80064c6:	4628      	mov	r0, r5
 80064c8:	f000 ff9e 	bl	8007408 <__pow5mult>
 80064cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064ce:	4604      	mov	r4, r0
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	f340 8080 	ble.w	80065d6 <_dtoa_r+0x8e6>
 80064d6:	f04f 0800 	mov.w	r8, #0
 80064da:	6923      	ldr	r3, [r4, #16]
 80064dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80064e0:	6918      	ldr	r0, [r3, #16]
 80064e2:	f000 fe89 	bl	80071f8 <__hi0bits>
 80064e6:	f1c0 0020 	rsb	r0, r0, #32
 80064ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ec:	4418      	add	r0, r3
 80064ee:	f010 001f 	ands.w	r0, r0, #31
 80064f2:	f000 8092 	beq.w	800661a <_dtoa_r+0x92a>
 80064f6:	f1c0 0320 	rsb	r3, r0, #32
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	f340 808a 	ble.w	8006614 <_dtoa_r+0x924>
 8006500:	f1c0 001c 	rsb	r0, r0, #28
 8006504:	9b06      	ldr	r3, [sp, #24]
 8006506:	4407      	add	r7, r0
 8006508:	4403      	add	r3, r0
 800650a:	9306      	str	r3, [sp, #24]
 800650c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650e:	4403      	add	r3, r0
 8006510:	9309      	str	r3, [sp, #36]	; 0x24
 8006512:	9b06      	ldr	r3, [sp, #24]
 8006514:	2b00      	cmp	r3, #0
 8006516:	dd05      	ble.n	8006524 <_dtoa_r+0x834>
 8006518:	4651      	mov	r1, sl
 800651a:	461a      	mov	r2, r3
 800651c:	4628      	mov	r0, r5
 800651e:	f000 ffcd 	bl	80074bc <__lshift>
 8006522:	4682      	mov	sl, r0
 8006524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006526:	2b00      	cmp	r3, #0
 8006528:	dd05      	ble.n	8006536 <_dtoa_r+0x846>
 800652a:	4621      	mov	r1, r4
 800652c:	461a      	mov	r2, r3
 800652e:	4628      	mov	r0, r5
 8006530:	f000 ffc4 	bl	80074bc <__lshift>
 8006534:	4604      	mov	r4, r0
 8006536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d070      	beq.n	800661e <_dtoa_r+0x92e>
 800653c:	4621      	mov	r1, r4
 800653e:	4650      	mov	r0, sl
 8006540:	f001 f828 	bl	8007594 <__mcmp>
 8006544:	2800      	cmp	r0, #0
 8006546:	da6a      	bge.n	800661e <_dtoa_r+0x92e>
 8006548:	2300      	movs	r3, #0
 800654a:	4651      	mov	r1, sl
 800654c:	220a      	movs	r2, #10
 800654e:	4628      	mov	r0, r5
 8006550:	f000 fdbe 	bl	80070d0 <__multadd>
 8006554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006556:	4682      	mov	sl, r0
 8006558:	f109 39ff 	add.w	r9, r9, #4294967295
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8193 	beq.w	8006888 <_dtoa_r+0xb98>
 8006562:	4631      	mov	r1, r6
 8006564:	2300      	movs	r3, #0
 8006566:	220a      	movs	r2, #10
 8006568:	4628      	mov	r0, r5
 800656a:	f000 fdb1 	bl	80070d0 <__multadd>
 800656e:	f1bb 0f00 	cmp.w	fp, #0
 8006572:	4606      	mov	r6, r0
 8006574:	f300 8093 	bgt.w	800669e <_dtoa_r+0x9ae>
 8006578:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800657a:	2b02      	cmp	r3, #2
 800657c:	dc57      	bgt.n	800662e <_dtoa_r+0x93e>
 800657e:	e08e      	b.n	800669e <_dtoa_r+0x9ae>
 8006580:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006582:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006586:	e756      	b.n	8006436 <_dtoa_r+0x746>
 8006588:	9b02      	ldr	r3, [sp, #8]
 800658a:	1e5c      	subs	r4, r3, #1
 800658c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800658e:	42a3      	cmp	r3, r4
 8006590:	bfb7      	itett	lt
 8006592:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006594:	1b1c      	subge	r4, r3, r4
 8006596:	1ae2      	sublt	r2, r4, r3
 8006598:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800659a:	bfbe      	ittt	lt
 800659c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800659e:	189b      	addlt	r3, r3, r2
 80065a0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80065a2:	9b02      	ldr	r3, [sp, #8]
 80065a4:	bfb8      	it	lt
 80065a6:	2400      	movlt	r4, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bfbb      	ittet	lt
 80065ac:	9b06      	ldrlt	r3, [sp, #24]
 80065ae:	9a02      	ldrlt	r2, [sp, #8]
 80065b0:	9f06      	ldrge	r7, [sp, #24]
 80065b2:	1a9f      	sublt	r7, r3, r2
 80065b4:	bfac      	ite	ge
 80065b6:	9b02      	ldrge	r3, [sp, #8]
 80065b8:	2300      	movlt	r3, #0
 80065ba:	e73e      	b.n	800643a <_dtoa_r+0x74a>
 80065bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80065be:	9f06      	ldr	r7, [sp, #24]
 80065c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80065c2:	e745      	b.n	8006450 <_dtoa_r+0x760>
 80065c4:	3fe00000 	.word	0x3fe00000
 80065c8:	40240000 	.word	0x40240000
 80065cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065ce:	e76a      	b.n	80064a6 <_dtoa_r+0x7b6>
 80065d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	dc19      	bgt.n	800660a <_dtoa_r+0x91a>
 80065d6:	9b04      	ldr	r3, [sp, #16]
 80065d8:	b9bb      	cbnz	r3, 800660a <_dtoa_r+0x91a>
 80065da:	9b05      	ldr	r3, [sp, #20]
 80065dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065e0:	b99b      	cbnz	r3, 800660a <_dtoa_r+0x91a>
 80065e2:	9b05      	ldr	r3, [sp, #20]
 80065e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065e8:	0d1b      	lsrs	r3, r3, #20
 80065ea:	051b      	lsls	r3, r3, #20
 80065ec:	b183      	cbz	r3, 8006610 <_dtoa_r+0x920>
 80065ee:	f04f 0801 	mov.w	r8, #1
 80065f2:	9b06      	ldr	r3, [sp, #24]
 80065f4:	3301      	adds	r3, #1
 80065f6:	9306      	str	r3, [sp, #24]
 80065f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065fa:	3301      	adds	r3, #1
 80065fc:	9309      	str	r3, [sp, #36]	; 0x24
 80065fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006600:	2b00      	cmp	r3, #0
 8006602:	f47f af6a 	bne.w	80064da <_dtoa_r+0x7ea>
 8006606:	2001      	movs	r0, #1
 8006608:	e76f      	b.n	80064ea <_dtoa_r+0x7fa>
 800660a:	f04f 0800 	mov.w	r8, #0
 800660e:	e7f6      	b.n	80065fe <_dtoa_r+0x90e>
 8006610:	4698      	mov	r8, r3
 8006612:	e7f4      	b.n	80065fe <_dtoa_r+0x90e>
 8006614:	f43f af7d 	beq.w	8006512 <_dtoa_r+0x822>
 8006618:	4618      	mov	r0, r3
 800661a:	301c      	adds	r0, #28
 800661c:	e772      	b.n	8006504 <_dtoa_r+0x814>
 800661e:	9b02      	ldr	r3, [sp, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	dc36      	bgt.n	8006692 <_dtoa_r+0x9a2>
 8006624:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006626:	2b02      	cmp	r3, #2
 8006628:	dd33      	ble.n	8006692 <_dtoa_r+0x9a2>
 800662a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800662e:	f1bb 0f00 	cmp.w	fp, #0
 8006632:	d10d      	bne.n	8006650 <_dtoa_r+0x960>
 8006634:	4621      	mov	r1, r4
 8006636:	465b      	mov	r3, fp
 8006638:	2205      	movs	r2, #5
 800663a:	4628      	mov	r0, r5
 800663c:	f000 fd48 	bl	80070d0 <__multadd>
 8006640:	4601      	mov	r1, r0
 8006642:	4604      	mov	r4, r0
 8006644:	4650      	mov	r0, sl
 8006646:	f000 ffa5 	bl	8007594 <__mcmp>
 800664a:	2800      	cmp	r0, #0
 800664c:	f73f adb6 	bgt.w	80061bc <_dtoa_r+0x4cc>
 8006650:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006652:	9f08      	ldr	r7, [sp, #32]
 8006654:	ea6f 0903 	mvn.w	r9, r3
 8006658:	f04f 0800 	mov.w	r8, #0
 800665c:	4621      	mov	r1, r4
 800665e:	4628      	mov	r0, r5
 8006660:	f000 fd14 	bl	800708c <_Bfree>
 8006664:	2e00      	cmp	r6, #0
 8006666:	f43f aea4 	beq.w	80063b2 <_dtoa_r+0x6c2>
 800666a:	f1b8 0f00 	cmp.w	r8, #0
 800666e:	d005      	beq.n	800667c <_dtoa_r+0x98c>
 8006670:	45b0      	cmp	r8, r6
 8006672:	d003      	beq.n	800667c <_dtoa_r+0x98c>
 8006674:	4641      	mov	r1, r8
 8006676:	4628      	mov	r0, r5
 8006678:	f000 fd08 	bl	800708c <_Bfree>
 800667c:	4631      	mov	r1, r6
 800667e:	4628      	mov	r0, r5
 8006680:	f000 fd04 	bl	800708c <_Bfree>
 8006684:	e695      	b.n	80063b2 <_dtoa_r+0x6c2>
 8006686:	2400      	movs	r4, #0
 8006688:	4626      	mov	r6, r4
 800668a:	e7e1      	b.n	8006650 <_dtoa_r+0x960>
 800668c:	46c1      	mov	r9, r8
 800668e:	4626      	mov	r6, r4
 8006690:	e594      	b.n	80061bc <_dtoa_r+0x4cc>
 8006692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006694:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 80fc 	beq.w	8006896 <_dtoa_r+0xba6>
 800669e:	2f00      	cmp	r7, #0
 80066a0:	dd05      	ble.n	80066ae <_dtoa_r+0x9be>
 80066a2:	4631      	mov	r1, r6
 80066a4:	463a      	mov	r2, r7
 80066a6:	4628      	mov	r0, r5
 80066a8:	f000 ff08 	bl	80074bc <__lshift>
 80066ac:	4606      	mov	r6, r0
 80066ae:	f1b8 0f00 	cmp.w	r8, #0
 80066b2:	d05c      	beq.n	800676e <_dtoa_r+0xa7e>
 80066b4:	4628      	mov	r0, r5
 80066b6:	6871      	ldr	r1, [r6, #4]
 80066b8:	f000 fca8 	bl	800700c <_Balloc>
 80066bc:	4607      	mov	r7, r0
 80066be:	b928      	cbnz	r0, 80066cc <_dtoa_r+0x9dc>
 80066c0:	4602      	mov	r2, r0
 80066c2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066c6:	4b7e      	ldr	r3, [pc, #504]	; (80068c0 <_dtoa_r+0xbd0>)
 80066c8:	f7ff bb26 	b.w	8005d18 <_dtoa_r+0x28>
 80066cc:	6932      	ldr	r2, [r6, #16]
 80066ce:	f106 010c 	add.w	r1, r6, #12
 80066d2:	3202      	adds	r2, #2
 80066d4:	0092      	lsls	r2, r2, #2
 80066d6:	300c      	adds	r0, #12
 80066d8:	f000 fc8a 	bl	8006ff0 <memcpy>
 80066dc:	2201      	movs	r2, #1
 80066de:	4639      	mov	r1, r7
 80066e0:	4628      	mov	r0, r5
 80066e2:	f000 feeb 	bl	80074bc <__lshift>
 80066e6:	46b0      	mov	r8, r6
 80066e8:	4606      	mov	r6, r0
 80066ea:	9b08      	ldr	r3, [sp, #32]
 80066ec:	3301      	adds	r3, #1
 80066ee:	9302      	str	r3, [sp, #8]
 80066f0:	9b08      	ldr	r3, [sp, #32]
 80066f2:	445b      	add	r3, fp
 80066f4:	930a      	str	r3, [sp, #40]	; 0x28
 80066f6:	9b04      	ldr	r3, [sp, #16]
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	9309      	str	r3, [sp, #36]	; 0x24
 80066fe:	9b02      	ldr	r3, [sp, #8]
 8006700:	4621      	mov	r1, r4
 8006702:	4650      	mov	r0, sl
 8006704:	f103 3bff 	add.w	fp, r3, #4294967295
 8006708:	f7ff fa64 	bl	8005bd4 <quorem>
 800670c:	4603      	mov	r3, r0
 800670e:	4641      	mov	r1, r8
 8006710:	3330      	adds	r3, #48	; 0x30
 8006712:	9004      	str	r0, [sp, #16]
 8006714:	4650      	mov	r0, sl
 8006716:	930b      	str	r3, [sp, #44]	; 0x2c
 8006718:	f000 ff3c 	bl	8007594 <__mcmp>
 800671c:	4632      	mov	r2, r6
 800671e:	9006      	str	r0, [sp, #24]
 8006720:	4621      	mov	r1, r4
 8006722:	4628      	mov	r0, r5
 8006724:	f000 ff52 	bl	80075cc <__mdiff>
 8006728:	68c2      	ldr	r2, [r0, #12]
 800672a:	4607      	mov	r7, r0
 800672c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800672e:	bb02      	cbnz	r2, 8006772 <_dtoa_r+0xa82>
 8006730:	4601      	mov	r1, r0
 8006732:	4650      	mov	r0, sl
 8006734:	f000 ff2e 	bl	8007594 <__mcmp>
 8006738:	4602      	mov	r2, r0
 800673a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800673c:	4639      	mov	r1, r7
 800673e:	4628      	mov	r0, r5
 8006740:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006744:	f000 fca2 	bl	800708c <_Bfree>
 8006748:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800674a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800674c:	9f02      	ldr	r7, [sp, #8]
 800674e:	ea43 0102 	orr.w	r1, r3, r2
 8006752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006754:	430b      	orrs	r3, r1
 8006756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006758:	d10d      	bne.n	8006776 <_dtoa_r+0xa86>
 800675a:	2b39      	cmp	r3, #57	; 0x39
 800675c:	d027      	beq.n	80067ae <_dtoa_r+0xabe>
 800675e:	9a06      	ldr	r2, [sp, #24]
 8006760:	2a00      	cmp	r2, #0
 8006762:	dd01      	ble.n	8006768 <_dtoa_r+0xa78>
 8006764:	9b04      	ldr	r3, [sp, #16]
 8006766:	3331      	adds	r3, #49	; 0x31
 8006768:	f88b 3000 	strb.w	r3, [fp]
 800676c:	e776      	b.n	800665c <_dtoa_r+0x96c>
 800676e:	4630      	mov	r0, r6
 8006770:	e7b9      	b.n	80066e6 <_dtoa_r+0x9f6>
 8006772:	2201      	movs	r2, #1
 8006774:	e7e2      	b.n	800673c <_dtoa_r+0xa4c>
 8006776:	9906      	ldr	r1, [sp, #24]
 8006778:	2900      	cmp	r1, #0
 800677a:	db04      	blt.n	8006786 <_dtoa_r+0xa96>
 800677c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800677e:	4301      	orrs	r1, r0
 8006780:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006782:	4301      	orrs	r1, r0
 8006784:	d120      	bne.n	80067c8 <_dtoa_r+0xad8>
 8006786:	2a00      	cmp	r2, #0
 8006788:	ddee      	ble.n	8006768 <_dtoa_r+0xa78>
 800678a:	4651      	mov	r1, sl
 800678c:	2201      	movs	r2, #1
 800678e:	4628      	mov	r0, r5
 8006790:	9302      	str	r3, [sp, #8]
 8006792:	f000 fe93 	bl	80074bc <__lshift>
 8006796:	4621      	mov	r1, r4
 8006798:	4682      	mov	sl, r0
 800679a:	f000 fefb 	bl	8007594 <__mcmp>
 800679e:	2800      	cmp	r0, #0
 80067a0:	9b02      	ldr	r3, [sp, #8]
 80067a2:	dc02      	bgt.n	80067aa <_dtoa_r+0xaba>
 80067a4:	d1e0      	bne.n	8006768 <_dtoa_r+0xa78>
 80067a6:	07da      	lsls	r2, r3, #31
 80067a8:	d5de      	bpl.n	8006768 <_dtoa_r+0xa78>
 80067aa:	2b39      	cmp	r3, #57	; 0x39
 80067ac:	d1da      	bne.n	8006764 <_dtoa_r+0xa74>
 80067ae:	2339      	movs	r3, #57	; 0x39
 80067b0:	f88b 3000 	strb.w	r3, [fp]
 80067b4:	463b      	mov	r3, r7
 80067b6:	461f      	mov	r7, r3
 80067b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80067bc:	3b01      	subs	r3, #1
 80067be:	2a39      	cmp	r2, #57	; 0x39
 80067c0:	d050      	beq.n	8006864 <_dtoa_r+0xb74>
 80067c2:	3201      	adds	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]
 80067c6:	e749      	b.n	800665c <_dtoa_r+0x96c>
 80067c8:	2a00      	cmp	r2, #0
 80067ca:	dd03      	ble.n	80067d4 <_dtoa_r+0xae4>
 80067cc:	2b39      	cmp	r3, #57	; 0x39
 80067ce:	d0ee      	beq.n	80067ae <_dtoa_r+0xabe>
 80067d0:	3301      	adds	r3, #1
 80067d2:	e7c9      	b.n	8006768 <_dtoa_r+0xa78>
 80067d4:	9a02      	ldr	r2, [sp, #8]
 80067d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067dc:	428a      	cmp	r2, r1
 80067de:	d02a      	beq.n	8006836 <_dtoa_r+0xb46>
 80067e0:	4651      	mov	r1, sl
 80067e2:	2300      	movs	r3, #0
 80067e4:	220a      	movs	r2, #10
 80067e6:	4628      	mov	r0, r5
 80067e8:	f000 fc72 	bl	80070d0 <__multadd>
 80067ec:	45b0      	cmp	r8, r6
 80067ee:	4682      	mov	sl, r0
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	f04f 020a 	mov.w	r2, #10
 80067f8:	4641      	mov	r1, r8
 80067fa:	4628      	mov	r0, r5
 80067fc:	d107      	bne.n	800680e <_dtoa_r+0xb1e>
 80067fe:	f000 fc67 	bl	80070d0 <__multadd>
 8006802:	4680      	mov	r8, r0
 8006804:	4606      	mov	r6, r0
 8006806:	9b02      	ldr	r3, [sp, #8]
 8006808:	3301      	adds	r3, #1
 800680a:	9302      	str	r3, [sp, #8]
 800680c:	e777      	b.n	80066fe <_dtoa_r+0xa0e>
 800680e:	f000 fc5f 	bl	80070d0 <__multadd>
 8006812:	4631      	mov	r1, r6
 8006814:	4680      	mov	r8, r0
 8006816:	2300      	movs	r3, #0
 8006818:	220a      	movs	r2, #10
 800681a:	4628      	mov	r0, r5
 800681c:	f000 fc58 	bl	80070d0 <__multadd>
 8006820:	4606      	mov	r6, r0
 8006822:	e7f0      	b.n	8006806 <_dtoa_r+0xb16>
 8006824:	f1bb 0f00 	cmp.w	fp, #0
 8006828:	bfcc      	ite	gt
 800682a:	465f      	movgt	r7, fp
 800682c:	2701      	movle	r7, #1
 800682e:	f04f 0800 	mov.w	r8, #0
 8006832:	9a08      	ldr	r2, [sp, #32]
 8006834:	4417      	add	r7, r2
 8006836:	4651      	mov	r1, sl
 8006838:	2201      	movs	r2, #1
 800683a:	4628      	mov	r0, r5
 800683c:	9302      	str	r3, [sp, #8]
 800683e:	f000 fe3d 	bl	80074bc <__lshift>
 8006842:	4621      	mov	r1, r4
 8006844:	4682      	mov	sl, r0
 8006846:	f000 fea5 	bl	8007594 <__mcmp>
 800684a:	2800      	cmp	r0, #0
 800684c:	dcb2      	bgt.n	80067b4 <_dtoa_r+0xac4>
 800684e:	d102      	bne.n	8006856 <_dtoa_r+0xb66>
 8006850:	9b02      	ldr	r3, [sp, #8]
 8006852:	07db      	lsls	r3, r3, #31
 8006854:	d4ae      	bmi.n	80067b4 <_dtoa_r+0xac4>
 8006856:	463b      	mov	r3, r7
 8006858:	461f      	mov	r7, r3
 800685a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800685e:	2a30      	cmp	r2, #48	; 0x30
 8006860:	d0fa      	beq.n	8006858 <_dtoa_r+0xb68>
 8006862:	e6fb      	b.n	800665c <_dtoa_r+0x96c>
 8006864:	9a08      	ldr	r2, [sp, #32]
 8006866:	429a      	cmp	r2, r3
 8006868:	d1a5      	bne.n	80067b6 <_dtoa_r+0xac6>
 800686a:	2331      	movs	r3, #49	; 0x31
 800686c:	f109 0901 	add.w	r9, r9, #1
 8006870:	7013      	strb	r3, [r2, #0]
 8006872:	e6f3      	b.n	800665c <_dtoa_r+0x96c>
 8006874:	4b13      	ldr	r3, [pc, #76]	; (80068c4 <_dtoa_r+0xbd4>)
 8006876:	f7ff baa7 	b.w	8005dc8 <_dtoa_r+0xd8>
 800687a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800687c:	2b00      	cmp	r3, #0
 800687e:	f47f aa80 	bne.w	8005d82 <_dtoa_r+0x92>
 8006882:	4b11      	ldr	r3, [pc, #68]	; (80068c8 <_dtoa_r+0xbd8>)
 8006884:	f7ff baa0 	b.w	8005dc8 <_dtoa_r+0xd8>
 8006888:	f1bb 0f00 	cmp.w	fp, #0
 800688c:	dc03      	bgt.n	8006896 <_dtoa_r+0xba6>
 800688e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006890:	2b02      	cmp	r3, #2
 8006892:	f73f aecc 	bgt.w	800662e <_dtoa_r+0x93e>
 8006896:	9f08      	ldr	r7, [sp, #32]
 8006898:	4621      	mov	r1, r4
 800689a:	4650      	mov	r0, sl
 800689c:	f7ff f99a 	bl	8005bd4 <quorem>
 80068a0:	9a08      	ldr	r2, [sp, #32]
 80068a2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80068a6:	f807 3b01 	strb.w	r3, [r7], #1
 80068aa:	1aba      	subs	r2, r7, r2
 80068ac:	4593      	cmp	fp, r2
 80068ae:	ddb9      	ble.n	8006824 <_dtoa_r+0xb34>
 80068b0:	4651      	mov	r1, sl
 80068b2:	2300      	movs	r3, #0
 80068b4:	220a      	movs	r2, #10
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 fc0a 	bl	80070d0 <__multadd>
 80068bc:	4682      	mov	sl, r0
 80068be:	e7eb      	b.n	8006898 <_dtoa_r+0xba8>
 80068c0:	0800c52c 	.word	0x0800c52c
 80068c4:	0800c328 	.word	0x0800c328
 80068c8:	0800c4a9 	.word	0x0800c4a9

080068cc <rshift>:
 80068cc:	6903      	ldr	r3, [r0, #16]
 80068ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80068d6:	f100 0414 	add.w	r4, r0, #20
 80068da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80068de:	dd46      	ble.n	800696e <rshift+0xa2>
 80068e0:	f011 011f 	ands.w	r1, r1, #31
 80068e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80068e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80068ec:	d10c      	bne.n	8006908 <rshift+0x3c>
 80068ee:	4629      	mov	r1, r5
 80068f0:	f100 0710 	add.w	r7, r0, #16
 80068f4:	42b1      	cmp	r1, r6
 80068f6:	d335      	bcc.n	8006964 <rshift+0x98>
 80068f8:	1a9b      	subs	r3, r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	1eea      	subs	r2, r5, #3
 80068fe:	4296      	cmp	r6, r2
 8006900:	bf38      	it	cc
 8006902:	2300      	movcc	r3, #0
 8006904:	4423      	add	r3, r4
 8006906:	e015      	b.n	8006934 <rshift+0x68>
 8006908:	46a1      	mov	r9, r4
 800690a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800690e:	f1c1 0820 	rsb	r8, r1, #32
 8006912:	40cf      	lsrs	r7, r1
 8006914:	f105 0e04 	add.w	lr, r5, #4
 8006918:	4576      	cmp	r6, lr
 800691a:	46f4      	mov	ip, lr
 800691c:	d816      	bhi.n	800694c <rshift+0x80>
 800691e:	1a9b      	subs	r3, r3, r2
 8006920:	009a      	lsls	r2, r3, #2
 8006922:	3a04      	subs	r2, #4
 8006924:	3501      	adds	r5, #1
 8006926:	42ae      	cmp	r6, r5
 8006928:	bf38      	it	cc
 800692a:	2200      	movcc	r2, #0
 800692c:	18a3      	adds	r3, r4, r2
 800692e:	50a7      	str	r7, [r4, r2]
 8006930:	b107      	cbz	r7, 8006934 <rshift+0x68>
 8006932:	3304      	adds	r3, #4
 8006934:	42a3      	cmp	r3, r4
 8006936:	eba3 0204 	sub.w	r2, r3, r4
 800693a:	bf08      	it	eq
 800693c:	2300      	moveq	r3, #0
 800693e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006942:	6102      	str	r2, [r0, #16]
 8006944:	bf08      	it	eq
 8006946:	6143      	streq	r3, [r0, #20]
 8006948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800694c:	f8dc c000 	ldr.w	ip, [ip]
 8006950:	fa0c fc08 	lsl.w	ip, ip, r8
 8006954:	ea4c 0707 	orr.w	r7, ip, r7
 8006958:	f849 7b04 	str.w	r7, [r9], #4
 800695c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006960:	40cf      	lsrs	r7, r1
 8006962:	e7d9      	b.n	8006918 <rshift+0x4c>
 8006964:	f851 cb04 	ldr.w	ip, [r1], #4
 8006968:	f847 cf04 	str.w	ip, [r7, #4]!
 800696c:	e7c2      	b.n	80068f4 <rshift+0x28>
 800696e:	4623      	mov	r3, r4
 8006970:	e7e0      	b.n	8006934 <rshift+0x68>

08006972 <__hexdig_fun>:
 8006972:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006976:	2b09      	cmp	r3, #9
 8006978:	d802      	bhi.n	8006980 <__hexdig_fun+0xe>
 800697a:	3820      	subs	r0, #32
 800697c:	b2c0      	uxtb	r0, r0
 800697e:	4770      	bx	lr
 8006980:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006984:	2b05      	cmp	r3, #5
 8006986:	d801      	bhi.n	800698c <__hexdig_fun+0x1a>
 8006988:	3847      	subs	r0, #71	; 0x47
 800698a:	e7f7      	b.n	800697c <__hexdig_fun+0xa>
 800698c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006990:	2b05      	cmp	r3, #5
 8006992:	d801      	bhi.n	8006998 <__hexdig_fun+0x26>
 8006994:	3827      	subs	r0, #39	; 0x27
 8006996:	e7f1      	b.n	800697c <__hexdig_fun+0xa>
 8006998:	2000      	movs	r0, #0
 800699a:	4770      	bx	lr

0800699c <__gethex>:
 800699c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a0:	b08b      	sub	sp, #44	; 0x2c
 80069a2:	9306      	str	r3, [sp, #24]
 80069a4:	4bb9      	ldr	r3, [pc, #740]	; (8006c8c <__gethex+0x2f0>)
 80069a6:	9002      	str	r0, [sp, #8]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	468b      	mov	fp, r1
 80069ac:	4618      	mov	r0, r3
 80069ae:	4690      	mov	r8, r2
 80069b0:	9303      	str	r3, [sp, #12]
 80069b2:	f7f9 fbcd 	bl	8000150 <strlen>
 80069b6:	4682      	mov	sl, r0
 80069b8:	9b03      	ldr	r3, [sp, #12]
 80069ba:	f8db 2000 	ldr.w	r2, [fp]
 80069be:	4403      	add	r3, r0
 80069c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80069c4:	9307      	str	r3, [sp, #28]
 80069c6:	1c93      	adds	r3, r2, #2
 80069c8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80069cc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80069d0:	32fe      	adds	r2, #254	; 0xfe
 80069d2:	18d1      	adds	r1, r2, r3
 80069d4:	461f      	mov	r7, r3
 80069d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80069da:	9101      	str	r1, [sp, #4]
 80069dc:	2830      	cmp	r0, #48	; 0x30
 80069de:	d0f8      	beq.n	80069d2 <__gethex+0x36>
 80069e0:	f7ff ffc7 	bl	8006972 <__hexdig_fun>
 80069e4:	4604      	mov	r4, r0
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d13a      	bne.n	8006a60 <__gethex+0xc4>
 80069ea:	4652      	mov	r2, sl
 80069ec:	4638      	mov	r0, r7
 80069ee:	9903      	ldr	r1, [sp, #12]
 80069f0:	f001 f9ea 	bl	8007dc8 <strncmp>
 80069f4:	4605      	mov	r5, r0
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d166      	bne.n	8006ac8 <__gethex+0x12c>
 80069fa:	f817 000a 	ldrb.w	r0, [r7, sl]
 80069fe:	eb07 060a 	add.w	r6, r7, sl
 8006a02:	f7ff ffb6 	bl	8006972 <__hexdig_fun>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d060      	beq.n	8006acc <__gethex+0x130>
 8006a0a:	4633      	mov	r3, r6
 8006a0c:	7818      	ldrb	r0, [r3, #0]
 8006a0e:	461f      	mov	r7, r3
 8006a10:	2830      	cmp	r0, #48	; 0x30
 8006a12:	f103 0301 	add.w	r3, r3, #1
 8006a16:	d0f9      	beq.n	8006a0c <__gethex+0x70>
 8006a18:	f7ff ffab 	bl	8006972 <__hexdig_fun>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	fab0 f480 	clz	r4, r0
 8006a22:	4635      	mov	r5, r6
 8006a24:	0964      	lsrs	r4, r4, #5
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	463a      	mov	r2, r7
 8006a2a:	4616      	mov	r6, r2
 8006a2c:	7830      	ldrb	r0, [r6, #0]
 8006a2e:	3201      	adds	r2, #1
 8006a30:	f7ff ff9f 	bl	8006972 <__hexdig_fun>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d1f8      	bne.n	8006a2a <__gethex+0x8e>
 8006a38:	4652      	mov	r2, sl
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	9903      	ldr	r1, [sp, #12]
 8006a3e:	f001 f9c3 	bl	8007dc8 <strncmp>
 8006a42:	b980      	cbnz	r0, 8006a66 <__gethex+0xca>
 8006a44:	b94d      	cbnz	r5, 8006a5a <__gethex+0xbe>
 8006a46:	eb06 050a 	add.w	r5, r6, sl
 8006a4a:	462a      	mov	r2, r5
 8006a4c:	4616      	mov	r6, r2
 8006a4e:	7830      	ldrb	r0, [r6, #0]
 8006a50:	3201      	adds	r2, #1
 8006a52:	f7ff ff8e 	bl	8006972 <__hexdig_fun>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d1f8      	bne.n	8006a4c <__gethex+0xb0>
 8006a5a:	1bad      	subs	r5, r5, r6
 8006a5c:	00ad      	lsls	r5, r5, #2
 8006a5e:	e004      	b.n	8006a6a <__gethex+0xce>
 8006a60:	2400      	movs	r4, #0
 8006a62:	4625      	mov	r5, r4
 8006a64:	e7e0      	b.n	8006a28 <__gethex+0x8c>
 8006a66:	2d00      	cmp	r5, #0
 8006a68:	d1f7      	bne.n	8006a5a <__gethex+0xbe>
 8006a6a:	7833      	ldrb	r3, [r6, #0]
 8006a6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a70:	2b50      	cmp	r3, #80	; 0x50
 8006a72:	d139      	bne.n	8006ae8 <__gethex+0x14c>
 8006a74:	7873      	ldrb	r3, [r6, #1]
 8006a76:	2b2b      	cmp	r3, #43	; 0x2b
 8006a78:	d02a      	beq.n	8006ad0 <__gethex+0x134>
 8006a7a:	2b2d      	cmp	r3, #45	; 0x2d
 8006a7c:	d02c      	beq.n	8006ad8 <__gethex+0x13c>
 8006a7e:	f04f 0900 	mov.w	r9, #0
 8006a82:	1c71      	adds	r1, r6, #1
 8006a84:	7808      	ldrb	r0, [r1, #0]
 8006a86:	f7ff ff74 	bl	8006972 <__hexdig_fun>
 8006a8a:	1e43      	subs	r3, r0, #1
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b18      	cmp	r3, #24
 8006a90:	d82a      	bhi.n	8006ae8 <__gethex+0x14c>
 8006a92:	f1a0 0210 	sub.w	r2, r0, #16
 8006a96:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006a9a:	f7ff ff6a 	bl	8006972 <__hexdig_fun>
 8006a9e:	1e43      	subs	r3, r0, #1
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b18      	cmp	r3, #24
 8006aa4:	d91b      	bls.n	8006ade <__gethex+0x142>
 8006aa6:	f1b9 0f00 	cmp.w	r9, #0
 8006aaa:	d000      	beq.n	8006aae <__gethex+0x112>
 8006aac:	4252      	negs	r2, r2
 8006aae:	4415      	add	r5, r2
 8006ab0:	f8cb 1000 	str.w	r1, [fp]
 8006ab4:	b1d4      	cbz	r4, 8006aec <__gethex+0x150>
 8006ab6:	9b01      	ldr	r3, [sp, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	bf14      	ite	ne
 8006abc:	2700      	movne	r7, #0
 8006abe:	2706      	moveq	r7, #6
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	b00b      	add	sp, #44	; 0x2c
 8006ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac8:	463e      	mov	r6, r7
 8006aca:	4625      	mov	r5, r4
 8006acc:	2401      	movs	r4, #1
 8006ace:	e7cc      	b.n	8006a6a <__gethex+0xce>
 8006ad0:	f04f 0900 	mov.w	r9, #0
 8006ad4:	1cb1      	adds	r1, r6, #2
 8006ad6:	e7d5      	b.n	8006a84 <__gethex+0xe8>
 8006ad8:	f04f 0901 	mov.w	r9, #1
 8006adc:	e7fa      	b.n	8006ad4 <__gethex+0x138>
 8006ade:	230a      	movs	r3, #10
 8006ae0:	fb03 0202 	mla	r2, r3, r2, r0
 8006ae4:	3a10      	subs	r2, #16
 8006ae6:	e7d6      	b.n	8006a96 <__gethex+0xfa>
 8006ae8:	4631      	mov	r1, r6
 8006aea:	e7e1      	b.n	8006ab0 <__gethex+0x114>
 8006aec:	4621      	mov	r1, r4
 8006aee:	1bf3      	subs	r3, r6, r7
 8006af0:	3b01      	subs	r3, #1
 8006af2:	2b07      	cmp	r3, #7
 8006af4:	dc0a      	bgt.n	8006b0c <__gethex+0x170>
 8006af6:	9802      	ldr	r0, [sp, #8]
 8006af8:	f000 fa88 	bl	800700c <_Balloc>
 8006afc:	4604      	mov	r4, r0
 8006afe:	b940      	cbnz	r0, 8006b12 <__gethex+0x176>
 8006b00:	4602      	mov	r2, r0
 8006b02:	21de      	movs	r1, #222	; 0xde
 8006b04:	4b62      	ldr	r3, [pc, #392]	; (8006c90 <__gethex+0x2f4>)
 8006b06:	4863      	ldr	r0, [pc, #396]	; (8006c94 <__gethex+0x2f8>)
 8006b08:	f001 f97e 	bl	8007e08 <__assert_func>
 8006b0c:	3101      	adds	r1, #1
 8006b0e:	105b      	asrs	r3, r3, #1
 8006b10:	e7ef      	b.n	8006af2 <__gethex+0x156>
 8006b12:	f04f 0b00 	mov.w	fp, #0
 8006b16:	f100 0914 	add.w	r9, r0, #20
 8006b1a:	f1ca 0301 	rsb	r3, sl, #1
 8006b1e:	f8cd 9010 	str.w	r9, [sp, #16]
 8006b22:	f8cd b004 	str.w	fp, [sp, #4]
 8006b26:	9308      	str	r3, [sp, #32]
 8006b28:	42b7      	cmp	r7, r6
 8006b2a:	d33f      	bcc.n	8006bac <__gethex+0x210>
 8006b2c:	9f04      	ldr	r7, [sp, #16]
 8006b2e:	9b01      	ldr	r3, [sp, #4]
 8006b30:	f847 3b04 	str.w	r3, [r7], #4
 8006b34:	eba7 0709 	sub.w	r7, r7, r9
 8006b38:	10bf      	asrs	r7, r7, #2
 8006b3a:	6127      	str	r7, [r4, #16]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fb5b 	bl	80071f8 <__hi0bits>
 8006b42:	017f      	lsls	r7, r7, #5
 8006b44:	f8d8 6000 	ldr.w	r6, [r8]
 8006b48:	1a3f      	subs	r7, r7, r0
 8006b4a:	42b7      	cmp	r7, r6
 8006b4c:	dd62      	ble.n	8006c14 <__gethex+0x278>
 8006b4e:	1bbf      	subs	r7, r7, r6
 8006b50:	4639      	mov	r1, r7
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 fef1 	bl	800793a <__any_on>
 8006b58:	4682      	mov	sl, r0
 8006b5a:	b1a8      	cbz	r0, 8006b88 <__gethex+0x1ec>
 8006b5c:	f04f 0a01 	mov.w	sl, #1
 8006b60:	1e7b      	subs	r3, r7, #1
 8006b62:	1159      	asrs	r1, r3, #5
 8006b64:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006b68:	f003 021f 	and.w	r2, r3, #31
 8006b6c:	fa0a f202 	lsl.w	r2, sl, r2
 8006b70:	420a      	tst	r2, r1
 8006b72:	d009      	beq.n	8006b88 <__gethex+0x1ec>
 8006b74:	4553      	cmp	r3, sl
 8006b76:	dd05      	ble.n	8006b84 <__gethex+0x1e8>
 8006b78:	4620      	mov	r0, r4
 8006b7a:	1eb9      	subs	r1, r7, #2
 8006b7c:	f000 fedd 	bl	800793a <__any_on>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d144      	bne.n	8006c0e <__gethex+0x272>
 8006b84:	f04f 0a02 	mov.w	sl, #2
 8006b88:	4639      	mov	r1, r7
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f7ff fe9e 	bl	80068cc <rshift>
 8006b90:	443d      	add	r5, r7
 8006b92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b96:	42ab      	cmp	r3, r5
 8006b98:	da4a      	bge.n	8006c30 <__gethex+0x294>
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	9802      	ldr	r0, [sp, #8]
 8006b9e:	f000 fa75 	bl	800708c <_Bfree>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ba6:	27a3      	movs	r7, #163	; 0xa3
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	e789      	b.n	8006ac0 <__gethex+0x124>
 8006bac:	1e73      	subs	r3, r6, #1
 8006bae:	9a07      	ldr	r2, [sp, #28]
 8006bb0:	9305      	str	r3, [sp, #20]
 8006bb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d019      	beq.n	8006bee <__gethex+0x252>
 8006bba:	f1bb 0f20 	cmp.w	fp, #32
 8006bbe:	d107      	bne.n	8006bd0 <__gethex+0x234>
 8006bc0:	9b04      	ldr	r3, [sp, #16]
 8006bc2:	9a01      	ldr	r2, [sp, #4]
 8006bc4:	f843 2b04 	str.w	r2, [r3], #4
 8006bc8:	9304      	str	r3, [sp, #16]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	469b      	mov	fp, r3
 8006bce:	9301      	str	r3, [sp, #4]
 8006bd0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006bd4:	f7ff fecd 	bl	8006972 <__hexdig_fun>
 8006bd8:	9b01      	ldr	r3, [sp, #4]
 8006bda:	f000 000f 	and.w	r0, r0, #15
 8006bde:	fa00 f00b 	lsl.w	r0, r0, fp
 8006be2:	4303      	orrs	r3, r0
 8006be4:	9301      	str	r3, [sp, #4]
 8006be6:	f10b 0b04 	add.w	fp, fp, #4
 8006bea:	9b05      	ldr	r3, [sp, #20]
 8006bec:	e00d      	b.n	8006c0a <__gethex+0x26e>
 8006bee:	9b05      	ldr	r3, [sp, #20]
 8006bf0:	9a08      	ldr	r2, [sp, #32]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	42bb      	cmp	r3, r7
 8006bf6:	d3e0      	bcc.n	8006bba <__gethex+0x21e>
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	4652      	mov	r2, sl
 8006bfc:	9903      	ldr	r1, [sp, #12]
 8006bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006c00:	f001 f8e2 	bl	8007dc8 <strncmp>
 8006c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d1d7      	bne.n	8006bba <__gethex+0x21e>
 8006c0a:	461e      	mov	r6, r3
 8006c0c:	e78c      	b.n	8006b28 <__gethex+0x18c>
 8006c0e:	f04f 0a03 	mov.w	sl, #3
 8006c12:	e7b9      	b.n	8006b88 <__gethex+0x1ec>
 8006c14:	da09      	bge.n	8006c2a <__gethex+0x28e>
 8006c16:	1bf7      	subs	r7, r6, r7
 8006c18:	4621      	mov	r1, r4
 8006c1a:	463a      	mov	r2, r7
 8006c1c:	9802      	ldr	r0, [sp, #8]
 8006c1e:	f000 fc4d 	bl	80074bc <__lshift>
 8006c22:	4604      	mov	r4, r0
 8006c24:	1bed      	subs	r5, r5, r7
 8006c26:	f100 0914 	add.w	r9, r0, #20
 8006c2a:	f04f 0a00 	mov.w	sl, #0
 8006c2e:	e7b0      	b.n	8006b92 <__gethex+0x1f6>
 8006c30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006c34:	42a8      	cmp	r0, r5
 8006c36:	dd71      	ble.n	8006d1c <__gethex+0x380>
 8006c38:	1b45      	subs	r5, r0, r5
 8006c3a:	42ae      	cmp	r6, r5
 8006c3c:	dc34      	bgt.n	8006ca8 <__gethex+0x30c>
 8006c3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d028      	beq.n	8006c98 <__gethex+0x2fc>
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d02a      	beq.n	8006ca0 <__gethex+0x304>
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d115      	bne.n	8006c7a <__gethex+0x2de>
 8006c4e:	42ae      	cmp	r6, r5
 8006c50:	d113      	bne.n	8006c7a <__gethex+0x2de>
 8006c52:	2e01      	cmp	r6, #1
 8006c54:	d10b      	bne.n	8006c6e <__gethex+0x2d2>
 8006c56:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c5a:	9a06      	ldr	r2, [sp, #24]
 8006c5c:	2762      	movs	r7, #98	; 0x62
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	2301      	movs	r3, #1
 8006c62:	6123      	str	r3, [r4, #16]
 8006c64:	f8c9 3000 	str.w	r3, [r9]
 8006c68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c6a:	601c      	str	r4, [r3, #0]
 8006c6c:	e728      	b.n	8006ac0 <__gethex+0x124>
 8006c6e:	4620      	mov	r0, r4
 8006c70:	1e71      	subs	r1, r6, #1
 8006c72:	f000 fe62 	bl	800793a <__any_on>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d1ed      	bne.n	8006c56 <__gethex+0x2ba>
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	9802      	ldr	r0, [sp, #8]
 8006c7e:	f000 fa05 	bl	800708c <_Bfree>
 8006c82:	2300      	movs	r3, #0
 8006c84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c86:	2750      	movs	r7, #80	; 0x50
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	e719      	b.n	8006ac0 <__gethex+0x124>
 8006c8c:	0800c5a8 	.word	0x0800c5a8
 8006c90:	0800c52c 	.word	0x0800c52c
 8006c94:	0800c53d 	.word	0x0800c53d
 8006c98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1ed      	bne.n	8006c7a <__gethex+0x2de>
 8006c9e:	e7da      	b.n	8006c56 <__gethex+0x2ba>
 8006ca0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1d7      	bne.n	8006c56 <__gethex+0x2ba>
 8006ca6:	e7e8      	b.n	8006c7a <__gethex+0x2de>
 8006ca8:	1e6f      	subs	r7, r5, #1
 8006caa:	f1ba 0f00 	cmp.w	sl, #0
 8006cae:	d132      	bne.n	8006d16 <__gethex+0x37a>
 8006cb0:	b127      	cbz	r7, 8006cbc <__gethex+0x320>
 8006cb2:	4639      	mov	r1, r7
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f000 fe40 	bl	800793a <__any_on>
 8006cba:	4682      	mov	sl, r0
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	117b      	asrs	r3, r7, #5
 8006cc0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006cc4:	f007 071f 	and.w	r7, r7, #31
 8006cc8:	fa01 f707 	lsl.w	r7, r1, r7
 8006ccc:	421f      	tst	r7, r3
 8006cce:	f04f 0702 	mov.w	r7, #2
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	bf18      	it	ne
 8006cd8:	f04a 0a02 	orrne.w	sl, sl, #2
 8006cdc:	1b76      	subs	r6, r6, r5
 8006cde:	f7ff fdf5 	bl	80068cc <rshift>
 8006ce2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006ce6:	f1ba 0f00 	cmp.w	sl, #0
 8006cea:	d048      	beq.n	8006d7e <__gethex+0x3e2>
 8006cec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d015      	beq.n	8006d20 <__gethex+0x384>
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d017      	beq.n	8006d28 <__gethex+0x38c>
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d109      	bne.n	8006d10 <__gethex+0x374>
 8006cfc:	f01a 0f02 	tst.w	sl, #2
 8006d00:	d006      	beq.n	8006d10 <__gethex+0x374>
 8006d02:	f8d9 0000 	ldr.w	r0, [r9]
 8006d06:	ea4a 0a00 	orr.w	sl, sl, r0
 8006d0a:	f01a 0f01 	tst.w	sl, #1
 8006d0e:	d10e      	bne.n	8006d2e <__gethex+0x392>
 8006d10:	f047 0710 	orr.w	r7, r7, #16
 8006d14:	e033      	b.n	8006d7e <__gethex+0x3e2>
 8006d16:	f04f 0a01 	mov.w	sl, #1
 8006d1a:	e7cf      	b.n	8006cbc <__gethex+0x320>
 8006d1c:	2701      	movs	r7, #1
 8006d1e:	e7e2      	b.n	8006ce6 <__gethex+0x34a>
 8006d20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d22:	f1c3 0301 	rsb	r3, r3, #1
 8006d26:	9315      	str	r3, [sp, #84]	; 0x54
 8006d28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0f0      	beq.n	8006d10 <__gethex+0x374>
 8006d2e:	f04f 0c00 	mov.w	ip, #0
 8006d32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006d36:	f104 0314 	add.w	r3, r4, #20
 8006d3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006d3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006d42:	4618      	mov	r0, r3
 8006d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d48:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006d4c:	d01c      	beq.n	8006d88 <__gethex+0x3ec>
 8006d4e:	3201      	adds	r2, #1
 8006d50:	6002      	str	r2, [r0, #0]
 8006d52:	2f02      	cmp	r7, #2
 8006d54:	f104 0314 	add.w	r3, r4, #20
 8006d58:	d13d      	bne.n	8006dd6 <__gethex+0x43a>
 8006d5a:	f8d8 2000 	ldr.w	r2, [r8]
 8006d5e:	3a01      	subs	r2, #1
 8006d60:	42b2      	cmp	r2, r6
 8006d62:	d10a      	bne.n	8006d7a <__gethex+0x3de>
 8006d64:	2201      	movs	r2, #1
 8006d66:	1171      	asrs	r1, r6, #5
 8006d68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d6c:	f006 061f 	and.w	r6, r6, #31
 8006d70:	fa02 f606 	lsl.w	r6, r2, r6
 8006d74:	421e      	tst	r6, r3
 8006d76:	bf18      	it	ne
 8006d78:	4617      	movne	r7, r2
 8006d7a:	f047 0720 	orr.w	r7, r7, #32
 8006d7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d80:	601c      	str	r4, [r3, #0]
 8006d82:	9b06      	ldr	r3, [sp, #24]
 8006d84:	601d      	str	r5, [r3, #0]
 8006d86:	e69b      	b.n	8006ac0 <__gethex+0x124>
 8006d88:	4299      	cmp	r1, r3
 8006d8a:	f843 cc04 	str.w	ip, [r3, #-4]
 8006d8e:	d8d8      	bhi.n	8006d42 <__gethex+0x3a6>
 8006d90:	68a3      	ldr	r3, [r4, #8]
 8006d92:	459b      	cmp	fp, r3
 8006d94:	db17      	blt.n	8006dc6 <__gethex+0x42a>
 8006d96:	6861      	ldr	r1, [r4, #4]
 8006d98:	9802      	ldr	r0, [sp, #8]
 8006d9a:	3101      	adds	r1, #1
 8006d9c:	f000 f936 	bl	800700c <_Balloc>
 8006da0:	4681      	mov	r9, r0
 8006da2:	b918      	cbnz	r0, 8006dac <__gethex+0x410>
 8006da4:	4602      	mov	r2, r0
 8006da6:	2184      	movs	r1, #132	; 0x84
 8006da8:	4b19      	ldr	r3, [pc, #100]	; (8006e10 <__gethex+0x474>)
 8006daa:	e6ac      	b.n	8006b06 <__gethex+0x16a>
 8006dac:	6922      	ldr	r2, [r4, #16]
 8006dae:	f104 010c 	add.w	r1, r4, #12
 8006db2:	3202      	adds	r2, #2
 8006db4:	0092      	lsls	r2, r2, #2
 8006db6:	300c      	adds	r0, #12
 8006db8:	f000 f91a 	bl	8006ff0 <memcpy>
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	9802      	ldr	r0, [sp, #8]
 8006dc0:	f000 f964 	bl	800708c <_Bfree>
 8006dc4:	464c      	mov	r4, r9
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	6122      	str	r2, [r4, #16]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006dd2:	615a      	str	r2, [r3, #20]
 8006dd4:	e7bd      	b.n	8006d52 <__gethex+0x3b6>
 8006dd6:	6922      	ldr	r2, [r4, #16]
 8006dd8:	455a      	cmp	r2, fp
 8006dda:	dd0b      	ble.n	8006df4 <__gethex+0x458>
 8006ddc:	2101      	movs	r1, #1
 8006dde:	4620      	mov	r0, r4
 8006de0:	f7ff fd74 	bl	80068cc <rshift>
 8006de4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006de8:	3501      	adds	r5, #1
 8006dea:	42ab      	cmp	r3, r5
 8006dec:	f6ff aed5 	blt.w	8006b9a <__gethex+0x1fe>
 8006df0:	2701      	movs	r7, #1
 8006df2:	e7c2      	b.n	8006d7a <__gethex+0x3de>
 8006df4:	f016 061f 	ands.w	r6, r6, #31
 8006df8:	d0fa      	beq.n	8006df0 <__gethex+0x454>
 8006dfa:	449a      	add	sl, r3
 8006dfc:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006e00:	f000 f9fa 	bl	80071f8 <__hi0bits>
 8006e04:	f1c6 0620 	rsb	r6, r6, #32
 8006e08:	42b0      	cmp	r0, r6
 8006e0a:	dbe7      	blt.n	8006ddc <__gethex+0x440>
 8006e0c:	e7f0      	b.n	8006df0 <__gethex+0x454>
 8006e0e:	bf00      	nop
 8006e10:	0800c52c 	.word	0x0800c52c

08006e14 <L_shift>:
 8006e14:	f1c2 0208 	rsb	r2, r2, #8
 8006e18:	0092      	lsls	r2, r2, #2
 8006e1a:	b570      	push	{r4, r5, r6, lr}
 8006e1c:	f1c2 0620 	rsb	r6, r2, #32
 8006e20:	6843      	ldr	r3, [r0, #4]
 8006e22:	6804      	ldr	r4, [r0, #0]
 8006e24:	fa03 f506 	lsl.w	r5, r3, r6
 8006e28:	432c      	orrs	r4, r5
 8006e2a:	40d3      	lsrs	r3, r2
 8006e2c:	6004      	str	r4, [r0, #0]
 8006e2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006e32:	4288      	cmp	r0, r1
 8006e34:	d3f4      	bcc.n	8006e20 <L_shift+0xc>
 8006e36:	bd70      	pop	{r4, r5, r6, pc}

08006e38 <__match>:
 8006e38:	b530      	push	{r4, r5, lr}
 8006e3a:	6803      	ldr	r3, [r0, #0]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e42:	b914      	cbnz	r4, 8006e4a <__match+0x12>
 8006e44:	6003      	str	r3, [r0, #0]
 8006e46:	2001      	movs	r0, #1
 8006e48:	bd30      	pop	{r4, r5, pc}
 8006e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006e52:	2d19      	cmp	r5, #25
 8006e54:	bf98      	it	ls
 8006e56:	3220      	addls	r2, #32
 8006e58:	42a2      	cmp	r2, r4
 8006e5a:	d0f0      	beq.n	8006e3e <__match+0x6>
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e7f3      	b.n	8006e48 <__match+0x10>

08006e60 <__hexnan>:
 8006e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e64:	2500      	movs	r5, #0
 8006e66:	680b      	ldr	r3, [r1, #0]
 8006e68:	4682      	mov	sl, r0
 8006e6a:	115e      	asrs	r6, r3, #5
 8006e6c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006e70:	f013 031f 	ands.w	r3, r3, #31
 8006e74:	bf18      	it	ne
 8006e76:	3604      	addne	r6, #4
 8006e78:	1f37      	subs	r7, r6, #4
 8006e7a:	4690      	mov	r8, r2
 8006e7c:	46b9      	mov	r9, r7
 8006e7e:	463c      	mov	r4, r7
 8006e80:	46ab      	mov	fp, r5
 8006e82:	b087      	sub	sp, #28
 8006e84:	6801      	ldr	r1, [r0, #0]
 8006e86:	9301      	str	r3, [sp, #4]
 8006e88:	f846 5c04 	str.w	r5, [r6, #-4]
 8006e8c:	9502      	str	r5, [sp, #8]
 8006e8e:	784a      	ldrb	r2, [r1, #1]
 8006e90:	1c4b      	adds	r3, r1, #1
 8006e92:	9303      	str	r3, [sp, #12]
 8006e94:	b342      	cbz	r2, 8006ee8 <__hexnan+0x88>
 8006e96:	4610      	mov	r0, r2
 8006e98:	9105      	str	r1, [sp, #20]
 8006e9a:	9204      	str	r2, [sp, #16]
 8006e9c:	f7ff fd69 	bl	8006972 <__hexdig_fun>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d14f      	bne.n	8006f44 <__hexnan+0xe4>
 8006ea4:	9a04      	ldr	r2, [sp, #16]
 8006ea6:	9905      	ldr	r1, [sp, #20]
 8006ea8:	2a20      	cmp	r2, #32
 8006eaa:	d818      	bhi.n	8006ede <__hexnan+0x7e>
 8006eac:	9b02      	ldr	r3, [sp, #8]
 8006eae:	459b      	cmp	fp, r3
 8006eb0:	dd13      	ble.n	8006eda <__hexnan+0x7a>
 8006eb2:	454c      	cmp	r4, r9
 8006eb4:	d206      	bcs.n	8006ec4 <__hexnan+0x64>
 8006eb6:	2d07      	cmp	r5, #7
 8006eb8:	dc04      	bgt.n	8006ec4 <__hexnan+0x64>
 8006eba:	462a      	mov	r2, r5
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f7ff ffa8 	bl	8006e14 <L_shift>
 8006ec4:	4544      	cmp	r4, r8
 8006ec6:	d950      	bls.n	8006f6a <__hexnan+0x10a>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f1a4 0904 	sub.w	r9, r4, #4
 8006ece:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ed2:	461d      	mov	r5, r3
 8006ed4:	464c      	mov	r4, r9
 8006ed6:	f8cd b008 	str.w	fp, [sp, #8]
 8006eda:	9903      	ldr	r1, [sp, #12]
 8006edc:	e7d7      	b.n	8006e8e <__hexnan+0x2e>
 8006ede:	2a29      	cmp	r2, #41	; 0x29
 8006ee0:	d156      	bne.n	8006f90 <__hexnan+0x130>
 8006ee2:	3102      	adds	r1, #2
 8006ee4:	f8ca 1000 	str.w	r1, [sl]
 8006ee8:	f1bb 0f00 	cmp.w	fp, #0
 8006eec:	d050      	beq.n	8006f90 <__hexnan+0x130>
 8006eee:	454c      	cmp	r4, r9
 8006ef0:	d206      	bcs.n	8006f00 <__hexnan+0xa0>
 8006ef2:	2d07      	cmp	r5, #7
 8006ef4:	dc04      	bgt.n	8006f00 <__hexnan+0xa0>
 8006ef6:	462a      	mov	r2, r5
 8006ef8:	4649      	mov	r1, r9
 8006efa:	4620      	mov	r0, r4
 8006efc:	f7ff ff8a 	bl	8006e14 <L_shift>
 8006f00:	4544      	cmp	r4, r8
 8006f02:	d934      	bls.n	8006f6e <__hexnan+0x10e>
 8006f04:	4623      	mov	r3, r4
 8006f06:	f1a8 0204 	sub.w	r2, r8, #4
 8006f0a:	f853 1b04 	ldr.w	r1, [r3], #4
 8006f0e:	429f      	cmp	r7, r3
 8006f10:	f842 1f04 	str.w	r1, [r2, #4]!
 8006f14:	d2f9      	bcs.n	8006f0a <__hexnan+0xaa>
 8006f16:	1b3b      	subs	r3, r7, r4
 8006f18:	f023 0303 	bic.w	r3, r3, #3
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	3401      	adds	r4, #1
 8006f20:	3e03      	subs	r6, #3
 8006f22:	42b4      	cmp	r4, r6
 8006f24:	bf88      	it	hi
 8006f26:	2304      	movhi	r3, #4
 8006f28:	2200      	movs	r2, #0
 8006f2a:	4443      	add	r3, r8
 8006f2c:	f843 2b04 	str.w	r2, [r3], #4
 8006f30:	429f      	cmp	r7, r3
 8006f32:	d2fb      	bcs.n	8006f2c <__hexnan+0xcc>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	b91b      	cbnz	r3, 8006f40 <__hexnan+0xe0>
 8006f38:	4547      	cmp	r7, r8
 8006f3a:	d127      	bne.n	8006f8c <__hexnan+0x12c>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	2005      	movs	r0, #5
 8006f42:	e026      	b.n	8006f92 <__hexnan+0x132>
 8006f44:	3501      	adds	r5, #1
 8006f46:	2d08      	cmp	r5, #8
 8006f48:	f10b 0b01 	add.w	fp, fp, #1
 8006f4c:	dd06      	ble.n	8006f5c <__hexnan+0xfc>
 8006f4e:	4544      	cmp	r4, r8
 8006f50:	d9c3      	bls.n	8006eda <__hexnan+0x7a>
 8006f52:	2300      	movs	r3, #0
 8006f54:	2501      	movs	r5, #1
 8006f56:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f5a:	3c04      	subs	r4, #4
 8006f5c:	6822      	ldr	r2, [r4, #0]
 8006f5e:	f000 000f 	and.w	r0, r0, #15
 8006f62:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006f66:	6022      	str	r2, [r4, #0]
 8006f68:	e7b7      	b.n	8006eda <__hexnan+0x7a>
 8006f6a:	2508      	movs	r5, #8
 8006f6c:	e7b5      	b.n	8006eda <__hexnan+0x7a>
 8006f6e:	9b01      	ldr	r3, [sp, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0df      	beq.n	8006f34 <__hexnan+0xd4>
 8006f74:	f04f 32ff 	mov.w	r2, #4294967295
 8006f78:	f1c3 0320 	rsb	r3, r3, #32
 8006f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006f84:	401a      	ands	r2, r3
 8006f86:	f846 2c04 	str.w	r2, [r6, #-4]
 8006f8a:	e7d3      	b.n	8006f34 <__hexnan+0xd4>
 8006f8c:	3f04      	subs	r7, #4
 8006f8e:	e7d1      	b.n	8006f34 <__hexnan+0xd4>
 8006f90:	2004      	movs	r0, #4
 8006f92:	b007      	add	sp, #28
 8006f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f98 <_localeconv_r>:
 8006f98:	4800      	ldr	r0, [pc, #0]	; (8006f9c <_localeconv_r+0x4>)
 8006f9a:	4770      	bx	lr
 8006f9c:	2000017c 	.word	0x2000017c

08006fa0 <malloc>:
 8006fa0:	4b02      	ldr	r3, [pc, #8]	; (8006fac <malloc+0xc>)
 8006fa2:	4601      	mov	r1, r0
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	f000 bd43 	b.w	8007a30 <_malloc_r>
 8006faa:	bf00      	nop
 8006fac:	20000024 	.word	0x20000024

08006fb0 <__ascii_mbtowc>:
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	b901      	cbnz	r1, 8006fb6 <__ascii_mbtowc+0x6>
 8006fb4:	a901      	add	r1, sp, #4
 8006fb6:	b142      	cbz	r2, 8006fca <__ascii_mbtowc+0x1a>
 8006fb8:	b14b      	cbz	r3, 8006fce <__ascii_mbtowc+0x1e>
 8006fba:	7813      	ldrb	r3, [r2, #0]
 8006fbc:	600b      	str	r3, [r1, #0]
 8006fbe:	7812      	ldrb	r2, [r2, #0]
 8006fc0:	1e10      	subs	r0, r2, #0
 8006fc2:	bf18      	it	ne
 8006fc4:	2001      	movne	r0, #1
 8006fc6:	b002      	add	sp, #8
 8006fc8:	4770      	bx	lr
 8006fca:	4610      	mov	r0, r2
 8006fcc:	e7fb      	b.n	8006fc6 <__ascii_mbtowc+0x16>
 8006fce:	f06f 0001 	mvn.w	r0, #1
 8006fd2:	e7f8      	b.n	8006fc6 <__ascii_mbtowc+0x16>

08006fd4 <memchr>:
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	b510      	push	{r4, lr}
 8006fd8:	b2c9      	uxtb	r1, r1
 8006fda:	4402      	add	r2, r0
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	d101      	bne.n	8006fe6 <memchr+0x12>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e003      	b.n	8006fee <memchr+0x1a>
 8006fe6:	7804      	ldrb	r4, [r0, #0]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	428c      	cmp	r4, r1
 8006fec:	d1f6      	bne.n	8006fdc <memchr+0x8>
 8006fee:	bd10      	pop	{r4, pc}

08006ff0 <memcpy>:
 8006ff0:	440a      	add	r2, r1
 8006ff2:	4291      	cmp	r1, r2
 8006ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ff8:	d100      	bne.n	8006ffc <memcpy+0xc>
 8006ffa:	4770      	bx	lr
 8006ffc:	b510      	push	{r4, lr}
 8006ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007002:	4291      	cmp	r1, r2
 8007004:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007008:	d1f9      	bne.n	8006ffe <memcpy+0xe>
 800700a:	bd10      	pop	{r4, pc}

0800700c <_Balloc>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007010:	4604      	mov	r4, r0
 8007012:	460d      	mov	r5, r1
 8007014:	b976      	cbnz	r6, 8007034 <_Balloc+0x28>
 8007016:	2010      	movs	r0, #16
 8007018:	f7ff ffc2 	bl	8006fa0 <malloc>
 800701c:	4602      	mov	r2, r0
 800701e:	6260      	str	r0, [r4, #36]	; 0x24
 8007020:	b920      	cbnz	r0, 800702c <_Balloc+0x20>
 8007022:	2166      	movs	r1, #102	; 0x66
 8007024:	4b17      	ldr	r3, [pc, #92]	; (8007084 <_Balloc+0x78>)
 8007026:	4818      	ldr	r0, [pc, #96]	; (8007088 <_Balloc+0x7c>)
 8007028:	f000 feee 	bl	8007e08 <__assert_func>
 800702c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007030:	6006      	str	r6, [r0, #0]
 8007032:	60c6      	str	r6, [r0, #12]
 8007034:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007036:	68f3      	ldr	r3, [r6, #12]
 8007038:	b183      	cbz	r3, 800705c <_Balloc+0x50>
 800703a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007042:	b9b8      	cbnz	r0, 8007074 <_Balloc+0x68>
 8007044:	2101      	movs	r1, #1
 8007046:	fa01 f605 	lsl.w	r6, r1, r5
 800704a:	1d72      	adds	r2, r6, #5
 800704c:	4620      	mov	r0, r4
 800704e:	0092      	lsls	r2, r2, #2
 8007050:	f000 fc94 	bl	800797c <_calloc_r>
 8007054:	b160      	cbz	r0, 8007070 <_Balloc+0x64>
 8007056:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800705a:	e00e      	b.n	800707a <_Balloc+0x6e>
 800705c:	2221      	movs	r2, #33	; 0x21
 800705e:	2104      	movs	r1, #4
 8007060:	4620      	mov	r0, r4
 8007062:	f000 fc8b 	bl	800797c <_calloc_r>
 8007066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007068:	60f0      	str	r0, [r6, #12]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e4      	bne.n	800703a <_Balloc+0x2e>
 8007070:	2000      	movs	r0, #0
 8007072:	bd70      	pop	{r4, r5, r6, pc}
 8007074:	6802      	ldr	r2, [r0, #0]
 8007076:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800707a:	2300      	movs	r3, #0
 800707c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007080:	e7f7      	b.n	8007072 <_Balloc+0x66>
 8007082:	bf00      	nop
 8007084:	0800c4b6 	.word	0x0800c4b6
 8007088:	0800c5bc 	.word	0x0800c5bc

0800708c <_Bfree>:
 800708c:	b570      	push	{r4, r5, r6, lr}
 800708e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007090:	4605      	mov	r5, r0
 8007092:	460c      	mov	r4, r1
 8007094:	b976      	cbnz	r6, 80070b4 <_Bfree+0x28>
 8007096:	2010      	movs	r0, #16
 8007098:	f7ff ff82 	bl	8006fa0 <malloc>
 800709c:	4602      	mov	r2, r0
 800709e:	6268      	str	r0, [r5, #36]	; 0x24
 80070a0:	b920      	cbnz	r0, 80070ac <_Bfree+0x20>
 80070a2:	218a      	movs	r1, #138	; 0x8a
 80070a4:	4b08      	ldr	r3, [pc, #32]	; (80070c8 <_Bfree+0x3c>)
 80070a6:	4809      	ldr	r0, [pc, #36]	; (80070cc <_Bfree+0x40>)
 80070a8:	f000 feae 	bl	8007e08 <__assert_func>
 80070ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070b0:	6006      	str	r6, [r0, #0]
 80070b2:	60c6      	str	r6, [r0, #12]
 80070b4:	b13c      	cbz	r4, 80070c6 <_Bfree+0x3a>
 80070b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070b8:	6862      	ldr	r2, [r4, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070c0:	6021      	str	r1, [r4, #0]
 80070c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
 80070c8:	0800c4b6 	.word	0x0800c4b6
 80070cc:	0800c5bc 	.word	0x0800c5bc

080070d0 <__multadd>:
 80070d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d4:	4698      	mov	r8, r3
 80070d6:	460c      	mov	r4, r1
 80070d8:	2300      	movs	r3, #0
 80070da:	690e      	ldr	r6, [r1, #16]
 80070dc:	4607      	mov	r7, r0
 80070de:	f101 0014 	add.w	r0, r1, #20
 80070e2:	6805      	ldr	r5, [r0, #0]
 80070e4:	3301      	adds	r3, #1
 80070e6:	b2a9      	uxth	r1, r5
 80070e8:	fb02 8101 	mla	r1, r2, r1, r8
 80070ec:	0c2d      	lsrs	r5, r5, #16
 80070ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80070f2:	fb02 c505 	mla	r5, r2, r5, ip
 80070f6:	b289      	uxth	r1, r1
 80070f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80070fc:	429e      	cmp	r6, r3
 80070fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007102:	f840 1b04 	str.w	r1, [r0], #4
 8007106:	dcec      	bgt.n	80070e2 <__multadd+0x12>
 8007108:	f1b8 0f00 	cmp.w	r8, #0
 800710c:	d022      	beq.n	8007154 <__multadd+0x84>
 800710e:	68a3      	ldr	r3, [r4, #8]
 8007110:	42b3      	cmp	r3, r6
 8007112:	dc19      	bgt.n	8007148 <__multadd+0x78>
 8007114:	6861      	ldr	r1, [r4, #4]
 8007116:	4638      	mov	r0, r7
 8007118:	3101      	adds	r1, #1
 800711a:	f7ff ff77 	bl	800700c <_Balloc>
 800711e:	4605      	mov	r5, r0
 8007120:	b928      	cbnz	r0, 800712e <__multadd+0x5e>
 8007122:	4602      	mov	r2, r0
 8007124:	21b5      	movs	r1, #181	; 0xb5
 8007126:	4b0d      	ldr	r3, [pc, #52]	; (800715c <__multadd+0x8c>)
 8007128:	480d      	ldr	r0, [pc, #52]	; (8007160 <__multadd+0x90>)
 800712a:	f000 fe6d 	bl	8007e08 <__assert_func>
 800712e:	6922      	ldr	r2, [r4, #16]
 8007130:	f104 010c 	add.w	r1, r4, #12
 8007134:	3202      	adds	r2, #2
 8007136:	0092      	lsls	r2, r2, #2
 8007138:	300c      	adds	r0, #12
 800713a:	f7ff ff59 	bl	8006ff0 <memcpy>
 800713e:	4621      	mov	r1, r4
 8007140:	4638      	mov	r0, r7
 8007142:	f7ff ffa3 	bl	800708c <_Bfree>
 8007146:	462c      	mov	r4, r5
 8007148:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800714c:	3601      	adds	r6, #1
 800714e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007152:	6126      	str	r6, [r4, #16]
 8007154:	4620      	mov	r0, r4
 8007156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800715a:	bf00      	nop
 800715c:	0800c52c 	.word	0x0800c52c
 8007160:	0800c5bc 	.word	0x0800c5bc

08007164 <__s2b>:
 8007164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007168:	4615      	mov	r5, r2
 800716a:	2209      	movs	r2, #9
 800716c:	461f      	mov	r7, r3
 800716e:	3308      	adds	r3, #8
 8007170:	460c      	mov	r4, r1
 8007172:	fb93 f3f2 	sdiv	r3, r3, r2
 8007176:	4606      	mov	r6, r0
 8007178:	2201      	movs	r2, #1
 800717a:	2100      	movs	r1, #0
 800717c:	429a      	cmp	r2, r3
 800717e:	db09      	blt.n	8007194 <__s2b+0x30>
 8007180:	4630      	mov	r0, r6
 8007182:	f7ff ff43 	bl	800700c <_Balloc>
 8007186:	b940      	cbnz	r0, 800719a <__s2b+0x36>
 8007188:	4602      	mov	r2, r0
 800718a:	21ce      	movs	r1, #206	; 0xce
 800718c:	4b18      	ldr	r3, [pc, #96]	; (80071f0 <__s2b+0x8c>)
 800718e:	4819      	ldr	r0, [pc, #100]	; (80071f4 <__s2b+0x90>)
 8007190:	f000 fe3a 	bl	8007e08 <__assert_func>
 8007194:	0052      	lsls	r2, r2, #1
 8007196:	3101      	adds	r1, #1
 8007198:	e7f0      	b.n	800717c <__s2b+0x18>
 800719a:	9b08      	ldr	r3, [sp, #32]
 800719c:	2d09      	cmp	r5, #9
 800719e:	6143      	str	r3, [r0, #20]
 80071a0:	f04f 0301 	mov.w	r3, #1
 80071a4:	6103      	str	r3, [r0, #16]
 80071a6:	dd16      	ble.n	80071d6 <__s2b+0x72>
 80071a8:	f104 0909 	add.w	r9, r4, #9
 80071ac:	46c8      	mov	r8, r9
 80071ae:	442c      	add	r4, r5
 80071b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80071b4:	4601      	mov	r1, r0
 80071b6:	220a      	movs	r2, #10
 80071b8:	4630      	mov	r0, r6
 80071ba:	3b30      	subs	r3, #48	; 0x30
 80071bc:	f7ff ff88 	bl	80070d0 <__multadd>
 80071c0:	45a0      	cmp	r8, r4
 80071c2:	d1f5      	bne.n	80071b0 <__s2b+0x4c>
 80071c4:	f1a5 0408 	sub.w	r4, r5, #8
 80071c8:	444c      	add	r4, r9
 80071ca:	1b2d      	subs	r5, r5, r4
 80071cc:	1963      	adds	r3, r4, r5
 80071ce:	42bb      	cmp	r3, r7
 80071d0:	db04      	blt.n	80071dc <__s2b+0x78>
 80071d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d6:	2509      	movs	r5, #9
 80071d8:	340a      	adds	r4, #10
 80071da:	e7f6      	b.n	80071ca <__s2b+0x66>
 80071dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80071e0:	4601      	mov	r1, r0
 80071e2:	220a      	movs	r2, #10
 80071e4:	4630      	mov	r0, r6
 80071e6:	3b30      	subs	r3, #48	; 0x30
 80071e8:	f7ff ff72 	bl	80070d0 <__multadd>
 80071ec:	e7ee      	b.n	80071cc <__s2b+0x68>
 80071ee:	bf00      	nop
 80071f0:	0800c52c 	.word	0x0800c52c
 80071f4:	0800c5bc 	.word	0x0800c5bc

080071f8 <__hi0bits>:
 80071f8:	0c02      	lsrs	r2, r0, #16
 80071fa:	0412      	lsls	r2, r2, #16
 80071fc:	4603      	mov	r3, r0
 80071fe:	b9ca      	cbnz	r2, 8007234 <__hi0bits+0x3c>
 8007200:	0403      	lsls	r3, r0, #16
 8007202:	2010      	movs	r0, #16
 8007204:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007208:	bf04      	itt	eq
 800720a:	021b      	lsleq	r3, r3, #8
 800720c:	3008      	addeq	r0, #8
 800720e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007212:	bf04      	itt	eq
 8007214:	011b      	lsleq	r3, r3, #4
 8007216:	3004      	addeq	r0, #4
 8007218:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800721c:	bf04      	itt	eq
 800721e:	009b      	lsleq	r3, r3, #2
 8007220:	3002      	addeq	r0, #2
 8007222:	2b00      	cmp	r3, #0
 8007224:	db05      	blt.n	8007232 <__hi0bits+0x3a>
 8007226:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800722a:	f100 0001 	add.w	r0, r0, #1
 800722e:	bf08      	it	eq
 8007230:	2020      	moveq	r0, #32
 8007232:	4770      	bx	lr
 8007234:	2000      	movs	r0, #0
 8007236:	e7e5      	b.n	8007204 <__hi0bits+0xc>

08007238 <__lo0bits>:
 8007238:	6803      	ldr	r3, [r0, #0]
 800723a:	4602      	mov	r2, r0
 800723c:	f013 0007 	ands.w	r0, r3, #7
 8007240:	d00b      	beq.n	800725a <__lo0bits+0x22>
 8007242:	07d9      	lsls	r1, r3, #31
 8007244:	d422      	bmi.n	800728c <__lo0bits+0x54>
 8007246:	0798      	lsls	r0, r3, #30
 8007248:	bf49      	itett	mi
 800724a:	085b      	lsrmi	r3, r3, #1
 800724c:	089b      	lsrpl	r3, r3, #2
 800724e:	2001      	movmi	r0, #1
 8007250:	6013      	strmi	r3, [r2, #0]
 8007252:	bf5c      	itt	pl
 8007254:	2002      	movpl	r0, #2
 8007256:	6013      	strpl	r3, [r2, #0]
 8007258:	4770      	bx	lr
 800725a:	b299      	uxth	r1, r3
 800725c:	b909      	cbnz	r1, 8007262 <__lo0bits+0x2a>
 800725e:	2010      	movs	r0, #16
 8007260:	0c1b      	lsrs	r3, r3, #16
 8007262:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007266:	bf04      	itt	eq
 8007268:	0a1b      	lsreq	r3, r3, #8
 800726a:	3008      	addeq	r0, #8
 800726c:	0719      	lsls	r1, r3, #28
 800726e:	bf04      	itt	eq
 8007270:	091b      	lsreq	r3, r3, #4
 8007272:	3004      	addeq	r0, #4
 8007274:	0799      	lsls	r1, r3, #30
 8007276:	bf04      	itt	eq
 8007278:	089b      	lsreq	r3, r3, #2
 800727a:	3002      	addeq	r0, #2
 800727c:	07d9      	lsls	r1, r3, #31
 800727e:	d403      	bmi.n	8007288 <__lo0bits+0x50>
 8007280:	085b      	lsrs	r3, r3, #1
 8007282:	f100 0001 	add.w	r0, r0, #1
 8007286:	d003      	beq.n	8007290 <__lo0bits+0x58>
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	4770      	bx	lr
 800728c:	2000      	movs	r0, #0
 800728e:	4770      	bx	lr
 8007290:	2020      	movs	r0, #32
 8007292:	4770      	bx	lr

08007294 <__i2b>:
 8007294:	b510      	push	{r4, lr}
 8007296:	460c      	mov	r4, r1
 8007298:	2101      	movs	r1, #1
 800729a:	f7ff feb7 	bl	800700c <_Balloc>
 800729e:	4602      	mov	r2, r0
 80072a0:	b928      	cbnz	r0, 80072ae <__i2b+0x1a>
 80072a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072a6:	4b04      	ldr	r3, [pc, #16]	; (80072b8 <__i2b+0x24>)
 80072a8:	4804      	ldr	r0, [pc, #16]	; (80072bc <__i2b+0x28>)
 80072aa:	f000 fdad 	bl	8007e08 <__assert_func>
 80072ae:	2301      	movs	r3, #1
 80072b0:	6144      	str	r4, [r0, #20]
 80072b2:	6103      	str	r3, [r0, #16]
 80072b4:	bd10      	pop	{r4, pc}
 80072b6:	bf00      	nop
 80072b8:	0800c52c 	.word	0x0800c52c
 80072bc:	0800c5bc 	.word	0x0800c5bc

080072c0 <__multiply>:
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	4614      	mov	r4, r2
 80072c6:	690a      	ldr	r2, [r1, #16]
 80072c8:	6923      	ldr	r3, [r4, #16]
 80072ca:	460d      	mov	r5, r1
 80072cc:	429a      	cmp	r2, r3
 80072ce:	bfbe      	ittt	lt
 80072d0:	460b      	movlt	r3, r1
 80072d2:	4625      	movlt	r5, r4
 80072d4:	461c      	movlt	r4, r3
 80072d6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80072da:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80072de:	68ab      	ldr	r3, [r5, #8]
 80072e0:	6869      	ldr	r1, [r5, #4]
 80072e2:	eb0a 0709 	add.w	r7, sl, r9
 80072e6:	42bb      	cmp	r3, r7
 80072e8:	b085      	sub	sp, #20
 80072ea:	bfb8      	it	lt
 80072ec:	3101      	addlt	r1, #1
 80072ee:	f7ff fe8d 	bl	800700c <_Balloc>
 80072f2:	b930      	cbnz	r0, 8007302 <__multiply+0x42>
 80072f4:	4602      	mov	r2, r0
 80072f6:	f240 115d 	movw	r1, #349	; 0x15d
 80072fa:	4b41      	ldr	r3, [pc, #260]	; (8007400 <__multiply+0x140>)
 80072fc:	4841      	ldr	r0, [pc, #260]	; (8007404 <__multiply+0x144>)
 80072fe:	f000 fd83 	bl	8007e08 <__assert_func>
 8007302:	f100 0614 	add.w	r6, r0, #20
 8007306:	4633      	mov	r3, r6
 8007308:	2200      	movs	r2, #0
 800730a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800730e:	4543      	cmp	r3, r8
 8007310:	d31e      	bcc.n	8007350 <__multiply+0x90>
 8007312:	f105 0c14 	add.w	ip, r5, #20
 8007316:	f104 0314 	add.w	r3, r4, #20
 800731a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800731e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007322:	9202      	str	r2, [sp, #8]
 8007324:	ebac 0205 	sub.w	r2, ip, r5
 8007328:	3a15      	subs	r2, #21
 800732a:	f022 0203 	bic.w	r2, r2, #3
 800732e:	3204      	adds	r2, #4
 8007330:	f105 0115 	add.w	r1, r5, #21
 8007334:	458c      	cmp	ip, r1
 8007336:	bf38      	it	cc
 8007338:	2204      	movcc	r2, #4
 800733a:	9201      	str	r2, [sp, #4]
 800733c:	9a02      	ldr	r2, [sp, #8]
 800733e:	9303      	str	r3, [sp, #12]
 8007340:	429a      	cmp	r2, r3
 8007342:	d808      	bhi.n	8007356 <__multiply+0x96>
 8007344:	2f00      	cmp	r7, #0
 8007346:	dc55      	bgt.n	80073f4 <__multiply+0x134>
 8007348:	6107      	str	r7, [r0, #16]
 800734a:	b005      	add	sp, #20
 800734c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007350:	f843 2b04 	str.w	r2, [r3], #4
 8007354:	e7db      	b.n	800730e <__multiply+0x4e>
 8007356:	f8b3 a000 	ldrh.w	sl, [r3]
 800735a:	f1ba 0f00 	cmp.w	sl, #0
 800735e:	d020      	beq.n	80073a2 <__multiply+0xe2>
 8007360:	46b1      	mov	r9, r6
 8007362:	2200      	movs	r2, #0
 8007364:	f105 0e14 	add.w	lr, r5, #20
 8007368:	f85e 4b04 	ldr.w	r4, [lr], #4
 800736c:	f8d9 b000 	ldr.w	fp, [r9]
 8007370:	b2a1      	uxth	r1, r4
 8007372:	fa1f fb8b 	uxth.w	fp, fp
 8007376:	fb0a b101 	mla	r1, sl, r1, fp
 800737a:	4411      	add	r1, r2
 800737c:	f8d9 2000 	ldr.w	r2, [r9]
 8007380:	0c24      	lsrs	r4, r4, #16
 8007382:	0c12      	lsrs	r2, r2, #16
 8007384:	fb0a 2404 	mla	r4, sl, r4, r2
 8007388:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800738c:	b289      	uxth	r1, r1
 800738e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007392:	45f4      	cmp	ip, lr
 8007394:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007398:	f849 1b04 	str.w	r1, [r9], #4
 800739c:	d8e4      	bhi.n	8007368 <__multiply+0xa8>
 800739e:	9901      	ldr	r1, [sp, #4]
 80073a0:	5072      	str	r2, [r6, r1]
 80073a2:	9a03      	ldr	r2, [sp, #12]
 80073a4:	3304      	adds	r3, #4
 80073a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073aa:	f1b9 0f00 	cmp.w	r9, #0
 80073ae:	d01f      	beq.n	80073f0 <__multiply+0x130>
 80073b0:	46b6      	mov	lr, r6
 80073b2:	f04f 0a00 	mov.w	sl, #0
 80073b6:	6834      	ldr	r4, [r6, #0]
 80073b8:	f105 0114 	add.w	r1, r5, #20
 80073bc:	880a      	ldrh	r2, [r1, #0]
 80073be:	f8be b002 	ldrh.w	fp, [lr, #2]
 80073c2:	b2a4      	uxth	r4, r4
 80073c4:	fb09 b202 	mla	r2, r9, r2, fp
 80073c8:	4492      	add	sl, r2
 80073ca:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80073ce:	f84e 4b04 	str.w	r4, [lr], #4
 80073d2:	f851 4b04 	ldr.w	r4, [r1], #4
 80073d6:	f8be 2000 	ldrh.w	r2, [lr]
 80073da:	0c24      	lsrs	r4, r4, #16
 80073dc:	fb09 2404 	mla	r4, r9, r4, r2
 80073e0:	458c      	cmp	ip, r1
 80073e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80073e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80073ea:	d8e7      	bhi.n	80073bc <__multiply+0xfc>
 80073ec:	9a01      	ldr	r2, [sp, #4]
 80073ee:	50b4      	str	r4, [r6, r2]
 80073f0:	3604      	adds	r6, #4
 80073f2:	e7a3      	b.n	800733c <__multiply+0x7c>
 80073f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1a5      	bne.n	8007348 <__multiply+0x88>
 80073fc:	3f01      	subs	r7, #1
 80073fe:	e7a1      	b.n	8007344 <__multiply+0x84>
 8007400:	0800c52c 	.word	0x0800c52c
 8007404:	0800c5bc 	.word	0x0800c5bc

08007408 <__pow5mult>:
 8007408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800740c:	4615      	mov	r5, r2
 800740e:	f012 0203 	ands.w	r2, r2, #3
 8007412:	4606      	mov	r6, r0
 8007414:	460f      	mov	r7, r1
 8007416:	d007      	beq.n	8007428 <__pow5mult+0x20>
 8007418:	4c25      	ldr	r4, [pc, #148]	; (80074b0 <__pow5mult+0xa8>)
 800741a:	3a01      	subs	r2, #1
 800741c:	2300      	movs	r3, #0
 800741e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007422:	f7ff fe55 	bl	80070d0 <__multadd>
 8007426:	4607      	mov	r7, r0
 8007428:	10ad      	asrs	r5, r5, #2
 800742a:	d03d      	beq.n	80074a8 <__pow5mult+0xa0>
 800742c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800742e:	b97c      	cbnz	r4, 8007450 <__pow5mult+0x48>
 8007430:	2010      	movs	r0, #16
 8007432:	f7ff fdb5 	bl	8006fa0 <malloc>
 8007436:	4602      	mov	r2, r0
 8007438:	6270      	str	r0, [r6, #36]	; 0x24
 800743a:	b928      	cbnz	r0, 8007448 <__pow5mult+0x40>
 800743c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007440:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <__pow5mult+0xac>)
 8007442:	481d      	ldr	r0, [pc, #116]	; (80074b8 <__pow5mult+0xb0>)
 8007444:	f000 fce0 	bl	8007e08 <__assert_func>
 8007448:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800744c:	6004      	str	r4, [r0, #0]
 800744e:	60c4      	str	r4, [r0, #12]
 8007450:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007454:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007458:	b94c      	cbnz	r4, 800746e <__pow5mult+0x66>
 800745a:	f240 2171 	movw	r1, #625	; 0x271
 800745e:	4630      	mov	r0, r6
 8007460:	f7ff ff18 	bl	8007294 <__i2b>
 8007464:	2300      	movs	r3, #0
 8007466:	4604      	mov	r4, r0
 8007468:	f8c8 0008 	str.w	r0, [r8, #8]
 800746c:	6003      	str	r3, [r0, #0]
 800746e:	f04f 0900 	mov.w	r9, #0
 8007472:	07eb      	lsls	r3, r5, #31
 8007474:	d50a      	bpl.n	800748c <__pow5mult+0x84>
 8007476:	4639      	mov	r1, r7
 8007478:	4622      	mov	r2, r4
 800747a:	4630      	mov	r0, r6
 800747c:	f7ff ff20 	bl	80072c0 <__multiply>
 8007480:	4680      	mov	r8, r0
 8007482:	4639      	mov	r1, r7
 8007484:	4630      	mov	r0, r6
 8007486:	f7ff fe01 	bl	800708c <_Bfree>
 800748a:	4647      	mov	r7, r8
 800748c:	106d      	asrs	r5, r5, #1
 800748e:	d00b      	beq.n	80074a8 <__pow5mult+0xa0>
 8007490:	6820      	ldr	r0, [r4, #0]
 8007492:	b938      	cbnz	r0, 80074a4 <__pow5mult+0x9c>
 8007494:	4622      	mov	r2, r4
 8007496:	4621      	mov	r1, r4
 8007498:	4630      	mov	r0, r6
 800749a:	f7ff ff11 	bl	80072c0 <__multiply>
 800749e:	6020      	str	r0, [r4, #0]
 80074a0:	f8c0 9000 	str.w	r9, [r0]
 80074a4:	4604      	mov	r4, r0
 80074a6:	e7e4      	b.n	8007472 <__pow5mult+0x6a>
 80074a8:	4638      	mov	r0, r7
 80074aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ae:	bf00      	nop
 80074b0:	0800c710 	.word	0x0800c710
 80074b4:	0800c4b6 	.word	0x0800c4b6
 80074b8:	0800c5bc 	.word	0x0800c5bc

080074bc <__lshift>:
 80074bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c0:	460c      	mov	r4, r1
 80074c2:	4607      	mov	r7, r0
 80074c4:	4691      	mov	r9, r2
 80074c6:	6923      	ldr	r3, [r4, #16]
 80074c8:	6849      	ldr	r1, [r1, #4]
 80074ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074ce:	68a3      	ldr	r3, [r4, #8]
 80074d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074d4:	f108 0601 	add.w	r6, r8, #1
 80074d8:	42b3      	cmp	r3, r6
 80074da:	db0b      	blt.n	80074f4 <__lshift+0x38>
 80074dc:	4638      	mov	r0, r7
 80074de:	f7ff fd95 	bl	800700c <_Balloc>
 80074e2:	4605      	mov	r5, r0
 80074e4:	b948      	cbnz	r0, 80074fa <__lshift+0x3e>
 80074e6:	4602      	mov	r2, r0
 80074e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074ec:	4b27      	ldr	r3, [pc, #156]	; (800758c <__lshift+0xd0>)
 80074ee:	4828      	ldr	r0, [pc, #160]	; (8007590 <__lshift+0xd4>)
 80074f0:	f000 fc8a 	bl	8007e08 <__assert_func>
 80074f4:	3101      	adds	r1, #1
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	e7ee      	b.n	80074d8 <__lshift+0x1c>
 80074fa:	2300      	movs	r3, #0
 80074fc:	f100 0114 	add.w	r1, r0, #20
 8007500:	f100 0210 	add.w	r2, r0, #16
 8007504:	4618      	mov	r0, r3
 8007506:	4553      	cmp	r3, sl
 8007508:	db33      	blt.n	8007572 <__lshift+0xb6>
 800750a:	6920      	ldr	r0, [r4, #16]
 800750c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007510:	f104 0314 	add.w	r3, r4, #20
 8007514:	f019 091f 	ands.w	r9, r9, #31
 8007518:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800751c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007520:	d02b      	beq.n	800757a <__lshift+0xbe>
 8007522:	468a      	mov	sl, r1
 8007524:	2200      	movs	r2, #0
 8007526:	f1c9 0e20 	rsb	lr, r9, #32
 800752a:	6818      	ldr	r0, [r3, #0]
 800752c:	fa00 f009 	lsl.w	r0, r0, r9
 8007530:	4302      	orrs	r2, r0
 8007532:	f84a 2b04 	str.w	r2, [sl], #4
 8007536:	f853 2b04 	ldr.w	r2, [r3], #4
 800753a:	459c      	cmp	ip, r3
 800753c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007540:	d8f3      	bhi.n	800752a <__lshift+0x6e>
 8007542:	ebac 0304 	sub.w	r3, ip, r4
 8007546:	3b15      	subs	r3, #21
 8007548:	f023 0303 	bic.w	r3, r3, #3
 800754c:	3304      	adds	r3, #4
 800754e:	f104 0015 	add.w	r0, r4, #21
 8007552:	4584      	cmp	ip, r0
 8007554:	bf38      	it	cc
 8007556:	2304      	movcc	r3, #4
 8007558:	50ca      	str	r2, [r1, r3]
 800755a:	b10a      	cbz	r2, 8007560 <__lshift+0xa4>
 800755c:	f108 0602 	add.w	r6, r8, #2
 8007560:	3e01      	subs	r6, #1
 8007562:	4638      	mov	r0, r7
 8007564:	4621      	mov	r1, r4
 8007566:	612e      	str	r6, [r5, #16]
 8007568:	f7ff fd90 	bl	800708c <_Bfree>
 800756c:	4628      	mov	r0, r5
 800756e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007572:	f842 0f04 	str.w	r0, [r2, #4]!
 8007576:	3301      	adds	r3, #1
 8007578:	e7c5      	b.n	8007506 <__lshift+0x4a>
 800757a:	3904      	subs	r1, #4
 800757c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007580:	459c      	cmp	ip, r3
 8007582:	f841 2f04 	str.w	r2, [r1, #4]!
 8007586:	d8f9      	bhi.n	800757c <__lshift+0xc0>
 8007588:	e7ea      	b.n	8007560 <__lshift+0xa4>
 800758a:	bf00      	nop
 800758c:	0800c52c 	.word	0x0800c52c
 8007590:	0800c5bc 	.word	0x0800c5bc

08007594 <__mcmp>:
 8007594:	4603      	mov	r3, r0
 8007596:	690a      	ldr	r2, [r1, #16]
 8007598:	6900      	ldr	r0, [r0, #16]
 800759a:	b530      	push	{r4, r5, lr}
 800759c:	1a80      	subs	r0, r0, r2
 800759e:	d10d      	bne.n	80075bc <__mcmp+0x28>
 80075a0:	3314      	adds	r3, #20
 80075a2:	3114      	adds	r1, #20
 80075a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80075a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80075ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80075b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80075b4:	4295      	cmp	r5, r2
 80075b6:	d002      	beq.n	80075be <__mcmp+0x2a>
 80075b8:	d304      	bcc.n	80075c4 <__mcmp+0x30>
 80075ba:	2001      	movs	r0, #1
 80075bc:	bd30      	pop	{r4, r5, pc}
 80075be:	42a3      	cmp	r3, r4
 80075c0:	d3f4      	bcc.n	80075ac <__mcmp+0x18>
 80075c2:	e7fb      	b.n	80075bc <__mcmp+0x28>
 80075c4:	f04f 30ff 	mov.w	r0, #4294967295
 80075c8:	e7f8      	b.n	80075bc <__mcmp+0x28>
	...

080075cc <__mdiff>:
 80075cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	460c      	mov	r4, r1
 80075d2:	4606      	mov	r6, r0
 80075d4:	4611      	mov	r1, r2
 80075d6:	4620      	mov	r0, r4
 80075d8:	4692      	mov	sl, r2
 80075da:	f7ff ffdb 	bl	8007594 <__mcmp>
 80075de:	1e05      	subs	r5, r0, #0
 80075e0:	d111      	bne.n	8007606 <__mdiff+0x3a>
 80075e2:	4629      	mov	r1, r5
 80075e4:	4630      	mov	r0, r6
 80075e6:	f7ff fd11 	bl	800700c <_Balloc>
 80075ea:	4602      	mov	r2, r0
 80075ec:	b928      	cbnz	r0, 80075fa <__mdiff+0x2e>
 80075ee:	f240 2132 	movw	r1, #562	; 0x232
 80075f2:	4b3c      	ldr	r3, [pc, #240]	; (80076e4 <__mdiff+0x118>)
 80075f4:	483c      	ldr	r0, [pc, #240]	; (80076e8 <__mdiff+0x11c>)
 80075f6:	f000 fc07 	bl	8007e08 <__assert_func>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007600:	4610      	mov	r0, r2
 8007602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007606:	bfa4      	itt	ge
 8007608:	4653      	movge	r3, sl
 800760a:	46a2      	movge	sl, r4
 800760c:	4630      	mov	r0, r6
 800760e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007612:	bfa6      	itte	ge
 8007614:	461c      	movge	r4, r3
 8007616:	2500      	movge	r5, #0
 8007618:	2501      	movlt	r5, #1
 800761a:	f7ff fcf7 	bl	800700c <_Balloc>
 800761e:	4602      	mov	r2, r0
 8007620:	b918      	cbnz	r0, 800762a <__mdiff+0x5e>
 8007622:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007626:	4b2f      	ldr	r3, [pc, #188]	; (80076e4 <__mdiff+0x118>)
 8007628:	e7e4      	b.n	80075f4 <__mdiff+0x28>
 800762a:	f100 0814 	add.w	r8, r0, #20
 800762e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007632:	60c5      	str	r5, [r0, #12]
 8007634:	f04f 0c00 	mov.w	ip, #0
 8007638:	f10a 0514 	add.w	r5, sl, #20
 800763c:	f10a 0010 	add.w	r0, sl, #16
 8007640:	46c2      	mov	sl, r8
 8007642:	6926      	ldr	r6, [r4, #16]
 8007644:	f104 0914 	add.w	r9, r4, #20
 8007648:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800764c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007650:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007654:	f859 3b04 	ldr.w	r3, [r9], #4
 8007658:	fa1f f18b 	uxth.w	r1, fp
 800765c:	4461      	add	r1, ip
 800765e:	fa1f fc83 	uxth.w	ip, r3
 8007662:	0c1b      	lsrs	r3, r3, #16
 8007664:	eba1 010c 	sub.w	r1, r1, ip
 8007668:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800766c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007670:	b289      	uxth	r1, r1
 8007672:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007676:	454e      	cmp	r6, r9
 8007678:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800767c:	f84a 3b04 	str.w	r3, [sl], #4
 8007680:	d8e6      	bhi.n	8007650 <__mdiff+0x84>
 8007682:	1b33      	subs	r3, r6, r4
 8007684:	3b15      	subs	r3, #21
 8007686:	f023 0303 	bic.w	r3, r3, #3
 800768a:	3415      	adds	r4, #21
 800768c:	3304      	adds	r3, #4
 800768e:	42a6      	cmp	r6, r4
 8007690:	bf38      	it	cc
 8007692:	2304      	movcc	r3, #4
 8007694:	441d      	add	r5, r3
 8007696:	4443      	add	r3, r8
 8007698:	461e      	mov	r6, r3
 800769a:	462c      	mov	r4, r5
 800769c:	4574      	cmp	r4, lr
 800769e:	d30e      	bcc.n	80076be <__mdiff+0xf2>
 80076a0:	f10e 0103 	add.w	r1, lr, #3
 80076a4:	1b49      	subs	r1, r1, r5
 80076a6:	f021 0103 	bic.w	r1, r1, #3
 80076aa:	3d03      	subs	r5, #3
 80076ac:	45ae      	cmp	lr, r5
 80076ae:	bf38      	it	cc
 80076b0:	2100      	movcc	r1, #0
 80076b2:	4419      	add	r1, r3
 80076b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80076b8:	b18b      	cbz	r3, 80076de <__mdiff+0x112>
 80076ba:	6117      	str	r7, [r2, #16]
 80076bc:	e7a0      	b.n	8007600 <__mdiff+0x34>
 80076be:	f854 8b04 	ldr.w	r8, [r4], #4
 80076c2:	fa1f f188 	uxth.w	r1, r8
 80076c6:	4461      	add	r1, ip
 80076c8:	1408      	asrs	r0, r1, #16
 80076ca:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80076ce:	b289      	uxth	r1, r1
 80076d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80076d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80076d8:	f846 1b04 	str.w	r1, [r6], #4
 80076dc:	e7de      	b.n	800769c <__mdiff+0xd0>
 80076de:	3f01      	subs	r7, #1
 80076e0:	e7e8      	b.n	80076b4 <__mdiff+0xe8>
 80076e2:	bf00      	nop
 80076e4:	0800c52c 	.word	0x0800c52c
 80076e8:	0800c5bc 	.word	0x0800c5bc

080076ec <__ulp>:
 80076ec:	4b11      	ldr	r3, [pc, #68]	; (8007734 <__ulp+0x48>)
 80076ee:	400b      	ands	r3, r1
 80076f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	dd02      	ble.n	80076fe <__ulp+0x12>
 80076f8:	2000      	movs	r0, #0
 80076fa:	4619      	mov	r1, r3
 80076fc:	4770      	bx	lr
 80076fe:	425b      	negs	r3, r3
 8007700:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007704:	f04f 0000 	mov.w	r0, #0
 8007708:	f04f 0100 	mov.w	r1, #0
 800770c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007710:	da04      	bge.n	800771c <__ulp+0x30>
 8007712:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007716:	fa43 f102 	asr.w	r1, r3, r2
 800771a:	4770      	bx	lr
 800771c:	f1a2 0314 	sub.w	r3, r2, #20
 8007720:	2b1e      	cmp	r3, #30
 8007722:	bfd6      	itet	le
 8007724:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007728:	2301      	movgt	r3, #1
 800772a:	fa22 f303 	lsrle.w	r3, r2, r3
 800772e:	4618      	mov	r0, r3
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	7ff00000 	.word	0x7ff00000

08007738 <__b2d>:
 8007738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800773c:	6907      	ldr	r7, [r0, #16]
 800773e:	f100 0914 	add.w	r9, r0, #20
 8007742:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007746:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800774a:	f1a7 0804 	sub.w	r8, r7, #4
 800774e:	4630      	mov	r0, r6
 8007750:	f7ff fd52 	bl	80071f8 <__hi0bits>
 8007754:	f1c0 0320 	rsb	r3, r0, #32
 8007758:	280a      	cmp	r0, #10
 800775a:	600b      	str	r3, [r1, #0]
 800775c:	491f      	ldr	r1, [pc, #124]	; (80077dc <__b2d+0xa4>)
 800775e:	dc17      	bgt.n	8007790 <__b2d+0x58>
 8007760:	45c1      	cmp	r9, r8
 8007762:	bf28      	it	cs
 8007764:	2200      	movcs	r2, #0
 8007766:	f1c0 0c0b 	rsb	ip, r0, #11
 800776a:	fa26 f30c 	lsr.w	r3, r6, ip
 800776e:	bf38      	it	cc
 8007770:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007774:	ea43 0501 	orr.w	r5, r3, r1
 8007778:	f100 0315 	add.w	r3, r0, #21
 800777c:	fa06 f303 	lsl.w	r3, r6, r3
 8007780:	fa22 f20c 	lsr.w	r2, r2, ip
 8007784:	ea43 0402 	orr.w	r4, r3, r2
 8007788:	4620      	mov	r0, r4
 800778a:	4629      	mov	r1, r5
 800778c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007790:	45c1      	cmp	r9, r8
 8007792:	bf2e      	itee	cs
 8007794:	2200      	movcs	r2, #0
 8007796:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800779a:	f1a7 0808 	subcc.w	r8, r7, #8
 800779e:	f1b0 030b 	subs.w	r3, r0, #11
 80077a2:	d016      	beq.n	80077d2 <__b2d+0x9a>
 80077a4:	f1c3 0720 	rsb	r7, r3, #32
 80077a8:	fa22 f107 	lsr.w	r1, r2, r7
 80077ac:	45c8      	cmp	r8, r9
 80077ae:	fa06 f603 	lsl.w	r6, r6, r3
 80077b2:	ea46 0601 	orr.w	r6, r6, r1
 80077b6:	bf94      	ite	ls
 80077b8:	2100      	movls	r1, #0
 80077ba:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80077be:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80077c2:	fa02 f003 	lsl.w	r0, r2, r3
 80077c6:	40f9      	lsrs	r1, r7
 80077c8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80077cc:	ea40 0401 	orr.w	r4, r0, r1
 80077d0:	e7da      	b.n	8007788 <__b2d+0x50>
 80077d2:	4614      	mov	r4, r2
 80077d4:	ea46 0501 	orr.w	r5, r6, r1
 80077d8:	e7d6      	b.n	8007788 <__b2d+0x50>
 80077da:	bf00      	nop
 80077dc:	3ff00000 	.word	0x3ff00000

080077e0 <__d2b>:
 80077e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80077e4:	2101      	movs	r1, #1
 80077e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80077ea:	4690      	mov	r8, r2
 80077ec:	461d      	mov	r5, r3
 80077ee:	f7ff fc0d 	bl	800700c <_Balloc>
 80077f2:	4604      	mov	r4, r0
 80077f4:	b930      	cbnz	r0, 8007804 <__d2b+0x24>
 80077f6:	4602      	mov	r2, r0
 80077f8:	f240 310a 	movw	r1, #778	; 0x30a
 80077fc:	4b24      	ldr	r3, [pc, #144]	; (8007890 <__d2b+0xb0>)
 80077fe:	4825      	ldr	r0, [pc, #148]	; (8007894 <__d2b+0xb4>)
 8007800:	f000 fb02 	bl	8007e08 <__assert_func>
 8007804:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007808:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800780c:	bb2d      	cbnz	r5, 800785a <__d2b+0x7a>
 800780e:	9301      	str	r3, [sp, #4]
 8007810:	f1b8 0300 	subs.w	r3, r8, #0
 8007814:	d026      	beq.n	8007864 <__d2b+0x84>
 8007816:	4668      	mov	r0, sp
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	f7ff fd0d 	bl	8007238 <__lo0bits>
 800781e:	9900      	ldr	r1, [sp, #0]
 8007820:	b1f0      	cbz	r0, 8007860 <__d2b+0x80>
 8007822:	9a01      	ldr	r2, [sp, #4]
 8007824:	f1c0 0320 	rsb	r3, r0, #32
 8007828:	fa02 f303 	lsl.w	r3, r2, r3
 800782c:	430b      	orrs	r3, r1
 800782e:	40c2      	lsrs	r2, r0
 8007830:	6163      	str	r3, [r4, #20]
 8007832:	9201      	str	r2, [sp, #4]
 8007834:	9b01      	ldr	r3, [sp, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	bf14      	ite	ne
 800783a:	2102      	movne	r1, #2
 800783c:	2101      	moveq	r1, #1
 800783e:	61a3      	str	r3, [r4, #24]
 8007840:	6121      	str	r1, [r4, #16]
 8007842:	b1c5      	cbz	r5, 8007876 <__d2b+0x96>
 8007844:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007848:	4405      	add	r5, r0
 800784a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800784e:	603d      	str	r5, [r7, #0]
 8007850:	6030      	str	r0, [r6, #0]
 8007852:	4620      	mov	r0, r4
 8007854:	b002      	add	sp, #8
 8007856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800785a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800785e:	e7d6      	b.n	800780e <__d2b+0x2e>
 8007860:	6161      	str	r1, [r4, #20]
 8007862:	e7e7      	b.n	8007834 <__d2b+0x54>
 8007864:	a801      	add	r0, sp, #4
 8007866:	f7ff fce7 	bl	8007238 <__lo0bits>
 800786a:	2101      	movs	r1, #1
 800786c:	9b01      	ldr	r3, [sp, #4]
 800786e:	6121      	str	r1, [r4, #16]
 8007870:	6163      	str	r3, [r4, #20]
 8007872:	3020      	adds	r0, #32
 8007874:	e7e5      	b.n	8007842 <__d2b+0x62>
 8007876:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800787a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800787e:	6038      	str	r0, [r7, #0]
 8007880:	6918      	ldr	r0, [r3, #16]
 8007882:	f7ff fcb9 	bl	80071f8 <__hi0bits>
 8007886:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800788a:	6031      	str	r1, [r6, #0]
 800788c:	e7e1      	b.n	8007852 <__d2b+0x72>
 800788e:	bf00      	nop
 8007890:	0800c52c 	.word	0x0800c52c
 8007894:	0800c5bc 	.word	0x0800c5bc

08007898 <__ratio>:
 8007898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	4688      	mov	r8, r1
 800789e:	4669      	mov	r1, sp
 80078a0:	4681      	mov	r9, r0
 80078a2:	f7ff ff49 	bl	8007738 <__b2d>
 80078a6:	460f      	mov	r7, r1
 80078a8:	4604      	mov	r4, r0
 80078aa:	460d      	mov	r5, r1
 80078ac:	4640      	mov	r0, r8
 80078ae:	a901      	add	r1, sp, #4
 80078b0:	f7ff ff42 	bl	8007738 <__b2d>
 80078b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80078b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80078bc:	468b      	mov	fp, r1
 80078be:	eba3 0c02 	sub.w	ip, r3, r2
 80078c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80078c6:	1a9b      	subs	r3, r3, r2
 80078c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bfd5      	itete	le
 80078d0:	460a      	movle	r2, r1
 80078d2:	462a      	movgt	r2, r5
 80078d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80078d8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80078dc:	bfd8      	it	le
 80078de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80078e2:	465b      	mov	r3, fp
 80078e4:	4602      	mov	r2, r0
 80078e6:	4639      	mov	r1, r7
 80078e8:	4620      	mov	r0, r4
 80078ea:	f7f8 ff1f 	bl	800072c <__aeabi_ddiv>
 80078ee:	b003      	add	sp, #12
 80078f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080078f4 <__copybits>:
 80078f4:	3901      	subs	r1, #1
 80078f6:	b570      	push	{r4, r5, r6, lr}
 80078f8:	1149      	asrs	r1, r1, #5
 80078fa:	6914      	ldr	r4, [r2, #16]
 80078fc:	3101      	adds	r1, #1
 80078fe:	f102 0314 	add.w	r3, r2, #20
 8007902:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007906:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800790a:	1f05      	subs	r5, r0, #4
 800790c:	42a3      	cmp	r3, r4
 800790e:	d30c      	bcc.n	800792a <__copybits+0x36>
 8007910:	1aa3      	subs	r3, r4, r2
 8007912:	3b11      	subs	r3, #17
 8007914:	f023 0303 	bic.w	r3, r3, #3
 8007918:	3211      	adds	r2, #17
 800791a:	42a2      	cmp	r2, r4
 800791c:	bf88      	it	hi
 800791e:	2300      	movhi	r3, #0
 8007920:	4418      	add	r0, r3
 8007922:	2300      	movs	r3, #0
 8007924:	4288      	cmp	r0, r1
 8007926:	d305      	bcc.n	8007934 <__copybits+0x40>
 8007928:	bd70      	pop	{r4, r5, r6, pc}
 800792a:	f853 6b04 	ldr.w	r6, [r3], #4
 800792e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007932:	e7eb      	b.n	800790c <__copybits+0x18>
 8007934:	f840 3b04 	str.w	r3, [r0], #4
 8007938:	e7f4      	b.n	8007924 <__copybits+0x30>

0800793a <__any_on>:
 800793a:	f100 0214 	add.w	r2, r0, #20
 800793e:	6900      	ldr	r0, [r0, #16]
 8007940:	114b      	asrs	r3, r1, #5
 8007942:	4298      	cmp	r0, r3
 8007944:	b510      	push	{r4, lr}
 8007946:	db11      	blt.n	800796c <__any_on+0x32>
 8007948:	dd0a      	ble.n	8007960 <__any_on+0x26>
 800794a:	f011 011f 	ands.w	r1, r1, #31
 800794e:	d007      	beq.n	8007960 <__any_on+0x26>
 8007950:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007954:	fa24 f001 	lsr.w	r0, r4, r1
 8007958:	fa00 f101 	lsl.w	r1, r0, r1
 800795c:	428c      	cmp	r4, r1
 800795e:	d10b      	bne.n	8007978 <__any_on+0x3e>
 8007960:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007964:	4293      	cmp	r3, r2
 8007966:	d803      	bhi.n	8007970 <__any_on+0x36>
 8007968:	2000      	movs	r0, #0
 800796a:	bd10      	pop	{r4, pc}
 800796c:	4603      	mov	r3, r0
 800796e:	e7f7      	b.n	8007960 <__any_on+0x26>
 8007970:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007974:	2900      	cmp	r1, #0
 8007976:	d0f5      	beq.n	8007964 <__any_on+0x2a>
 8007978:	2001      	movs	r0, #1
 800797a:	e7f6      	b.n	800796a <__any_on+0x30>

0800797c <_calloc_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	fb02 f501 	mul.w	r5, r2, r1
 8007982:	4629      	mov	r1, r5
 8007984:	f000 f854 	bl	8007a30 <_malloc_r>
 8007988:	4604      	mov	r4, r0
 800798a:	b118      	cbz	r0, 8007994 <_calloc_r+0x18>
 800798c:	462a      	mov	r2, r5
 800798e:	2100      	movs	r1, #0
 8007990:	f7fc fba2 	bl	80040d8 <memset>
 8007994:	4620      	mov	r0, r4
 8007996:	bd38      	pop	{r3, r4, r5, pc}

08007998 <_free_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4605      	mov	r5, r0
 800799c:	2900      	cmp	r1, #0
 800799e:	d043      	beq.n	8007a28 <_free_r+0x90>
 80079a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079a4:	1f0c      	subs	r4, r1, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	bfb8      	it	lt
 80079aa:	18e4      	addlt	r4, r4, r3
 80079ac:	f000 fa76 	bl	8007e9c <__malloc_lock>
 80079b0:	4a1e      	ldr	r2, [pc, #120]	; (8007a2c <_free_r+0x94>)
 80079b2:	6813      	ldr	r3, [r2, #0]
 80079b4:	4610      	mov	r0, r2
 80079b6:	b933      	cbnz	r3, 80079c6 <_free_r+0x2e>
 80079b8:	6063      	str	r3, [r4, #4]
 80079ba:	6014      	str	r4, [r2, #0]
 80079bc:	4628      	mov	r0, r5
 80079be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079c2:	f000 ba71 	b.w	8007ea8 <__malloc_unlock>
 80079c6:	42a3      	cmp	r3, r4
 80079c8:	d90a      	bls.n	80079e0 <_free_r+0x48>
 80079ca:	6821      	ldr	r1, [r4, #0]
 80079cc:	1862      	adds	r2, r4, r1
 80079ce:	4293      	cmp	r3, r2
 80079d0:	bf01      	itttt	eq
 80079d2:	681a      	ldreq	r2, [r3, #0]
 80079d4:	685b      	ldreq	r3, [r3, #4]
 80079d6:	1852      	addeq	r2, r2, r1
 80079d8:	6022      	streq	r2, [r4, #0]
 80079da:	6063      	str	r3, [r4, #4]
 80079dc:	6004      	str	r4, [r0, #0]
 80079de:	e7ed      	b.n	80079bc <_free_r+0x24>
 80079e0:	461a      	mov	r2, r3
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	b10b      	cbz	r3, 80079ea <_free_r+0x52>
 80079e6:	42a3      	cmp	r3, r4
 80079e8:	d9fa      	bls.n	80079e0 <_free_r+0x48>
 80079ea:	6811      	ldr	r1, [r2, #0]
 80079ec:	1850      	adds	r0, r2, r1
 80079ee:	42a0      	cmp	r0, r4
 80079f0:	d10b      	bne.n	8007a0a <_free_r+0x72>
 80079f2:	6820      	ldr	r0, [r4, #0]
 80079f4:	4401      	add	r1, r0
 80079f6:	1850      	adds	r0, r2, r1
 80079f8:	4283      	cmp	r3, r0
 80079fa:	6011      	str	r1, [r2, #0]
 80079fc:	d1de      	bne.n	80079bc <_free_r+0x24>
 80079fe:	6818      	ldr	r0, [r3, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	4401      	add	r1, r0
 8007a04:	6011      	str	r1, [r2, #0]
 8007a06:	6053      	str	r3, [r2, #4]
 8007a08:	e7d8      	b.n	80079bc <_free_r+0x24>
 8007a0a:	d902      	bls.n	8007a12 <_free_r+0x7a>
 8007a0c:	230c      	movs	r3, #12
 8007a0e:	602b      	str	r3, [r5, #0]
 8007a10:	e7d4      	b.n	80079bc <_free_r+0x24>
 8007a12:	6820      	ldr	r0, [r4, #0]
 8007a14:	1821      	adds	r1, r4, r0
 8007a16:	428b      	cmp	r3, r1
 8007a18:	bf01      	itttt	eq
 8007a1a:	6819      	ldreq	r1, [r3, #0]
 8007a1c:	685b      	ldreq	r3, [r3, #4]
 8007a1e:	1809      	addeq	r1, r1, r0
 8007a20:	6021      	streq	r1, [r4, #0]
 8007a22:	6063      	str	r3, [r4, #4]
 8007a24:	6054      	str	r4, [r2, #4]
 8007a26:	e7c9      	b.n	80079bc <_free_r+0x24>
 8007a28:	bd38      	pop	{r3, r4, r5, pc}
 8007a2a:	bf00      	nop
 8007a2c:	2000062c 	.word	0x2000062c

08007a30 <_malloc_r>:
 8007a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a32:	1ccd      	adds	r5, r1, #3
 8007a34:	f025 0503 	bic.w	r5, r5, #3
 8007a38:	3508      	adds	r5, #8
 8007a3a:	2d0c      	cmp	r5, #12
 8007a3c:	bf38      	it	cc
 8007a3e:	250c      	movcc	r5, #12
 8007a40:	2d00      	cmp	r5, #0
 8007a42:	4606      	mov	r6, r0
 8007a44:	db01      	blt.n	8007a4a <_malloc_r+0x1a>
 8007a46:	42a9      	cmp	r1, r5
 8007a48:	d903      	bls.n	8007a52 <_malloc_r+0x22>
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	6033      	str	r3, [r6, #0]
 8007a4e:	2000      	movs	r0, #0
 8007a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a52:	f000 fa23 	bl	8007e9c <__malloc_lock>
 8007a56:	4921      	ldr	r1, [pc, #132]	; (8007adc <_malloc_r+0xac>)
 8007a58:	680a      	ldr	r2, [r1, #0]
 8007a5a:	4614      	mov	r4, r2
 8007a5c:	b99c      	cbnz	r4, 8007a86 <_malloc_r+0x56>
 8007a5e:	4f20      	ldr	r7, [pc, #128]	; (8007ae0 <_malloc_r+0xb0>)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	b923      	cbnz	r3, 8007a6e <_malloc_r+0x3e>
 8007a64:	4621      	mov	r1, r4
 8007a66:	4630      	mov	r0, r6
 8007a68:	f000 f99e 	bl	8007da8 <_sbrk_r>
 8007a6c:	6038      	str	r0, [r7, #0]
 8007a6e:	4629      	mov	r1, r5
 8007a70:	4630      	mov	r0, r6
 8007a72:	f000 f999 	bl	8007da8 <_sbrk_r>
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	d123      	bne.n	8007ac2 <_malloc_r+0x92>
 8007a7a:	230c      	movs	r3, #12
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	6033      	str	r3, [r6, #0]
 8007a80:	f000 fa12 	bl	8007ea8 <__malloc_unlock>
 8007a84:	e7e3      	b.n	8007a4e <_malloc_r+0x1e>
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	1b5b      	subs	r3, r3, r5
 8007a8a:	d417      	bmi.n	8007abc <_malloc_r+0x8c>
 8007a8c:	2b0b      	cmp	r3, #11
 8007a8e:	d903      	bls.n	8007a98 <_malloc_r+0x68>
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	441c      	add	r4, r3
 8007a94:	6025      	str	r5, [r4, #0]
 8007a96:	e004      	b.n	8007aa2 <_malloc_r+0x72>
 8007a98:	6863      	ldr	r3, [r4, #4]
 8007a9a:	42a2      	cmp	r2, r4
 8007a9c:	bf0c      	ite	eq
 8007a9e:	600b      	streq	r3, [r1, #0]
 8007aa0:	6053      	strne	r3, [r2, #4]
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f000 fa00 	bl	8007ea8 <__malloc_unlock>
 8007aa8:	f104 000b 	add.w	r0, r4, #11
 8007aac:	1d23      	adds	r3, r4, #4
 8007aae:	f020 0007 	bic.w	r0, r0, #7
 8007ab2:	1ac2      	subs	r2, r0, r3
 8007ab4:	d0cc      	beq.n	8007a50 <_malloc_r+0x20>
 8007ab6:	1a1b      	subs	r3, r3, r0
 8007ab8:	50a3      	str	r3, [r4, r2]
 8007aba:	e7c9      	b.n	8007a50 <_malloc_r+0x20>
 8007abc:	4622      	mov	r2, r4
 8007abe:	6864      	ldr	r4, [r4, #4]
 8007ac0:	e7cc      	b.n	8007a5c <_malloc_r+0x2c>
 8007ac2:	1cc4      	adds	r4, r0, #3
 8007ac4:	f024 0403 	bic.w	r4, r4, #3
 8007ac8:	42a0      	cmp	r0, r4
 8007aca:	d0e3      	beq.n	8007a94 <_malloc_r+0x64>
 8007acc:	1a21      	subs	r1, r4, r0
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f000 f96a 	bl	8007da8 <_sbrk_r>
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	d1dd      	bne.n	8007a94 <_malloc_r+0x64>
 8007ad8:	e7cf      	b.n	8007a7a <_malloc_r+0x4a>
 8007ada:	bf00      	nop
 8007adc:	2000062c 	.word	0x2000062c
 8007ae0:	20000630 	.word	0x20000630

08007ae4 <__ssputs_r>:
 8007ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae8:	688e      	ldr	r6, [r1, #8]
 8007aea:	4682      	mov	sl, r0
 8007aec:	429e      	cmp	r6, r3
 8007aee:	460c      	mov	r4, r1
 8007af0:	4690      	mov	r8, r2
 8007af2:	461f      	mov	r7, r3
 8007af4:	d838      	bhi.n	8007b68 <__ssputs_r+0x84>
 8007af6:	898a      	ldrh	r2, [r1, #12]
 8007af8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007afc:	d032      	beq.n	8007b64 <__ssputs_r+0x80>
 8007afe:	6825      	ldr	r5, [r4, #0]
 8007b00:	6909      	ldr	r1, [r1, #16]
 8007b02:	3301      	adds	r3, #1
 8007b04:	eba5 0901 	sub.w	r9, r5, r1
 8007b08:	6965      	ldr	r5, [r4, #20]
 8007b0a:	444b      	add	r3, r9
 8007b0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b14:	106d      	asrs	r5, r5, #1
 8007b16:	429d      	cmp	r5, r3
 8007b18:	bf38      	it	cc
 8007b1a:	461d      	movcc	r5, r3
 8007b1c:	0553      	lsls	r3, r2, #21
 8007b1e:	d531      	bpl.n	8007b84 <__ssputs_r+0xa0>
 8007b20:	4629      	mov	r1, r5
 8007b22:	f7ff ff85 	bl	8007a30 <_malloc_r>
 8007b26:	4606      	mov	r6, r0
 8007b28:	b950      	cbnz	r0, 8007b40 <__ssputs_r+0x5c>
 8007b2a:	230c      	movs	r3, #12
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b30:	f8ca 3000 	str.w	r3, [sl]
 8007b34:	89a3      	ldrh	r3, [r4, #12]
 8007b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b3a:	81a3      	strh	r3, [r4, #12]
 8007b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b40:	464a      	mov	r2, r9
 8007b42:	6921      	ldr	r1, [r4, #16]
 8007b44:	f7ff fa54 	bl	8006ff0 <memcpy>
 8007b48:	89a3      	ldrh	r3, [r4, #12]
 8007b4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b52:	81a3      	strh	r3, [r4, #12]
 8007b54:	6126      	str	r6, [r4, #16]
 8007b56:	444e      	add	r6, r9
 8007b58:	6026      	str	r6, [r4, #0]
 8007b5a:	463e      	mov	r6, r7
 8007b5c:	6165      	str	r5, [r4, #20]
 8007b5e:	eba5 0509 	sub.w	r5, r5, r9
 8007b62:	60a5      	str	r5, [r4, #8]
 8007b64:	42be      	cmp	r6, r7
 8007b66:	d900      	bls.n	8007b6a <__ssputs_r+0x86>
 8007b68:	463e      	mov	r6, r7
 8007b6a:	4632      	mov	r2, r6
 8007b6c:	4641      	mov	r1, r8
 8007b6e:	6820      	ldr	r0, [r4, #0]
 8007b70:	f000 f97a 	bl	8007e68 <memmove>
 8007b74:	68a3      	ldr	r3, [r4, #8]
 8007b76:	6822      	ldr	r2, [r4, #0]
 8007b78:	1b9b      	subs	r3, r3, r6
 8007b7a:	4432      	add	r2, r6
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	60a3      	str	r3, [r4, #8]
 8007b80:	6022      	str	r2, [r4, #0]
 8007b82:	e7db      	b.n	8007b3c <__ssputs_r+0x58>
 8007b84:	462a      	mov	r2, r5
 8007b86:	f000 f995 	bl	8007eb4 <_realloc_r>
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d1e1      	bne.n	8007b54 <__ssputs_r+0x70>
 8007b90:	4650      	mov	r0, sl
 8007b92:	6921      	ldr	r1, [r4, #16]
 8007b94:	f7ff ff00 	bl	8007998 <_free_r>
 8007b98:	e7c7      	b.n	8007b2a <__ssputs_r+0x46>
	...

08007b9c <_svfiprintf_r>:
 8007b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba0:	4698      	mov	r8, r3
 8007ba2:	898b      	ldrh	r3, [r1, #12]
 8007ba4:	4607      	mov	r7, r0
 8007ba6:	061b      	lsls	r3, r3, #24
 8007ba8:	460d      	mov	r5, r1
 8007baa:	4614      	mov	r4, r2
 8007bac:	b09d      	sub	sp, #116	; 0x74
 8007bae:	d50e      	bpl.n	8007bce <_svfiprintf_r+0x32>
 8007bb0:	690b      	ldr	r3, [r1, #16]
 8007bb2:	b963      	cbnz	r3, 8007bce <_svfiprintf_r+0x32>
 8007bb4:	2140      	movs	r1, #64	; 0x40
 8007bb6:	f7ff ff3b 	bl	8007a30 <_malloc_r>
 8007bba:	6028      	str	r0, [r5, #0]
 8007bbc:	6128      	str	r0, [r5, #16]
 8007bbe:	b920      	cbnz	r0, 8007bca <_svfiprintf_r+0x2e>
 8007bc0:	230c      	movs	r3, #12
 8007bc2:	603b      	str	r3, [r7, #0]
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	e0d1      	b.n	8007d6e <_svfiprintf_r+0x1d2>
 8007bca:	2340      	movs	r3, #64	; 0x40
 8007bcc:	616b      	str	r3, [r5, #20]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd2:	2320      	movs	r3, #32
 8007bd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bd8:	2330      	movs	r3, #48	; 0x30
 8007bda:	f04f 0901 	mov.w	r9, #1
 8007bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8007be2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d88 <_svfiprintf_r+0x1ec>
 8007be6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bea:	4623      	mov	r3, r4
 8007bec:	469a      	mov	sl, r3
 8007bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bf2:	b10a      	cbz	r2, 8007bf8 <_svfiprintf_r+0x5c>
 8007bf4:	2a25      	cmp	r2, #37	; 0x25
 8007bf6:	d1f9      	bne.n	8007bec <_svfiprintf_r+0x50>
 8007bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8007bfc:	d00b      	beq.n	8007c16 <_svfiprintf_r+0x7a>
 8007bfe:	465b      	mov	r3, fp
 8007c00:	4622      	mov	r2, r4
 8007c02:	4629      	mov	r1, r5
 8007c04:	4638      	mov	r0, r7
 8007c06:	f7ff ff6d 	bl	8007ae4 <__ssputs_r>
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	f000 80aa 	beq.w	8007d64 <_svfiprintf_r+0x1c8>
 8007c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c12:	445a      	add	r2, fp
 8007c14:	9209      	str	r2, [sp, #36]	; 0x24
 8007c16:	f89a 3000 	ldrb.w	r3, [sl]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 80a2 	beq.w	8007d64 <_svfiprintf_r+0x1c8>
 8007c20:	2300      	movs	r3, #0
 8007c22:	f04f 32ff 	mov.w	r2, #4294967295
 8007c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c2a:	f10a 0a01 	add.w	sl, sl, #1
 8007c2e:	9304      	str	r3, [sp, #16]
 8007c30:	9307      	str	r3, [sp, #28]
 8007c32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c36:	931a      	str	r3, [sp, #104]	; 0x68
 8007c38:	4654      	mov	r4, sl
 8007c3a:	2205      	movs	r2, #5
 8007c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c40:	4851      	ldr	r0, [pc, #324]	; (8007d88 <_svfiprintf_r+0x1ec>)
 8007c42:	f7ff f9c7 	bl	8006fd4 <memchr>
 8007c46:	9a04      	ldr	r2, [sp, #16]
 8007c48:	b9d8      	cbnz	r0, 8007c82 <_svfiprintf_r+0xe6>
 8007c4a:	06d0      	lsls	r0, r2, #27
 8007c4c:	bf44      	itt	mi
 8007c4e:	2320      	movmi	r3, #32
 8007c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c54:	0711      	lsls	r1, r2, #28
 8007c56:	bf44      	itt	mi
 8007c58:	232b      	movmi	r3, #43	; 0x2b
 8007c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c62:	2b2a      	cmp	r3, #42	; 0x2a
 8007c64:	d015      	beq.n	8007c92 <_svfiprintf_r+0xf6>
 8007c66:	4654      	mov	r4, sl
 8007c68:	2000      	movs	r0, #0
 8007c6a:	f04f 0c0a 	mov.w	ip, #10
 8007c6e:	9a07      	ldr	r2, [sp, #28]
 8007c70:	4621      	mov	r1, r4
 8007c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c76:	3b30      	subs	r3, #48	; 0x30
 8007c78:	2b09      	cmp	r3, #9
 8007c7a:	d94e      	bls.n	8007d1a <_svfiprintf_r+0x17e>
 8007c7c:	b1b0      	cbz	r0, 8007cac <_svfiprintf_r+0x110>
 8007c7e:	9207      	str	r2, [sp, #28]
 8007c80:	e014      	b.n	8007cac <_svfiprintf_r+0x110>
 8007c82:	eba0 0308 	sub.w	r3, r0, r8
 8007c86:	fa09 f303 	lsl.w	r3, r9, r3
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	46a2      	mov	sl, r4
 8007c8e:	9304      	str	r3, [sp, #16]
 8007c90:	e7d2      	b.n	8007c38 <_svfiprintf_r+0x9c>
 8007c92:	9b03      	ldr	r3, [sp, #12]
 8007c94:	1d19      	adds	r1, r3, #4
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	9103      	str	r1, [sp, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bfbb      	ittet	lt
 8007c9e:	425b      	neglt	r3, r3
 8007ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ca4:	9307      	strge	r3, [sp, #28]
 8007ca6:	9307      	strlt	r3, [sp, #28]
 8007ca8:	bfb8      	it	lt
 8007caa:	9204      	strlt	r2, [sp, #16]
 8007cac:	7823      	ldrb	r3, [r4, #0]
 8007cae:	2b2e      	cmp	r3, #46	; 0x2e
 8007cb0:	d10c      	bne.n	8007ccc <_svfiprintf_r+0x130>
 8007cb2:	7863      	ldrb	r3, [r4, #1]
 8007cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8007cb6:	d135      	bne.n	8007d24 <_svfiprintf_r+0x188>
 8007cb8:	9b03      	ldr	r3, [sp, #12]
 8007cba:	3402      	adds	r4, #2
 8007cbc:	1d1a      	adds	r2, r3, #4
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	9203      	str	r2, [sp, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	bfb8      	it	lt
 8007cc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cca:	9305      	str	r3, [sp, #20]
 8007ccc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d98 <_svfiprintf_r+0x1fc>
 8007cd0:	2203      	movs	r2, #3
 8007cd2:	4650      	mov	r0, sl
 8007cd4:	7821      	ldrb	r1, [r4, #0]
 8007cd6:	f7ff f97d 	bl	8006fd4 <memchr>
 8007cda:	b140      	cbz	r0, 8007cee <_svfiprintf_r+0x152>
 8007cdc:	2340      	movs	r3, #64	; 0x40
 8007cde:	eba0 000a 	sub.w	r0, r0, sl
 8007ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ce6:	9b04      	ldr	r3, [sp, #16]
 8007ce8:	3401      	adds	r4, #1
 8007cea:	4303      	orrs	r3, r0
 8007cec:	9304      	str	r3, [sp, #16]
 8007cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cf2:	2206      	movs	r2, #6
 8007cf4:	4825      	ldr	r0, [pc, #148]	; (8007d8c <_svfiprintf_r+0x1f0>)
 8007cf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cfa:	f7ff f96b 	bl	8006fd4 <memchr>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d038      	beq.n	8007d74 <_svfiprintf_r+0x1d8>
 8007d02:	4b23      	ldr	r3, [pc, #140]	; (8007d90 <_svfiprintf_r+0x1f4>)
 8007d04:	bb1b      	cbnz	r3, 8007d4e <_svfiprintf_r+0x1b2>
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	3307      	adds	r3, #7
 8007d0a:	f023 0307 	bic.w	r3, r3, #7
 8007d0e:	3308      	adds	r3, #8
 8007d10:	9303      	str	r3, [sp, #12]
 8007d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d14:	4433      	add	r3, r6
 8007d16:	9309      	str	r3, [sp, #36]	; 0x24
 8007d18:	e767      	b.n	8007bea <_svfiprintf_r+0x4e>
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d22:	e7a5      	b.n	8007c70 <_svfiprintf_r+0xd4>
 8007d24:	2300      	movs	r3, #0
 8007d26:	f04f 0c0a 	mov.w	ip, #10
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	3401      	adds	r4, #1
 8007d2e:	9305      	str	r3, [sp, #20]
 8007d30:	4620      	mov	r0, r4
 8007d32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d36:	3a30      	subs	r2, #48	; 0x30
 8007d38:	2a09      	cmp	r2, #9
 8007d3a:	d903      	bls.n	8007d44 <_svfiprintf_r+0x1a8>
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0c5      	beq.n	8007ccc <_svfiprintf_r+0x130>
 8007d40:	9105      	str	r1, [sp, #20]
 8007d42:	e7c3      	b.n	8007ccc <_svfiprintf_r+0x130>
 8007d44:	4604      	mov	r4, r0
 8007d46:	2301      	movs	r3, #1
 8007d48:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d4c:	e7f0      	b.n	8007d30 <_svfiprintf_r+0x194>
 8007d4e:	ab03      	add	r3, sp, #12
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	462a      	mov	r2, r5
 8007d54:	4638      	mov	r0, r7
 8007d56:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <_svfiprintf_r+0x1f8>)
 8007d58:	a904      	add	r1, sp, #16
 8007d5a:	f7fc fa63 	bl	8004224 <_printf_float>
 8007d5e:	1c42      	adds	r2, r0, #1
 8007d60:	4606      	mov	r6, r0
 8007d62:	d1d6      	bne.n	8007d12 <_svfiprintf_r+0x176>
 8007d64:	89ab      	ldrh	r3, [r5, #12]
 8007d66:	065b      	lsls	r3, r3, #25
 8007d68:	f53f af2c 	bmi.w	8007bc4 <_svfiprintf_r+0x28>
 8007d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d6e:	b01d      	add	sp, #116	; 0x74
 8007d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d74:	ab03      	add	r3, sp, #12
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	462a      	mov	r2, r5
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <_svfiprintf_r+0x1f8>)
 8007d7e:	a904      	add	r1, sp, #16
 8007d80:	f7fc fcec 	bl	800475c <_printf_i>
 8007d84:	e7eb      	b.n	8007d5e <_svfiprintf_r+0x1c2>
 8007d86:	bf00      	nop
 8007d88:	0800c71c 	.word	0x0800c71c
 8007d8c:	0800c726 	.word	0x0800c726
 8007d90:	08004225 	.word	0x08004225
 8007d94:	08007ae5 	.word	0x08007ae5
 8007d98:	0800c722 	.word	0x0800c722

08007d9c <nan>:
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	4901      	ldr	r1, [pc, #4]	; (8007da4 <nan+0x8>)
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	7ff80000 	.word	0x7ff80000

08007da8 <_sbrk_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	2300      	movs	r3, #0
 8007dac:	4d05      	ldr	r5, [pc, #20]	; (8007dc4 <_sbrk_r+0x1c>)
 8007dae:	4604      	mov	r4, r0
 8007db0:	4608      	mov	r0, r1
 8007db2:	602b      	str	r3, [r5, #0]
 8007db4:	f7fa fbb6 	bl	8002524 <_sbrk>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_sbrk_r+0x1a>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_sbrk_r+0x1a>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	200007ac 	.word	0x200007ac

08007dc8 <strncmp>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	b16a      	cbz	r2, 8007de8 <strncmp+0x20>
 8007dcc:	3901      	subs	r1, #1
 8007dce:	1884      	adds	r4, r0, r2
 8007dd0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007dd4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d103      	bne.n	8007de4 <strncmp+0x1c>
 8007ddc:	42a0      	cmp	r0, r4
 8007dde:	d001      	beq.n	8007de4 <strncmp+0x1c>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1f5      	bne.n	8007dd0 <strncmp+0x8>
 8007de4:	1a98      	subs	r0, r3, r2
 8007de6:	bd10      	pop	{r4, pc}
 8007de8:	4610      	mov	r0, r2
 8007dea:	e7fc      	b.n	8007de6 <strncmp+0x1e>

08007dec <__ascii_wctomb>:
 8007dec:	4603      	mov	r3, r0
 8007dee:	4608      	mov	r0, r1
 8007df0:	b141      	cbz	r1, 8007e04 <__ascii_wctomb+0x18>
 8007df2:	2aff      	cmp	r2, #255	; 0xff
 8007df4:	d904      	bls.n	8007e00 <__ascii_wctomb+0x14>
 8007df6:	228a      	movs	r2, #138	; 0x8a
 8007df8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	4770      	bx	lr
 8007e00:	2001      	movs	r0, #1
 8007e02:	700a      	strb	r2, [r1, #0]
 8007e04:	4770      	bx	lr
	...

08007e08 <__assert_func>:
 8007e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e0a:	4614      	mov	r4, r2
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <__assert_func+0x2c>)
 8007e10:	4605      	mov	r5, r0
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68d8      	ldr	r0, [r3, #12]
 8007e16:	b14c      	cbz	r4, 8007e2c <__assert_func+0x24>
 8007e18:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <__assert_func+0x30>)
 8007e1a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e1e:	9100      	str	r1, [sp, #0]
 8007e20:	462b      	mov	r3, r5
 8007e22:	4906      	ldr	r1, [pc, #24]	; (8007e3c <__assert_func+0x34>)
 8007e24:	f000 f80e 	bl	8007e44 <fiprintf>
 8007e28:	f000 fa82 	bl	8008330 <abort>
 8007e2c:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <__assert_func+0x38>)
 8007e2e:	461c      	mov	r4, r3
 8007e30:	e7f3      	b.n	8007e1a <__assert_func+0x12>
 8007e32:	bf00      	nop
 8007e34:	20000024 	.word	0x20000024
 8007e38:	0800c72d 	.word	0x0800c72d
 8007e3c:	0800c73a 	.word	0x0800c73a
 8007e40:	0800c768 	.word	0x0800c768

08007e44 <fiprintf>:
 8007e44:	b40e      	push	{r1, r2, r3}
 8007e46:	b503      	push	{r0, r1, lr}
 8007e48:	4601      	mov	r1, r0
 8007e4a:	ab03      	add	r3, sp, #12
 8007e4c:	4805      	ldr	r0, [pc, #20]	; (8007e64 <fiprintf+0x20>)
 8007e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e52:	6800      	ldr	r0, [r0, #0]
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	f000 f87b 	bl	8007f50 <_vfiprintf_r>
 8007e5a:	b002      	add	sp, #8
 8007e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e60:	b003      	add	sp, #12
 8007e62:	4770      	bx	lr
 8007e64:	20000024 	.word	0x20000024

08007e68 <memmove>:
 8007e68:	4288      	cmp	r0, r1
 8007e6a:	b510      	push	{r4, lr}
 8007e6c:	eb01 0402 	add.w	r4, r1, r2
 8007e70:	d902      	bls.n	8007e78 <memmove+0x10>
 8007e72:	4284      	cmp	r4, r0
 8007e74:	4623      	mov	r3, r4
 8007e76:	d807      	bhi.n	8007e88 <memmove+0x20>
 8007e78:	1e43      	subs	r3, r0, #1
 8007e7a:	42a1      	cmp	r1, r4
 8007e7c:	d008      	beq.n	8007e90 <memmove+0x28>
 8007e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e86:	e7f8      	b.n	8007e7a <memmove+0x12>
 8007e88:	4601      	mov	r1, r0
 8007e8a:	4402      	add	r2, r0
 8007e8c:	428a      	cmp	r2, r1
 8007e8e:	d100      	bne.n	8007e92 <memmove+0x2a>
 8007e90:	bd10      	pop	{r4, pc}
 8007e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e9a:	e7f7      	b.n	8007e8c <memmove+0x24>

08007e9c <__malloc_lock>:
 8007e9c:	4801      	ldr	r0, [pc, #4]	; (8007ea4 <__malloc_lock+0x8>)
 8007e9e:	f000 bc07 	b.w	80086b0 <__retarget_lock_acquire_recursive>
 8007ea2:	bf00      	nop
 8007ea4:	200007b4 	.word	0x200007b4

08007ea8 <__malloc_unlock>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	; (8007eb0 <__malloc_unlock+0x8>)
 8007eaa:	f000 bc02 	b.w	80086b2 <__retarget_lock_release_recursive>
 8007eae:	bf00      	nop
 8007eb0:	200007b4 	.word	0x200007b4

08007eb4 <_realloc_r>:
 8007eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb6:	4607      	mov	r7, r0
 8007eb8:	4614      	mov	r4, r2
 8007eba:	460e      	mov	r6, r1
 8007ebc:	b921      	cbnz	r1, 8007ec8 <_realloc_r+0x14>
 8007ebe:	4611      	mov	r1, r2
 8007ec0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ec4:	f7ff bdb4 	b.w	8007a30 <_malloc_r>
 8007ec8:	b922      	cbnz	r2, 8007ed4 <_realloc_r+0x20>
 8007eca:	f7ff fd65 	bl	8007998 <_free_r>
 8007ece:	4625      	mov	r5, r4
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ed4:	f000 fc52 	bl	800877c <_malloc_usable_size_r>
 8007ed8:	42a0      	cmp	r0, r4
 8007eda:	d20f      	bcs.n	8007efc <_realloc_r+0x48>
 8007edc:	4621      	mov	r1, r4
 8007ede:	4638      	mov	r0, r7
 8007ee0:	f7ff fda6 	bl	8007a30 <_malloc_r>
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d0f2      	beq.n	8007ed0 <_realloc_r+0x1c>
 8007eea:	4631      	mov	r1, r6
 8007eec:	4622      	mov	r2, r4
 8007eee:	f7ff f87f 	bl	8006ff0 <memcpy>
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f7ff fd4f 	bl	8007998 <_free_r>
 8007efa:	e7e9      	b.n	8007ed0 <_realloc_r+0x1c>
 8007efc:	4635      	mov	r5, r6
 8007efe:	e7e7      	b.n	8007ed0 <_realloc_r+0x1c>

08007f00 <__sfputc_r>:
 8007f00:	6893      	ldr	r3, [r2, #8]
 8007f02:	b410      	push	{r4}
 8007f04:	3b01      	subs	r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	6093      	str	r3, [r2, #8]
 8007f0a:	da07      	bge.n	8007f1c <__sfputc_r+0x1c>
 8007f0c:	6994      	ldr	r4, [r2, #24]
 8007f0e:	42a3      	cmp	r3, r4
 8007f10:	db01      	blt.n	8007f16 <__sfputc_r+0x16>
 8007f12:	290a      	cmp	r1, #10
 8007f14:	d102      	bne.n	8007f1c <__sfputc_r+0x1c>
 8007f16:	bc10      	pop	{r4}
 8007f18:	f000 b94a 	b.w	80081b0 <__swbuf_r>
 8007f1c:	6813      	ldr	r3, [r2, #0]
 8007f1e:	1c58      	adds	r0, r3, #1
 8007f20:	6010      	str	r0, [r2, #0]
 8007f22:	7019      	strb	r1, [r3, #0]
 8007f24:	4608      	mov	r0, r1
 8007f26:	bc10      	pop	{r4}
 8007f28:	4770      	bx	lr

08007f2a <__sfputs_r>:
 8007f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	460f      	mov	r7, r1
 8007f30:	4614      	mov	r4, r2
 8007f32:	18d5      	adds	r5, r2, r3
 8007f34:	42ac      	cmp	r4, r5
 8007f36:	d101      	bne.n	8007f3c <__sfputs_r+0x12>
 8007f38:	2000      	movs	r0, #0
 8007f3a:	e007      	b.n	8007f4c <__sfputs_r+0x22>
 8007f3c:	463a      	mov	r2, r7
 8007f3e:	4630      	mov	r0, r6
 8007f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f44:	f7ff ffdc 	bl	8007f00 <__sfputc_r>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d1f3      	bne.n	8007f34 <__sfputs_r+0xa>
 8007f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f50 <_vfiprintf_r>:
 8007f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	460d      	mov	r5, r1
 8007f56:	4614      	mov	r4, r2
 8007f58:	4698      	mov	r8, r3
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	b09d      	sub	sp, #116	; 0x74
 8007f5e:	b118      	cbz	r0, 8007f68 <_vfiprintf_r+0x18>
 8007f60:	6983      	ldr	r3, [r0, #24]
 8007f62:	b90b      	cbnz	r3, 8007f68 <_vfiprintf_r+0x18>
 8007f64:	f000 fb06 	bl	8008574 <__sinit>
 8007f68:	4b89      	ldr	r3, [pc, #548]	; (8008190 <_vfiprintf_r+0x240>)
 8007f6a:	429d      	cmp	r5, r3
 8007f6c:	d11b      	bne.n	8007fa6 <_vfiprintf_r+0x56>
 8007f6e:	6875      	ldr	r5, [r6, #4]
 8007f70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f72:	07d9      	lsls	r1, r3, #31
 8007f74:	d405      	bmi.n	8007f82 <_vfiprintf_r+0x32>
 8007f76:	89ab      	ldrh	r3, [r5, #12]
 8007f78:	059a      	lsls	r2, r3, #22
 8007f7a:	d402      	bmi.n	8007f82 <_vfiprintf_r+0x32>
 8007f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f7e:	f000 fb97 	bl	80086b0 <__retarget_lock_acquire_recursive>
 8007f82:	89ab      	ldrh	r3, [r5, #12]
 8007f84:	071b      	lsls	r3, r3, #28
 8007f86:	d501      	bpl.n	8007f8c <_vfiprintf_r+0x3c>
 8007f88:	692b      	ldr	r3, [r5, #16]
 8007f8a:	b9eb      	cbnz	r3, 8007fc8 <_vfiprintf_r+0x78>
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f000 f960 	bl	8008254 <__swsetup_r>
 8007f94:	b1c0      	cbz	r0, 8007fc8 <_vfiprintf_r+0x78>
 8007f96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f98:	07dc      	lsls	r4, r3, #31
 8007f9a:	d50e      	bpl.n	8007fba <_vfiprintf_r+0x6a>
 8007f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa0:	b01d      	add	sp, #116	; 0x74
 8007fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa6:	4b7b      	ldr	r3, [pc, #492]	; (8008194 <_vfiprintf_r+0x244>)
 8007fa8:	429d      	cmp	r5, r3
 8007faa:	d101      	bne.n	8007fb0 <_vfiprintf_r+0x60>
 8007fac:	68b5      	ldr	r5, [r6, #8]
 8007fae:	e7df      	b.n	8007f70 <_vfiprintf_r+0x20>
 8007fb0:	4b79      	ldr	r3, [pc, #484]	; (8008198 <_vfiprintf_r+0x248>)
 8007fb2:	429d      	cmp	r5, r3
 8007fb4:	bf08      	it	eq
 8007fb6:	68f5      	ldreq	r5, [r6, #12]
 8007fb8:	e7da      	b.n	8007f70 <_vfiprintf_r+0x20>
 8007fba:	89ab      	ldrh	r3, [r5, #12]
 8007fbc:	0598      	lsls	r0, r3, #22
 8007fbe:	d4ed      	bmi.n	8007f9c <_vfiprintf_r+0x4c>
 8007fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fc2:	f000 fb76 	bl	80086b2 <__retarget_lock_release_recursive>
 8007fc6:	e7e9      	b.n	8007f9c <_vfiprintf_r+0x4c>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	9309      	str	r3, [sp, #36]	; 0x24
 8007fcc:	2320      	movs	r3, #32
 8007fce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fd2:	2330      	movs	r3, #48	; 0x30
 8007fd4:	f04f 0901 	mov.w	r9, #1
 8007fd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fdc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800819c <_vfiprintf_r+0x24c>
 8007fe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fe4:	4623      	mov	r3, r4
 8007fe6:	469a      	mov	sl, r3
 8007fe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fec:	b10a      	cbz	r2, 8007ff2 <_vfiprintf_r+0xa2>
 8007fee:	2a25      	cmp	r2, #37	; 0x25
 8007ff0:	d1f9      	bne.n	8007fe6 <_vfiprintf_r+0x96>
 8007ff2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ff6:	d00b      	beq.n	8008010 <_vfiprintf_r+0xc0>
 8007ff8:	465b      	mov	r3, fp
 8007ffa:	4622      	mov	r2, r4
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	4630      	mov	r0, r6
 8008000:	f7ff ff93 	bl	8007f2a <__sfputs_r>
 8008004:	3001      	adds	r0, #1
 8008006:	f000 80aa 	beq.w	800815e <_vfiprintf_r+0x20e>
 800800a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800800c:	445a      	add	r2, fp
 800800e:	9209      	str	r2, [sp, #36]	; 0x24
 8008010:	f89a 3000 	ldrb.w	r3, [sl]
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 80a2 	beq.w	800815e <_vfiprintf_r+0x20e>
 800801a:	2300      	movs	r3, #0
 800801c:	f04f 32ff 	mov.w	r2, #4294967295
 8008020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008024:	f10a 0a01 	add.w	sl, sl, #1
 8008028:	9304      	str	r3, [sp, #16]
 800802a:	9307      	str	r3, [sp, #28]
 800802c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008030:	931a      	str	r3, [sp, #104]	; 0x68
 8008032:	4654      	mov	r4, sl
 8008034:	2205      	movs	r2, #5
 8008036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800803a:	4858      	ldr	r0, [pc, #352]	; (800819c <_vfiprintf_r+0x24c>)
 800803c:	f7fe ffca 	bl	8006fd4 <memchr>
 8008040:	9a04      	ldr	r2, [sp, #16]
 8008042:	b9d8      	cbnz	r0, 800807c <_vfiprintf_r+0x12c>
 8008044:	06d1      	lsls	r1, r2, #27
 8008046:	bf44      	itt	mi
 8008048:	2320      	movmi	r3, #32
 800804a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800804e:	0713      	lsls	r3, r2, #28
 8008050:	bf44      	itt	mi
 8008052:	232b      	movmi	r3, #43	; 0x2b
 8008054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008058:	f89a 3000 	ldrb.w	r3, [sl]
 800805c:	2b2a      	cmp	r3, #42	; 0x2a
 800805e:	d015      	beq.n	800808c <_vfiprintf_r+0x13c>
 8008060:	4654      	mov	r4, sl
 8008062:	2000      	movs	r0, #0
 8008064:	f04f 0c0a 	mov.w	ip, #10
 8008068:	9a07      	ldr	r2, [sp, #28]
 800806a:	4621      	mov	r1, r4
 800806c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008070:	3b30      	subs	r3, #48	; 0x30
 8008072:	2b09      	cmp	r3, #9
 8008074:	d94e      	bls.n	8008114 <_vfiprintf_r+0x1c4>
 8008076:	b1b0      	cbz	r0, 80080a6 <_vfiprintf_r+0x156>
 8008078:	9207      	str	r2, [sp, #28]
 800807a:	e014      	b.n	80080a6 <_vfiprintf_r+0x156>
 800807c:	eba0 0308 	sub.w	r3, r0, r8
 8008080:	fa09 f303 	lsl.w	r3, r9, r3
 8008084:	4313      	orrs	r3, r2
 8008086:	46a2      	mov	sl, r4
 8008088:	9304      	str	r3, [sp, #16]
 800808a:	e7d2      	b.n	8008032 <_vfiprintf_r+0xe2>
 800808c:	9b03      	ldr	r3, [sp, #12]
 800808e:	1d19      	adds	r1, r3, #4
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	9103      	str	r1, [sp, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	bfbb      	ittet	lt
 8008098:	425b      	neglt	r3, r3
 800809a:	f042 0202 	orrlt.w	r2, r2, #2
 800809e:	9307      	strge	r3, [sp, #28]
 80080a0:	9307      	strlt	r3, [sp, #28]
 80080a2:	bfb8      	it	lt
 80080a4:	9204      	strlt	r2, [sp, #16]
 80080a6:	7823      	ldrb	r3, [r4, #0]
 80080a8:	2b2e      	cmp	r3, #46	; 0x2e
 80080aa:	d10c      	bne.n	80080c6 <_vfiprintf_r+0x176>
 80080ac:	7863      	ldrb	r3, [r4, #1]
 80080ae:	2b2a      	cmp	r3, #42	; 0x2a
 80080b0:	d135      	bne.n	800811e <_vfiprintf_r+0x1ce>
 80080b2:	9b03      	ldr	r3, [sp, #12]
 80080b4:	3402      	adds	r4, #2
 80080b6:	1d1a      	adds	r2, r3, #4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	9203      	str	r2, [sp, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	bfb8      	it	lt
 80080c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80080c4:	9305      	str	r3, [sp, #20]
 80080c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081ac <_vfiprintf_r+0x25c>
 80080ca:	2203      	movs	r2, #3
 80080cc:	4650      	mov	r0, sl
 80080ce:	7821      	ldrb	r1, [r4, #0]
 80080d0:	f7fe ff80 	bl	8006fd4 <memchr>
 80080d4:	b140      	cbz	r0, 80080e8 <_vfiprintf_r+0x198>
 80080d6:	2340      	movs	r3, #64	; 0x40
 80080d8:	eba0 000a 	sub.w	r0, r0, sl
 80080dc:	fa03 f000 	lsl.w	r0, r3, r0
 80080e0:	9b04      	ldr	r3, [sp, #16]
 80080e2:	3401      	adds	r4, #1
 80080e4:	4303      	orrs	r3, r0
 80080e6:	9304      	str	r3, [sp, #16]
 80080e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ec:	2206      	movs	r2, #6
 80080ee:	482c      	ldr	r0, [pc, #176]	; (80081a0 <_vfiprintf_r+0x250>)
 80080f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080f4:	f7fe ff6e 	bl	8006fd4 <memchr>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d03f      	beq.n	800817c <_vfiprintf_r+0x22c>
 80080fc:	4b29      	ldr	r3, [pc, #164]	; (80081a4 <_vfiprintf_r+0x254>)
 80080fe:	bb1b      	cbnz	r3, 8008148 <_vfiprintf_r+0x1f8>
 8008100:	9b03      	ldr	r3, [sp, #12]
 8008102:	3307      	adds	r3, #7
 8008104:	f023 0307 	bic.w	r3, r3, #7
 8008108:	3308      	adds	r3, #8
 800810a:	9303      	str	r3, [sp, #12]
 800810c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810e:	443b      	add	r3, r7
 8008110:	9309      	str	r3, [sp, #36]	; 0x24
 8008112:	e767      	b.n	8007fe4 <_vfiprintf_r+0x94>
 8008114:	460c      	mov	r4, r1
 8008116:	2001      	movs	r0, #1
 8008118:	fb0c 3202 	mla	r2, ip, r2, r3
 800811c:	e7a5      	b.n	800806a <_vfiprintf_r+0x11a>
 800811e:	2300      	movs	r3, #0
 8008120:	f04f 0c0a 	mov.w	ip, #10
 8008124:	4619      	mov	r1, r3
 8008126:	3401      	adds	r4, #1
 8008128:	9305      	str	r3, [sp, #20]
 800812a:	4620      	mov	r0, r4
 800812c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008130:	3a30      	subs	r2, #48	; 0x30
 8008132:	2a09      	cmp	r2, #9
 8008134:	d903      	bls.n	800813e <_vfiprintf_r+0x1ee>
 8008136:	2b00      	cmp	r3, #0
 8008138:	d0c5      	beq.n	80080c6 <_vfiprintf_r+0x176>
 800813a:	9105      	str	r1, [sp, #20]
 800813c:	e7c3      	b.n	80080c6 <_vfiprintf_r+0x176>
 800813e:	4604      	mov	r4, r0
 8008140:	2301      	movs	r3, #1
 8008142:	fb0c 2101 	mla	r1, ip, r1, r2
 8008146:	e7f0      	b.n	800812a <_vfiprintf_r+0x1da>
 8008148:	ab03      	add	r3, sp, #12
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	462a      	mov	r2, r5
 800814e:	4630      	mov	r0, r6
 8008150:	4b15      	ldr	r3, [pc, #84]	; (80081a8 <_vfiprintf_r+0x258>)
 8008152:	a904      	add	r1, sp, #16
 8008154:	f7fc f866 	bl	8004224 <_printf_float>
 8008158:	4607      	mov	r7, r0
 800815a:	1c78      	adds	r0, r7, #1
 800815c:	d1d6      	bne.n	800810c <_vfiprintf_r+0x1bc>
 800815e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008160:	07d9      	lsls	r1, r3, #31
 8008162:	d405      	bmi.n	8008170 <_vfiprintf_r+0x220>
 8008164:	89ab      	ldrh	r3, [r5, #12]
 8008166:	059a      	lsls	r2, r3, #22
 8008168:	d402      	bmi.n	8008170 <_vfiprintf_r+0x220>
 800816a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800816c:	f000 faa1 	bl	80086b2 <__retarget_lock_release_recursive>
 8008170:	89ab      	ldrh	r3, [r5, #12]
 8008172:	065b      	lsls	r3, r3, #25
 8008174:	f53f af12 	bmi.w	8007f9c <_vfiprintf_r+0x4c>
 8008178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800817a:	e711      	b.n	8007fa0 <_vfiprintf_r+0x50>
 800817c:	ab03      	add	r3, sp, #12
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	462a      	mov	r2, r5
 8008182:	4630      	mov	r0, r6
 8008184:	4b08      	ldr	r3, [pc, #32]	; (80081a8 <_vfiprintf_r+0x258>)
 8008186:	a904      	add	r1, sp, #16
 8008188:	f7fc fae8 	bl	800475c <_printf_i>
 800818c:	e7e4      	b.n	8008158 <_vfiprintf_r+0x208>
 800818e:	bf00      	nop
 8008190:	0800c78c 	.word	0x0800c78c
 8008194:	0800c7ac 	.word	0x0800c7ac
 8008198:	0800c76c 	.word	0x0800c76c
 800819c:	0800c71c 	.word	0x0800c71c
 80081a0:	0800c726 	.word	0x0800c726
 80081a4:	08004225 	.word	0x08004225
 80081a8:	08007f2b 	.word	0x08007f2b
 80081ac:	0800c722 	.word	0x0800c722

080081b0 <__swbuf_r>:
 80081b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b2:	460e      	mov	r6, r1
 80081b4:	4614      	mov	r4, r2
 80081b6:	4605      	mov	r5, r0
 80081b8:	b118      	cbz	r0, 80081c2 <__swbuf_r+0x12>
 80081ba:	6983      	ldr	r3, [r0, #24]
 80081bc:	b90b      	cbnz	r3, 80081c2 <__swbuf_r+0x12>
 80081be:	f000 f9d9 	bl	8008574 <__sinit>
 80081c2:	4b21      	ldr	r3, [pc, #132]	; (8008248 <__swbuf_r+0x98>)
 80081c4:	429c      	cmp	r4, r3
 80081c6:	d12b      	bne.n	8008220 <__swbuf_r+0x70>
 80081c8:	686c      	ldr	r4, [r5, #4]
 80081ca:	69a3      	ldr	r3, [r4, #24]
 80081cc:	60a3      	str	r3, [r4, #8]
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	071a      	lsls	r2, r3, #28
 80081d2:	d52f      	bpl.n	8008234 <__swbuf_r+0x84>
 80081d4:	6923      	ldr	r3, [r4, #16]
 80081d6:	b36b      	cbz	r3, 8008234 <__swbuf_r+0x84>
 80081d8:	6923      	ldr	r3, [r4, #16]
 80081da:	6820      	ldr	r0, [r4, #0]
 80081dc:	b2f6      	uxtb	r6, r6
 80081de:	1ac0      	subs	r0, r0, r3
 80081e0:	6963      	ldr	r3, [r4, #20]
 80081e2:	4637      	mov	r7, r6
 80081e4:	4283      	cmp	r3, r0
 80081e6:	dc04      	bgt.n	80081f2 <__swbuf_r+0x42>
 80081e8:	4621      	mov	r1, r4
 80081ea:	4628      	mov	r0, r5
 80081ec:	f000 f92e 	bl	800844c <_fflush_r>
 80081f0:	bb30      	cbnz	r0, 8008240 <__swbuf_r+0x90>
 80081f2:	68a3      	ldr	r3, [r4, #8]
 80081f4:	3001      	adds	r0, #1
 80081f6:	3b01      	subs	r3, #1
 80081f8:	60a3      	str	r3, [r4, #8]
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	6022      	str	r2, [r4, #0]
 8008200:	701e      	strb	r6, [r3, #0]
 8008202:	6963      	ldr	r3, [r4, #20]
 8008204:	4283      	cmp	r3, r0
 8008206:	d004      	beq.n	8008212 <__swbuf_r+0x62>
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	07db      	lsls	r3, r3, #31
 800820c:	d506      	bpl.n	800821c <__swbuf_r+0x6c>
 800820e:	2e0a      	cmp	r6, #10
 8008210:	d104      	bne.n	800821c <__swbuf_r+0x6c>
 8008212:	4621      	mov	r1, r4
 8008214:	4628      	mov	r0, r5
 8008216:	f000 f919 	bl	800844c <_fflush_r>
 800821a:	b988      	cbnz	r0, 8008240 <__swbuf_r+0x90>
 800821c:	4638      	mov	r0, r7
 800821e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008220:	4b0a      	ldr	r3, [pc, #40]	; (800824c <__swbuf_r+0x9c>)
 8008222:	429c      	cmp	r4, r3
 8008224:	d101      	bne.n	800822a <__swbuf_r+0x7a>
 8008226:	68ac      	ldr	r4, [r5, #8]
 8008228:	e7cf      	b.n	80081ca <__swbuf_r+0x1a>
 800822a:	4b09      	ldr	r3, [pc, #36]	; (8008250 <__swbuf_r+0xa0>)
 800822c:	429c      	cmp	r4, r3
 800822e:	bf08      	it	eq
 8008230:	68ec      	ldreq	r4, [r5, #12]
 8008232:	e7ca      	b.n	80081ca <__swbuf_r+0x1a>
 8008234:	4621      	mov	r1, r4
 8008236:	4628      	mov	r0, r5
 8008238:	f000 f80c 	bl	8008254 <__swsetup_r>
 800823c:	2800      	cmp	r0, #0
 800823e:	d0cb      	beq.n	80081d8 <__swbuf_r+0x28>
 8008240:	f04f 37ff 	mov.w	r7, #4294967295
 8008244:	e7ea      	b.n	800821c <__swbuf_r+0x6c>
 8008246:	bf00      	nop
 8008248:	0800c78c 	.word	0x0800c78c
 800824c:	0800c7ac 	.word	0x0800c7ac
 8008250:	0800c76c 	.word	0x0800c76c

08008254 <__swsetup_r>:
 8008254:	4b32      	ldr	r3, [pc, #200]	; (8008320 <__swsetup_r+0xcc>)
 8008256:	b570      	push	{r4, r5, r6, lr}
 8008258:	681d      	ldr	r5, [r3, #0]
 800825a:	4606      	mov	r6, r0
 800825c:	460c      	mov	r4, r1
 800825e:	b125      	cbz	r5, 800826a <__swsetup_r+0x16>
 8008260:	69ab      	ldr	r3, [r5, #24]
 8008262:	b913      	cbnz	r3, 800826a <__swsetup_r+0x16>
 8008264:	4628      	mov	r0, r5
 8008266:	f000 f985 	bl	8008574 <__sinit>
 800826a:	4b2e      	ldr	r3, [pc, #184]	; (8008324 <__swsetup_r+0xd0>)
 800826c:	429c      	cmp	r4, r3
 800826e:	d10f      	bne.n	8008290 <__swsetup_r+0x3c>
 8008270:	686c      	ldr	r4, [r5, #4]
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008278:	0719      	lsls	r1, r3, #28
 800827a:	d42c      	bmi.n	80082d6 <__swsetup_r+0x82>
 800827c:	06dd      	lsls	r5, r3, #27
 800827e:	d411      	bmi.n	80082a4 <__swsetup_r+0x50>
 8008280:	2309      	movs	r3, #9
 8008282:	6033      	str	r3, [r6, #0]
 8008284:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008288:	f04f 30ff 	mov.w	r0, #4294967295
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	e03e      	b.n	800830e <__swsetup_r+0xba>
 8008290:	4b25      	ldr	r3, [pc, #148]	; (8008328 <__swsetup_r+0xd4>)
 8008292:	429c      	cmp	r4, r3
 8008294:	d101      	bne.n	800829a <__swsetup_r+0x46>
 8008296:	68ac      	ldr	r4, [r5, #8]
 8008298:	e7eb      	b.n	8008272 <__swsetup_r+0x1e>
 800829a:	4b24      	ldr	r3, [pc, #144]	; (800832c <__swsetup_r+0xd8>)
 800829c:	429c      	cmp	r4, r3
 800829e:	bf08      	it	eq
 80082a0:	68ec      	ldreq	r4, [r5, #12]
 80082a2:	e7e6      	b.n	8008272 <__swsetup_r+0x1e>
 80082a4:	0758      	lsls	r0, r3, #29
 80082a6:	d512      	bpl.n	80082ce <__swsetup_r+0x7a>
 80082a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082aa:	b141      	cbz	r1, 80082be <__swsetup_r+0x6a>
 80082ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082b0:	4299      	cmp	r1, r3
 80082b2:	d002      	beq.n	80082ba <__swsetup_r+0x66>
 80082b4:	4630      	mov	r0, r6
 80082b6:	f7ff fb6f 	bl	8007998 <_free_r>
 80082ba:	2300      	movs	r3, #0
 80082bc:	6363      	str	r3, [r4, #52]	; 0x34
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082c4:	81a3      	strh	r3, [r4, #12]
 80082c6:	2300      	movs	r3, #0
 80082c8:	6063      	str	r3, [r4, #4]
 80082ca:	6923      	ldr	r3, [r4, #16]
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	89a3      	ldrh	r3, [r4, #12]
 80082d0:	f043 0308 	orr.w	r3, r3, #8
 80082d4:	81a3      	strh	r3, [r4, #12]
 80082d6:	6923      	ldr	r3, [r4, #16]
 80082d8:	b94b      	cbnz	r3, 80082ee <__swsetup_r+0x9a>
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082e4:	d003      	beq.n	80082ee <__swsetup_r+0x9a>
 80082e6:	4621      	mov	r1, r4
 80082e8:	4630      	mov	r0, r6
 80082ea:	f000 fa07 	bl	80086fc <__smakebuf_r>
 80082ee:	89a0      	ldrh	r0, [r4, #12]
 80082f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082f4:	f010 0301 	ands.w	r3, r0, #1
 80082f8:	d00a      	beq.n	8008310 <__swsetup_r+0xbc>
 80082fa:	2300      	movs	r3, #0
 80082fc:	60a3      	str	r3, [r4, #8]
 80082fe:	6963      	ldr	r3, [r4, #20]
 8008300:	425b      	negs	r3, r3
 8008302:	61a3      	str	r3, [r4, #24]
 8008304:	6923      	ldr	r3, [r4, #16]
 8008306:	b943      	cbnz	r3, 800831a <__swsetup_r+0xc6>
 8008308:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800830c:	d1ba      	bne.n	8008284 <__swsetup_r+0x30>
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	0781      	lsls	r1, r0, #30
 8008312:	bf58      	it	pl
 8008314:	6963      	ldrpl	r3, [r4, #20]
 8008316:	60a3      	str	r3, [r4, #8]
 8008318:	e7f4      	b.n	8008304 <__swsetup_r+0xb0>
 800831a:	2000      	movs	r0, #0
 800831c:	e7f7      	b.n	800830e <__swsetup_r+0xba>
 800831e:	bf00      	nop
 8008320:	20000024 	.word	0x20000024
 8008324:	0800c78c 	.word	0x0800c78c
 8008328:	0800c7ac 	.word	0x0800c7ac
 800832c:	0800c76c 	.word	0x0800c76c

08008330 <abort>:
 8008330:	2006      	movs	r0, #6
 8008332:	b508      	push	{r3, lr}
 8008334:	f000 fa52 	bl	80087dc <raise>
 8008338:	2001      	movs	r0, #1
 800833a:	f7fa f8cf 	bl	80024dc <_exit>
	...

08008340 <__sflush_r>:
 8008340:	898a      	ldrh	r2, [r1, #12]
 8008342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008346:	4605      	mov	r5, r0
 8008348:	0710      	lsls	r0, r2, #28
 800834a:	460c      	mov	r4, r1
 800834c:	d458      	bmi.n	8008400 <__sflush_r+0xc0>
 800834e:	684b      	ldr	r3, [r1, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	dc05      	bgt.n	8008360 <__sflush_r+0x20>
 8008354:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008356:	2b00      	cmp	r3, #0
 8008358:	dc02      	bgt.n	8008360 <__sflush_r+0x20>
 800835a:	2000      	movs	r0, #0
 800835c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008360:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008362:	2e00      	cmp	r6, #0
 8008364:	d0f9      	beq.n	800835a <__sflush_r+0x1a>
 8008366:	2300      	movs	r3, #0
 8008368:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800836c:	682f      	ldr	r7, [r5, #0]
 800836e:	602b      	str	r3, [r5, #0]
 8008370:	d032      	beq.n	80083d8 <__sflush_r+0x98>
 8008372:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	075a      	lsls	r2, r3, #29
 8008378:	d505      	bpl.n	8008386 <__sflush_r+0x46>
 800837a:	6863      	ldr	r3, [r4, #4]
 800837c:	1ac0      	subs	r0, r0, r3
 800837e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008380:	b10b      	cbz	r3, 8008386 <__sflush_r+0x46>
 8008382:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008384:	1ac0      	subs	r0, r0, r3
 8008386:	2300      	movs	r3, #0
 8008388:	4602      	mov	r2, r0
 800838a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800838c:	4628      	mov	r0, r5
 800838e:	6a21      	ldr	r1, [r4, #32]
 8008390:	47b0      	blx	r6
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	d106      	bne.n	80083a6 <__sflush_r+0x66>
 8008398:	6829      	ldr	r1, [r5, #0]
 800839a:	291d      	cmp	r1, #29
 800839c:	d82c      	bhi.n	80083f8 <__sflush_r+0xb8>
 800839e:	4a2a      	ldr	r2, [pc, #168]	; (8008448 <__sflush_r+0x108>)
 80083a0:	40ca      	lsrs	r2, r1
 80083a2:	07d6      	lsls	r6, r2, #31
 80083a4:	d528      	bpl.n	80083f8 <__sflush_r+0xb8>
 80083a6:	2200      	movs	r2, #0
 80083a8:	6062      	str	r2, [r4, #4]
 80083aa:	6922      	ldr	r2, [r4, #16]
 80083ac:	04d9      	lsls	r1, r3, #19
 80083ae:	6022      	str	r2, [r4, #0]
 80083b0:	d504      	bpl.n	80083bc <__sflush_r+0x7c>
 80083b2:	1c42      	adds	r2, r0, #1
 80083b4:	d101      	bne.n	80083ba <__sflush_r+0x7a>
 80083b6:	682b      	ldr	r3, [r5, #0]
 80083b8:	b903      	cbnz	r3, 80083bc <__sflush_r+0x7c>
 80083ba:	6560      	str	r0, [r4, #84]	; 0x54
 80083bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083be:	602f      	str	r7, [r5, #0]
 80083c0:	2900      	cmp	r1, #0
 80083c2:	d0ca      	beq.n	800835a <__sflush_r+0x1a>
 80083c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083c8:	4299      	cmp	r1, r3
 80083ca:	d002      	beq.n	80083d2 <__sflush_r+0x92>
 80083cc:	4628      	mov	r0, r5
 80083ce:	f7ff fae3 	bl	8007998 <_free_r>
 80083d2:	2000      	movs	r0, #0
 80083d4:	6360      	str	r0, [r4, #52]	; 0x34
 80083d6:	e7c1      	b.n	800835c <__sflush_r+0x1c>
 80083d8:	6a21      	ldr	r1, [r4, #32]
 80083da:	2301      	movs	r3, #1
 80083dc:	4628      	mov	r0, r5
 80083de:	47b0      	blx	r6
 80083e0:	1c41      	adds	r1, r0, #1
 80083e2:	d1c7      	bne.n	8008374 <__sflush_r+0x34>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d0c4      	beq.n	8008374 <__sflush_r+0x34>
 80083ea:	2b1d      	cmp	r3, #29
 80083ec:	d001      	beq.n	80083f2 <__sflush_r+0xb2>
 80083ee:	2b16      	cmp	r3, #22
 80083f0:	d101      	bne.n	80083f6 <__sflush_r+0xb6>
 80083f2:	602f      	str	r7, [r5, #0]
 80083f4:	e7b1      	b.n	800835a <__sflush_r+0x1a>
 80083f6:	89a3      	ldrh	r3, [r4, #12]
 80083f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083fc:	81a3      	strh	r3, [r4, #12]
 80083fe:	e7ad      	b.n	800835c <__sflush_r+0x1c>
 8008400:	690f      	ldr	r7, [r1, #16]
 8008402:	2f00      	cmp	r7, #0
 8008404:	d0a9      	beq.n	800835a <__sflush_r+0x1a>
 8008406:	0793      	lsls	r3, r2, #30
 8008408:	bf18      	it	ne
 800840a:	2300      	movne	r3, #0
 800840c:	680e      	ldr	r6, [r1, #0]
 800840e:	bf08      	it	eq
 8008410:	694b      	ldreq	r3, [r1, #20]
 8008412:	eba6 0807 	sub.w	r8, r6, r7
 8008416:	600f      	str	r7, [r1, #0]
 8008418:	608b      	str	r3, [r1, #8]
 800841a:	f1b8 0f00 	cmp.w	r8, #0
 800841e:	dd9c      	ble.n	800835a <__sflush_r+0x1a>
 8008420:	4643      	mov	r3, r8
 8008422:	463a      	mov	r2, r7
 8008424:	4628      	mov	r0, r5
 8008426:	6a21      	ldr	r1, [r4, #32]
 8008428:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800842a:	47b0      	blx	r6
 800842c:	2800      	cmp	r0, #0
 800842e:	dc06      	bgt.n	800843e <__sflush_r+0xfe>
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	f04f 30ff 	mov.w	r0, #4294967295
 8008436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800843a:	81a3      	strh	r3, [r4, #12]
 800843c:	e78e      	b.n	800835c <__sflush_r+0x1c>
 800843e:	4407      	add	r7, r0
 8008440:	eba8 0800 	sub.w	r8, r8, r0
 8008444:	e7e9      	b.n	800841a <__sflush_r+0xda>
 8008446:	bf00      	nop
 8008448:	20400001 	.word	0x20400001

0800844c <_fflush_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	690b      	ldr	r3, [r1, #16]
 8008450:	4605      	mov	r5, r0
 8008452:	460c      	mov	r4, r1
 8008454:	b913      	cbnz	r3, 800845c <_fflush_r+0x10>
 8008456:	2500      	movs	r5, #0
 8008458:	4628      	mov	r0, r5
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	b118      	cbz	r0, 8008466 <_fflush_r+0x1a>
 800845e:	6983      	ldr	r3, [r0, #24]
 8008460:	b90b      	cbnz	r3, 8008466 <_fflush_r+0x1a>
 8008462:	f000 f887 	bl	8008574 <__sinit>
 8008466:	4b14      	ldr	r3, [pc, #80]	; (80084b8 <_fflush_r+0x6c>)
 8008468:	429c      	cmp	r4, r3
 800846a:	d11b      	bne.n	80084a4 <_fflush_r+0x58>
 800846c:	686c      	ldr	r4, [r5, #4]
 800846e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d0ef      	beq.n	8008456 <_fflush_r+0xa>
 8008476:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008478:	07d0      	lsls	r0, r2, #31
 800847a:	d404      	bmi.n	8008486 <_fflush_r+0x3a>
 800847c:	0599      	lsls	r1, r3, #22
 800847e:	d402      	bmi.n	8008486 <_fflush_r+0x3a>
 8008480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008482:	f000 f915 	bl	80086b0 <__retarget_lock_acquire_recursive>
 8008486:	4628      	mov	r0, r5
 8008488:	4621      	mov	r1, r4
 800848a:	f7ff ff59 	bl	8008340 <__sflush_r>
 800848e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008490:	4605      	mov	r5, r0
 8008492:	07da      	lsls	r2, r3, #31
 8008494:	d4e0      	bmi.n	8008458 <_fflush_r+0xc>
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	059b      	lsls	r3, r3, #22
 800849a:	d4dd      	bmi.n	8008458 <_fflush_r+0xc>
 800849c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800849e:	f000 f908 	bl	80086b2 <__retarget_lock_release_recursive>
 80084a2:	e7d9      	b.n	8008458 <_fflush_r+0xc>
 80084a4:	4b05      	ldr	r3, [pc, #20]	; (80084bc <_fflush_r+0x70>)
 80084a6:	429c      	cmp	r4, r3
 80084a8:	d101      	bne.n	80084ae <_fflush_r+0x62>
 80084aa:	68ac      	ldr	r4, [r5, #8]
 80084ac:	e7df      	b.n	800846e <_fflush_r+0x22>
 80084ae:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <_fflush_r+0x74>)
 80084b0:	429c      	cmp	r4, r3
 80084b2:	bf08      	it	eq
 80084b4:	68ec      	ldreq	r4, [r5, #12]
 80084b6:	e7da      	b.n	800846e <_fflush_r+0x22>
 80084b8:	0800c78c 	.word	0x0800c78c
 80084bc:	0800c7ac 	.word	0x0800c7ac
 80084c0:	0800c76c 	.word	0x0800c76c

080084c4 <std>:
 80084c4:	2300      	movs	r3, #0
 80084c6:	b510      	push	{r4, lr}
 80084c8:	4604      	mov	r4, r0
 80084ca:	e9c0 3300 	strd	r3, r3, [r0]
 80084ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084d2:	6083      	str	r3, [r0, #8]
 80084d4:	8181      	strh	r1, [r0, #12]
 80084d6:	6643      	str	r3, [r0, #100]	; 0x64
 80084d8:	81c2      	strh	r2, [r0, #14]
 80084da:	6183      	str	r3, [r0, #24]
 80084dc:	4619      	mov	r1, r3
 80084de:	2208      	movs	r2, #8
 80084e0:	305c      	adds	r0, #92	; 0x5c
 80084e2:	f7fb fdf9 	bl	80040d8 <memset>
 80084e6:	4b05      	ldr	r3, [pc, #20]	; (80084fc <std+0x38>)
 80084e8:	6224      	str	r4, [r4, #32]
 80084ea:	6263      	str	r3, [r4, #36]	; 0x24
 80084ec:	4b04      	ldr	r3, [pc, #16]	; (8008500 <std+0x3c>)
 80084ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80084f0:	4b04      	ldr	r3, [pc, #16]	; (8008504 <std+0x40>)
 80084f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084f4:	4b04      	ldr	r3, [pc, #16]	; (8008508 <std+0x44>)
 80084f6:	6323      	str	r3, [r4, #48]	; 0x30
 80084f8:	bd10      	pop	{r4, pc}
 80084fa:	bf00      	nop
 80084fc:	08008815 	.word	0x08008815
 8008500:	08008837 	.word	0x08008837
 8008504:	0800886f 	.word	0x0800886f
 8008508:	08008893 	.word	0x08008893

0800850c <_cleanup_r>:
 800850c:	4901      	ldr	r1, [pc, #4]	; (8008514 <_cleanup_r+0x8>)
 800850e:	f000 b8af 	b.w	8008670 <_fwalk_reent>
 8008512:	bf00      	nop
 8008514:	0800844d 	.word	0x0800844d

08008518 <__sfmoreglue>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	2568      	movs	r5, #104	; 0x68
 800851c:	1e4a      	subs	r2, r1, #1
 800851e:	4355      	muls	r5, r2
 8008520:	460e      	mov	r6, r1
 8008522:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008526:	f7ff fa83 	bl	8007a30 <_malloc_r>
 800852a:	4604      	mov	r4, r0
 800852c:	b140      	cbz	r0, 8008540 <__sfmoreglue+0x28>
 800852e:	2100      	movs	r1, #0
 8008530:	e9c0 1600 	strd	r1, r6, [r0]
 8008534:	300c      	adds	r0, #12
 8008536:	60a0      	str	r0, [r4, #8]
 8008538:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800853c:	f7fb fdcc 	bl	80040d8 <memset>
 8008540:	4620      	mov	r0, r4
 8008542:	bd70      	pop	{r4, r5, r6, pc}

08008544 <__sfp_lock_acquire>:
 8008544:	4801      	ldr	r0, [pc, #4]	; (800854c <__sfp_lock_acquire+0x8>)
 8008546:	f000 b8b3 	b.w	80086b0 <__retarget_lock_acquire_recursive>
 800854a:	bf00      	nop
 800854c:	200007b8 	.word	0x200007b8

08008550 <__sfp_lock_release>:
 8008550:	4801      	ldr	r0, [pc, #4]	; (8008558 <__sfp_lock_release+0x8>)
 8008552:	f000 b8ae 	b.w	80086b2 <__retarget_lock_release_recursive>
 8008556:	bf00      	nop
 8008558:	200007b8 	.word	0x200007b8

0800855c <__sinit_lock_acquire>:
 800855c:	4801      	ldr	r0, [pc, #4]	; (8008564 <__sinit_lock_acquire+0x8>)
 800855e:	f000 b8a7 	b.w	80086b0 <__retarget_lock_acquire_recursive>
 8008562:	bf00      	nop
 8008564:	200007b3 	.word	0x200007b3

08008568 <__sinit_lock_release>:
 8008568:	4801      	ldr	r0, [pc, #4]	; (8008570 <__sinit_lock_release+0x8>)
 800856a:	f000 b8a2 	b.w	80086b2 <__retarget_lock_release_recursive>
 800856e:	bf00      	nop
 8008570:	200007b3 	.word	0x200007b3

08008574 <__sinit>:
 8008574:	b510      	push	{r4, lr}
 8008576:	4604      	mov	r4, r0
 8008578:	f7ff fff0 	bl	800855c <__sinit_lock_acquire>
 800857c:	69a3      	ldr	r3, [r4, #24]
 800857e:	b11b      	cbz	r3, 8008588 <__sinit+0x14>
 8008580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008584:	f7ff bff0 	b.w	8008568 <__sinit_lock_release>
 8008588:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800858c:	6523      	str	r3, [r4, #80]	; 0x50
 800858e:	4b13      	ldr	r3, [pc, #76]	; (80085dc <__sinit+0x68>)
 8008590:	4a13      	ldr	r2, [pc, #76]	; (80085e0 <__sinit+0x6c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	62a2      	str	r2, [r4, #40]	; 0x28
 8008596:	42a3      	cmp	r3, r4
 8008598:	bf08      	it	eq
 800859a:	2301      	moveq	r3, #1
 800859c:	4620      	mov	r0, r4
 800859e:	bf08      	it	eq
 80085a0:	61a3      	streq	r3, [r4, #24]
 80085a2:	f000 f81f 	bl	80085e4 <__sfp>
 80085a6:	6060      	str	r0, [r4, #4]
 80085a8:	4620      	mov	r0, r4
 80085aa:	f000 f81b 	bl	80085e4 <__sfp>
 80085ae:	60a0      	str	r0, [r4, #8]
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 f817 	bl	80085e4 <__sfp>
 80085b6:	2200      	movs	r2, #0
 80085b8:	2104      	movs	r1, #4
 80085ba:	60e0      	str	r0, [r4, #12]
 80085bc:	6860      	ldr	r0, [r4, #4]
 80085be:	f7ff ff81 	bl	80084c4 <std>
 80085c2:	2201      	movs	r2, #1
 80085c4:	2109      	movs	r1, #9
 80085c6:	68a0      	ldr	r0, [r4, #8]
 80085c8:	f7ff ff7c 	bl	80084c4 <std>
 80085cc:	2202      	movs	r2, #2
 80085ce:	2112      	movs	r1, #18
 80085d0:	68e0      	ldr	r0, [r4, #12]
 80085d2:	f7ff ff77 	bl	80084c4 <std>
 80085d6:	2301      	movs	r3, #1
 80085d8:	61a3      	str	r3, [r4, #24]
 80085da:	e7d1      	b.n	8008580 <__sinit+0xc>
 80085dc:	0800c314 	.word	0x0800c314
 80085e0:	0800850d 	.word	0x0800850d

080085e4 <__sfp>:
 80085e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e6:	4607      	mov	r7, r0
 80085e8:	f7ff ffac 	bl	8008544 <__sfp_lock_acquire>
 80085ec:	4b1e      	ldr	r3, [pc, #120]	; (8008668 <__sfp+0x84>)
 80085ee:	681e      	ldr	r6, [r3, #0]
 80085f0:	69b3      	ldr	r3, [r6, #24]
 80085f2:	b913      	cbnz	r3, 80085fa <__sfp+0x16>
 80085f4:	4630      	mov	r0, r6
 80085f6:	f7ff ffbd 	bl	8008574 <__sinit>
 80085fa:	3648      	adds	r6, #72	; 0x48
 80085fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008600:	3b01      	subs	r3, #1
 8008602:	d503      	bpl.n	800860c <__sfp+0x28>
 8008604:	6833      	ldr	r3, [r6, #0]
 8008606:	b30b      	cbz	r3, 800864c <__sfp+0x68>
 8008608:	6836      	ldr	r6, [r6, #0]
 800860a:	e7f7      	b.n	80085fc <__sfp+0x18>
 800860c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008610:	b9d5      	cbnz	r5, 8008648 <__sfp+0x64>
 8008612:	4b16      	ldr	r3, [pc, #88]	; (800866c <__sfp+0x88>)
 8008614:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008618:	60e3      	str	r3, [r4, #12]
 800861a:	6665      	str	r5, [r4, #100]	; 0x64
 800861c:	f000 f847 	bl	80086ae <__retarget_lock_init_recursive>
 8008620:	f7ff ff96 	bl	8008550 <__sfp_lock_release>
 8008624:	2208      	movs	r2, #8
 8008626:	4629      	mov	r1, r5
 8008628:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800862c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008630:	6025      	str	r5, [r4, #0]
 8008632:	61a5      	str	r5, [r4, #24]
 8008634:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008638:	f7fb fd4e 	bl	80040d8 <memset>
 800863c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008640:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008644:	4620      	mov	r0, r4
 8008646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008648:	3468      	adds	r4, #104	; 0x68
 800864a:	e7d9      	b.n	8008600 <__sfp+0x1c>
 800864c:	2104      	movs	r1, #4
 800864e:	4638      	mov	r0, r7
 8008650:	f7ff ff62 	bl	8008518 <__sfmoreglue>
 8008654:	4604      	mov	r4, r0
 8008656:	6030      	str	r0, [r6, #0]
 8008658:	2800      	cmp	r0, #0
 800865a:	d1d5      	bne.n	8008608 <__sfp+0x24>
 800865c:	f7ff ff78 	bl	8008550 <__sfp_lock_release>
 8008660:	230c      	movs	r3, #12
 8008662:	603b      	str	r3, [r7, #0]
 8008664:	e7ee      	b.n	8008644 <__sfp+0x60>
 8008666:	bf00      	nop
 8008668:	0800c314 	.word	0x0800c314
 800866c:	ffff0001 	.word	0xffff0001

08008670 <_fwalk_reent>:
 8008670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008674:	4606      	mov	r6, r0
 8008676:	4688      	mov	r8, r1
 8008678:	2700      	movs	r7, #0
 800867a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800867e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008682:	f1b9 0901 	subs.w	r9, r9, #1
 8008686:	d505      	bpl.n	8008694 <_fwalk_reent+0x24>
 8008688:	6824      	ldr	r4, [r4, #0]
 800868a:	2c00      	cmp	r4, #0
 800868c:	d1f7      	bne.n	800867e <_fwalk_reent+0xe>
 800868e:	4638      	mov	r0, r7
 8008690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008694:	89ab      	ldrh	r3, [r5, #12]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d907      	bls.n	80086aa <_fwalk_reent+0x3a>
 800869a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800869e:	3301      	adds	r3, #1
 80086a0:	d003      	beq.n	80086aa <_fwalk_reent+0x3a>
 80086a2:	4629      	mov	r1, r5
 80086a4:	4630      	mov	r0, r6
 80086a6:	47c0      	blx	r8
 80086a8:	4307      	orrs	r7, r0
 80086aa:	3568      	adds	r5, #104	; 0x68
 80086ac:	e7e9      	b.n	8008682 <_fwalk_reent+0x12>

080086ae <__retarget_lock_init_recursive>:
 80086ae:	4770      	bx	lr

080086b0 <__retarget_lock_acquire_recursive>:
 80086b0:	4770      	bx	lr

080086b2 <__retarget_lock_release_recursive>:
 80086b2:	4770      	bx	lr

080086b4 <__swhatbuf_r>:
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	460e      	mov	r6, r1
 80086b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086bc:	4614      	mov	r4, r2
 80086be:	2900      	cmp	r1, #0
 80086c0:	461d      	mov	r5, r3
 80086c2:	b096      	sub	sp, #88	; 0x58
 80086c4:	da07      	bge.n	80086d6 <__swhatbuf_r+0x22>
 80086c6:	2300      	movs	r3, #0
 80086c8:	602b      	str	r3, [r5, #0]
 80086ca:	89b3      	ldrh	r3, [r6, #12]
 80086cc:	061a      	lsls	r2, r3, #24
 80086ce:	d410      	bmi.n	80086f2 <__swhatbuf_r+0x3e>
 80086d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086d4:	e00e      	b.n	80086f4 <__swhatbuf_r+0x40>
 80086d6:	466a      	mov	r2, sp
 80086d8:	f000 f902 	bl	80088e0 <_fstat_r>
 80086dc:	2800      	cmp	r0, #0
 80086de:	dbf2      	blt.n	80086c6 <__swhatbuf_r+0x12>
 80086e0:	9a01      	ldr	r2, [sp, #4]
 80086e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086ea:	425a      	negs	r2, r3
 80086ec:	415a      	adcs	r2, r3
 80086ee:	602a      	str	r2, [r5, #0]
 80086f0:	e7ee      	b.n	80086d0 <__swhatbuf_r+0x1c>
 80086f2:	2340      	movs	r3, #64	; 0x40
 80086f4:	2000      	movs	r0, #0
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	b016      	add	sp, #88	; 0x58
 80086fa:	bd70      	pop	{r4, r5, r6, pc}

080086fc <__smakebuf_r>:
 80086fc:	898b      	ldrh	r3, [r1, #12]
 80086fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008700:	079d      	lsls	r5, r3, #30
 8008702:	4606      	mov	r6, r0
 8008704:	460c      	mov	r4, r1
 8008706:	d507      	bpl.n	8008718 <__smakebuf_r+0x1c>
 8008708:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	6123      	str	r3, [r4, #16]
 8008710:	2301      	movs	r3, #1
 8008712:	6163      	str	r3, [r4, #20]
 8008714:	b002      	add	sp, #8
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	466a      	mov	r2, sp
 800871a:	ab01      	add	r3, sp, #4
 800871c:	f7ff ffca 	bl	80086b4 <__swhatbuf_r>
 8008720:	9900      	ldr	r1, [sp, #0]
 8008722:	4605      	mov	r5, r0
 8008724:	4630      	mov	r0, r6
 8008726:	f7ff f983 	bl	8007a30 <_malloc_r>
 800872a:	b948      	cbnz	r0, 8008740 <__smakebuf_r+0x44>
 800872c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008730:	059a      	lsls	r2, r3, #22
 8008732:	d4ef      	bmi.n	8008714 <__smakebuf_r+0x18>
 8008734:	f023 0303 	bic.w	r3, r3, #3
 8008738:	f043 0302 	orr.w	r3, r3, #2
 800873c:	81a3      	strh	r3, [r4, #12]
 800873e:	e7e3      	b.n	8008708 <__smakebuf_r+0xc>
 8008740:	4b0d      	ldr	r3, [pc, #52]	; (8008778 <__smakebuf_r+0x7c>)
 8008742:	62b3      	str	r3, [r6, #40]	; 0x28
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	6020      	str	r0, [r4, #0]
 8008748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874c:	81a3      	strh	r3, [r4, #12]
 800874e:	9b00      	ldr	r3, [sp, #0]
 8008750:	6120      	str	r0, [r4, #16]
 8008752:	6163      	str	r3, [r4, #20]
 8008754:	9b01      	ldr	r3, [sp, #4]
 8008756:	b15b      	cbz	r3, 8008770 <__smakebuf_r+0x74>
 8008758:	4630      	mov	r0, r6
 800875a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800875e:	f000 f8d1 	bl	8008904 <_isatty_r>
 8008762:	b128      	cbz	r0, 8008770 <__smakebuf_r+0x74>
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f023 0303 	bic.w	r3, r3, #3
 800876a:	f043 0301 	orr.w	r3, r3, #1
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	89a0      	ldrh	r0, [r4, #12]
 8008772:	4305      	orrs	r5, r0
 8008774:	81a5      	strh	r5, [r4, #12]
 8008776:	e7cd      	b.n	8008714 <__smakebuf_r+0x18>
 8008778:	0800850d 	.word	0x0800850d

0800877c <_malloc_usable_size_r>:
 800877c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008780:	1f18      	subs	r0, r3, #4
 8008782:	2b00      	cmp	r3, #0
 8008784:	bfbc      	itt	lt
 8008786:	580b      	ldrlt	r3, [r1, r0]
 8008788:	18c0      	addlt	r0, r0, r3
 800878a:	4770      	bx	lr

0800878c <_raise_r>:
 800878c:	291f      	cmp	r1, #31
 800878e:	b538      	push	{r3, r4, r5, lr}
 8008790:	4604      	mov	r4, r0
 8008792:	460d      	mov	r5, r1
 8008794:	d904      	bls.n	80087a0 <_raise_r+0x14>
 8008796:	2316      	movs	r3, #22
 8008798:	6003      	str	r3, [r0, #0]
 800879a:	f04f 30ff 	mov.w	r0, #4294967295
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087a2:	b112      	cbz	r2, 80087aa <_raise_r+0x1e>
 80087a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087a8:	b94b      	cbnz	r3, 80087be <_raise_r+0x32>
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 f830 	bl	8008810 <_getpid_r>
 80087b0:	462a      	mov	r2, r5
 80087b2:	4601      	mov	r1, r0
 80087b4:	4620      	mov	r0, r4
 80087b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087ba:	f000 b817 	b.w	80087ec <_kill_r>
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d00a      	beq.n	80087d8 <_raise_r+0x4c>
 80087c2:	1c59      	adds	r1, r3, #1
 80087c4:	d103      	bne.n	80087ce <_raise_r+0x42>
 80087c6:	2316      	movs	r3, #22
 80087c8:	6003      	str	r3, [r0, #0]
 80087ca:	2001      	movs	r0, #1
 80087cc:	e7e7      	b.n	800879e <_raise_r+0x12>
 80087ce:	2400      	movs	r4, #0
 80087d0:	4628      	mov	r0, r5
 80087d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087d6:	4798      	blx	r3
 80087d8:	2000      	movs	r0, #0
 80087da:	e7e0      	b.n	800879e <_raise_r+0x12>

080087dc <raise>:
 80087dc:	4b02      	ldr	r3, [pc, #8]	; (80087e8 <raise+0xc>)
 80087de:	4601      	mov	r1, r0
 80087e0:	6818      	ldr	r0, [r3, #0]
 80087e2:	f7ff bfd3 	b.w	800878c <_raise_r>
 80087e6:	bf00      	nop
 80087e8:	20000024 	.word	0x20000024

080087ec <_kill_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	2300      	movs	r3, #0
 80087f0:	4d06      	ldr	r5, [pc, #24]	; (800880c <_kill_r+0x20>)
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	4611      	mov	r1, r2
 80087f8:	602b      	str	r3, [r5, #0]
 80087fa:	f7f9 fe67 	bl	80024cc <_kill>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d102      	bne.n	8008808 <_kill_r+0x1c>
 8008802:	682b      	ldr	r3, [r5, #0]
 8008804:	b103      	cbz	r3, 8008808 <_kill_r+0x1c>
 8008806:	6023      	str	r3, [r4, #0]
 8008808:	bd38      	pop	{r3, r4, r5, pc}
 800880a:	bf00      	nop
 800880c:	200007ac 	.word	0x200007ac

08008810 <_getpid_r>:
 8008810:	f7f9 be5a 	b.w	80024c8 <_getpid>

08008814 <__sread>:
 8008814:	b510      	push	{r4, lr}
 8008816:	460c      	mov	r4, r1
 8008818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800881c:	f000 f894 	bl	8008948 <_read_r>
 8008820:	2800      	cmp	r0, #0
 8008822:	bfab      	itete	ge
 8008824:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008826:	89a3      	ldrhlt	r3, [r4, #12]
 8008828:	181b      	addge	r3, r3, r0
 800882a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800882e:	bfac      	ite	ge
 8008830:	6563      	strge	r3, [r4, #84]	; 0x54
 8008832:	81a3      	strhlt	r3, [r4, #12]
 8008834:	bd10      	pop	{r4, pc}

08008836 <__swrite>:
 8008836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800883a:	461f      	mov	r7, r3
 800883c:	898b      	ldrh	r3, [r1, #12]
 800883e:	4605      	mov	r5, r0
 8008840:	05db      	lsls	r3, r3, #23
 8008842:	460c      	mov	r4, r1
 8008844:	4616      	mov	r6, r2
 8008846:	d505      	bpl.n	8008854 <__swrite+0x1e>
 8008848:	2302      	movs	r3, #2
 800884a:	2200      	movs	r2, #0
 800884c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008850:	f000 f868 	bl	8008924 <_lseek_r>
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	4632      	mov	r2, r6
 8008858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800885c:	81a3      	strh	r3, [r4, #12]
 800885e:	4628      	mov	r0, r5
 8008860:	463b      	mov	r3, r7
 8008862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800886a:	f000 b817 	b.w	800889c <_write_r>

0800886e <__sseek>:
 800886e:	b510      	push	{r4, lr}
 8008870:	460c      	mov	r4, r1
 8008872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008876:	f000 f855 	bl	8008924 <_lseek_r>
 800887a:	1c43      	adds	r3, r0, #1
 800887c:	89a3      	ldrh	r3, [r4, #12]
 800887e:	bf15      	itete	ne
 8008880:	6560      	strne	r0, [r4, #84]	; 0x54
 8008882:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008886:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800888a:	81a3      	strheq	r3, [r4, #12]
 800888c:	bf18      	it	ne
 800888e:	81a3      	strhne	r3, [r4, #12]
 8008890:	bd10      	pop	{r4, pc}

08008892 <__sclose>:
 8008892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008896:	f000 b813 	b.w	80088c0 <_close_r>
	...

0800889c <_write_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	4611      	mov	r1, r2
 80088a4:	2200      	movs	r2, #0
 80088a6:	4d05      	ldr	r5, [pc, #20]	; (80088bc <_write_r+0x20>)
 80088a8:	602a      	str	r2, [r5, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	f7f9 fe2c 	bl	8002508 <_write>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	d102      	bne.n	80088ba <_write_r+0x1e>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	b103      	cbz	r3, 80088ba <_write_r+0x1e>
 80088b8:	6023      	str	r3, [r4, #0]
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
 80088bc:	200007ac 	.word	0x200007ac

080088c0 <_close_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	2300      	movs	r3, #0
 80088c4:	4d05      	ldr	r5, [pc, #20]	; (80088dc <_close_r+0x1c>)
 80088c6:	4604      	mov	r4, r0
 80088c8:	4608      	mov	r0, r1
 80088ca:	602b      	str	r3, [r5, #0]
 80088cc:	f7f9 fe48 	bl	8002560 <_close>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d102      	bne.n	80088da <_close_r+0x1a>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	b103      	cbz	r3, 80088da <_close_r+0x1a>
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	200007ac 	.word	0x200007ac

080088e0 <_fstat_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	2300      	movs	r3, #0
 80088e4:	4d06      	ldr	r5, [pc, #24]	; (8008900 <_fstat_r+0x20>)
 80088e6:	4604      	mov	r4, r0
 80088e8:	4608      	mov	r0, r1
 80088ea:	4611      	mov	r1, r2
 80088ec:	602b      	str	r3, [r5, #0]
 80088ee:	f7f9 fe3a 	bl	8002566 <_fstat>
 80088f2:	1c43      	adds	r3, r0, #1
 80088f4:	d102      	bne.n	80088fc <_fstat_r+0x1c>
 80088f6:	682b      	ldr	r3, [r5, #0]
 80088f8:	b103      	cbz	r3, 80088fc <_fstat_r+0x1c>
 80088fa:	6023      	str	r3, [r4, #0]
 80088fc:	bd38      	pop	{r3, r4, r5, pc}
 80088fe:	bf00      	nop
 8008900:	200007ac 	.word	0x200007ac

08008904 <_isatty_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	2300      	movs	r3, #0
 8008908:	4d05      	ldr	r5, [pc, #20]	; (8008920 <_isatty_r+0x1c>)
 800890a:	4604      	mov	r4, r0
 800890c:	4608      	mov	r0, r1
 800890e:	602b      	str	r3, [r5, #0]
 8008910:	f7f9 fe2e 	bl	8002570 <_isatty>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d102      	bne.n	800891e <_isatty_r+0x1a>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	b103      	cbz	r3, 800891e <_isatty_r+0x1a>
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	200007ac 	.word	0x200007ac

08008924 <_lseek_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4604      	mov	r4, r0
 8008928:	4608      	mov	r0, r1
 800892a:	4611      	mov	r1, r2
 800892c:	2200      	movs	r2, #0
 800892e:	4d05      	ldr	r5, [pc, #20]	; (8008944 <_lseek_r+0x20>)
 8008930:	602a      	str	r2, [r5, #0]
 8008932:	461a      	mov	r2, r3
 8008934:	f7f9 fe1e 	bl	8002574 <_lseek>
 8008938:	1c43      	adds	r3, r0, #1
 800893a:	d102      	bne.n	8008942 <_lseek_r+0x1e>
 800893c:	682b      	ldr	r3, [r5, #0]
 800893e:	b103      	cbz	r3, 8008942 <_lseek_r+0x1e>
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	bd38      	pop	{r3, r4, r5, pc}
 8008944:	200007ac 	.word	0x200007ac

08008948 <_read_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4604      	mov	r4, r0
 800894c:	4608      	mov	r0, r1
 800894e:	4611      	mov	r1, r2
 8008950:	2200      	movs	r2, #0
 8008952:	4d05      	ldr	r5, [pc, #20]	; (8008968 <_read_r+0x20>)
 8008954:	602a      	str	r2, [r5, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	f7f9 fdc6 	bl	80024e8 <_read>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_read_r+0x1e>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	b103      	cbz	r3, 8008966 <_read_r+0x1e>
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	200007ac 	.word	0x200007ac

0800896c <pow>:
 800896c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008970:	461f      	mov	r7, r3
 8008972:	4680      	mov	r8, r0
 8008974:	4689      	mov	r9, r1
 8008976:	4616      	mov	r6, r2
 8008978:	f000 f8a6 	bl	8008ac8 <__ieee754_pow>
 800897c:	4b4d      	ldr	r3, [pc, #308]	; (8008ab4 <pow+0x148>)
 800897e:	4604      	mov	r4, r0
 8008980:	f993 3000 	ldrsb.w	r3, [r3]
 8008984:	460d      	mov	r5, r1
 8008986:	3301      	adds	r3, #1
 8008988:	d015      	beq.n	80089b6 <pow+0x4a>
 800898a:	4632      	mov	r2, r6
 800898c:	463b      	mov	r3, r7
 800898e:	4630      	mov	r0, r6
 8008990:	4639      	mov	r1, r7
 8008992:	f7f8 f83b 	bl	8000a0c <__aeabi_dcmpun>
 8008996:	b970      	cbnz	r0, 80089b6 <pow+0x4a>
 8008998:	4642      	mov	r2, r8
 800899a:	464b      	mov	r3, r9
 800899c:	4640      	mov	r0, r8
 800899e:	4649      	mov	r1, r9
 80089a0:	f7f8 f834 	bl	8000a0c <__aeabi_dcmpun>
 80089a4:	2200      	movs	r2, #0
 80089a6:	2300      	movs	r3, #0
 80089a8:	b148      	cbz	r0, 80089be <pow+0x52>
 80089aa:	4630      	mov	r0, r6
 80089ac:	4639      	mov	r1, r7
 80089ae:	f7f7 fffb 	bl	80009a8 <__aeabi_dcmpeq>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d17b      	bne.n	8008aae <pow+0x142>
 80089b6:	4620      	mov	r0, r4
 80089b8:	4629      	mov	r1, r5
 80089ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089be:	4640      	mov	r0, r8
 80089c0:	4649      	mov	r1, r9
 80089c2:	f7f7 fff1 	bl	80009a8 <__aeabi_dcmpeq>
 80089c6:	b1e0      	cbz	r0, 8008a02 <pow+0x96>
 80089c8:	2200      	movs	r2, #0
 80089ca:	2300      	movs	r3, #0
 80089cc:	4630      	mov	r0, r6
 80089ce:	4639      	mov	r1, r7
 80089d0:	f7f7 ffea 	bl	80009a8 <__aeabi_dcmpeq>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d16a      	bne.n	8008aae <pow+0x142>
 80089d8:	4630      	mov	r0, r6
 80089da:	4639      	mov	r1, r7
 80089dc:	f000 fe39 	bl	8009652 <finite>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d0e8      	beq.n	80089b6 <pow+0x4a>
 80089e4:	2200      	movs	r2, #0
 80089e6:	2300      	movs	r3, #0
 80089e8:	4630      	mov	r0, r6
 80089ea:	4639      	mov	r1, r7
 80089ec:	f7f7 ffe6 	bl	80009bc <__aeabi_dcmplt>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d0e0      	beq.n	80089b6 <pow+0x4a>
 80089f4:	f7fb fb46 	bl	8004084 <__errno>
 80089f8:	2321      	movs	r3, #33	; 0x21
 80089fa:	2400      	movs	r4, #0
 80089fc:	6003      	str	r3, [r0, #0]
 80089fe:	4d2e      	ldr	r5, [pc, #184]	; (8008ab8 <pow+0x14c>)
 8008a00:	e7d9      	b.n	80089b6 <pow+0x4a>
 8008a02:	4620      	mov	r0, r4
 8008a04:	4629      	mov	r1, r5
 8008a06:	f000 fe24 	bl	8009652 <finite>
 8008a0a:	bba8      	cbnz	r0, 8008a78 <pow+0x10c>
 8008a0c:	4640      	mov	r0, r8
 8008a0e:	4649      	mov	r1, r9
 8008a10:	f000 fe1f 	bl	8009652 <finite>
 8008a14:	b380      	cbz	r0, 8008a78 <pow+0x10c>
 8008a16:	4630      	mov	r0, r6
 8008a18:	4639      	mov	r1, r7
 8008a1a:	f000 fe1a 	bl	8009652 <finite>
 8008a1e:	b358      	cbz	r0, 8008a78 <pow+0x10c>
 8008a20:	4622      	mov	r2, r4
 8008a22:	462b      	mov	r3, r5
 8008a24:	4620      	mov	r0, r4
 8008a26:	4629      	mov	r1, r5
 8008a28:	f7f7 fff0 	bl	8000a0c <__aeabi_dcmpun>
 8008a2c:	b160      	cbz	r0, 8008a48 <pow+0xdc>
 8008a2e:	f7fb fb29 	bl	8004084 <__errno>
 8008a32:	2321      	movs	r3, #33	; 0x21
 8008a34:	2200      	movs	r2, #0
 8008a36:	6003      	str	r3, [r0, #0]
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	f7f7 fe75 	bl	800072c <__aeabi_ddiv>
 8008a42:	4604      	mov	r4, r0
 8008a44:	460d      	mov	r5, r1
 8008a46:	e7b6      	b.n	80089b6 <pow+0x4a>
 8008a48:	f7fb fb1c 	bl	8004084 <__errno>
 8008a4c:	2322      	movs	r3, #34	; 0x22
 8008a4e:	2200      	movs	r2, #0
 8008a50:	6003      	str	r3, [r0, #0]
 8008a52:	4649      	mov	r1, r9
 8008a54:	2300      	movs	r3, #0
 8008a56:	4640      	mov	r0, r8
 8008a58:	f7f7 ffb0 	bl	80009bc <__aeabi_dcmplt>
 8008a5c:	2400      	movs	r4, #0
 8008a5e:	b148      	cbz	r0, 8008a74 <pow+0x108>
 8008a60:	4630      	mov	r0, r6
 8008a62:	4639      	mov	r1, r7
 8008a64:	f000 fdfc 	bl	8009660 <rint>
 8008a68:	4632      	mov	r2, r6
 8008a6a:	463b      	mov	r3, r7
 8008a6c:	f7f7 ff9c 	bl	80009a8 <__aeabi_dcmpeq>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d0c4      	beq.n	80089fe <pow+0x92>
 8008a74:	4d11      	ldr	r5, [pc, #68]	; (8008abc <pow+0x150>)
 8008a76:	e79e      	b.n	80089b6 <pow+0x4a>
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	4629      	mov	r1, r5
 8008a80:	f7f7 ff92 	bl	80009a8 <__aeabi_dcmpeq>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d096      	beq.n	80089b6 <pow+0x4a>
 8008a88:	4640      	mov	r0, r8
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	f000 fde1 	bl	8009652 <finite>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d090      	beq.n	80089b6 <pow+0x4a>
 8008a94:	4630      	mov	r0, r6
 8008a96:	4639      	mov	r1, r7
 8008a98:	f000 fddb 	bl	8009652 <finite>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d08a      	beq.n	80089b6 <pow+0x4a>
 8008aa0:	f7fb faf0 	bl	8004084 <__errno>
 8008aa4:	2322      	movs	r3, #34	; 0x22
 8008aa6:	2400      	movs	r4, #0
 8008aa8:	2500      	movs	r5, #0
 8008aaa:	6003      	str	r3, [r0, #0]
 8008aac:	e783      	b.n	80089b6 <pow+0x4a>
 8008aae:	2400      	movs	r4, #0
 8008ab0:	4d03      	ldr	r5, [pc, #12]	; (8008ac0 <pow+0x154>)
 8008ab2:	e780      	b.n	80089b6 <pow+0x4a>
 8008ab4:	200001f8 	.word	0x200001f8
 8008ab8:	fff00000 	.word	0xfff00000
 8008abc:	7ff00000 	.word	0x7ff00000
 8008ac0:	3ff00000 	.word	0x3ff00000
 8008ac4:	00000000 	.word	0x00000000

08008ac8 <__ieee754_pow>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	b093      	sub	sp, #76	; 0x4c
 8008ace:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ad2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8008ad6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008ada:	ea55 0302 	orrs.w	r3, r5, r2
 8008ade:	4607      	mov	r7, r0
 8008ae0:	4688      	mov	r8, r1
 8008ae2:	f000 84bf 	beq.w	8009464 <__ieee754_pow+0x99c>
 8008ae6:	4b7e      	ldr	r3, [pc, #504]	; (8008ce0 <__ieee754_pow+0x218>)
 8008ae8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8008aec:	429c      	cmp	r4, r3
 8008aee:	4689      	mov	r9, r1
 8008af0:	4682      	mov	sl, r0
 8008af2:	dc09      	bgt.n	8008b08 <__ieee754_pow+0x40>
 8008af4:	d103      	bne.n	8008afe <__ieee754_pow+0x36>
 8008af6:	b978      	cbnz	r0, 8008b18 <__ieee754_pow+0x50>
 8008af8:	42a5      	cmp	r5, r4
 8008afa:	dd02      	ble.n	8008b02 <__ieee754_pow+0x3a>
 8008afc:	e00c      	b.n	8008b18 <__ieee754_pow+0x50>
 8008afe:	429d      	cmp	r5, r3
 8008b00:	dc02      	bgt.n	8008b08 <__ieee754_pow+0x40>
 8008b02:	429d      	cmp	r5, r3
 8008b04:	d10e      	bne.n	8008b24 <__ieee754_pow+0x5c>
 8008b06:	b16a      	cbz	r2, 8008b24 <__ieee754_pow+0x5c>
 8008b08:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008b0c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008b10:	ea54 030a 	orrs.w	r3, r4, sl
 8008b14:	f000 84a6 	beq.w	8009464 <__ieee754_pow+0x99c>
 8008b18:	4872      	ldr	r0, [pc, #456]	; (8008ce4 <__ieee754_pow+0x21c>)
 8008b1a:	b013      	add	sp, #76	; 0x4c
 8008b1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b20:	f7ff b93c 	b.w	8007d9c <nan>
 8008b24:	f1b9 0f00 	cmp.w	r9, #0
 8008b28:	da39      	bge.n	8008b9e <__ieee754_pow+0xd6>
 8008b2a:	4b6f      	ldr	r3, [pc, #444]	; (8008ce8 <__ieee754_pow+0x220>)
 8008b2c:	429d      	cmp	r5, r3
 8008b2e:	dc54      	bgt.n	8008bda <__ieee754_pow+0x112>
 8008b30:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008b34:	429d      	cmp	r5, r3
 8008b36:	f340 84a6 	ble.w	8009486 <__ieee754_pow+0x9be>
 8008b3a:	152b      	asrs	r3, r5, #20
 8008b3c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008b40:	2b14      	cmp	r3, #20
 8008b42:	dd0f      	ble.n	8008b64 <__ieee754_pow+0x9c>
 8008b44:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008b48:	fa22 f103 	lsr.w	r1, r2, r3
 8008b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b50:	4293      	cmp	r3, r2
 8008b52:	f040 8498 	bne.w	8009486 <__ieee754_pow+0x9be>
 8008b56:	f001 0101 	and.w	r1, r1, #1
 8008b5a:	f1c1 0302 	rsb	r3, r1, #2
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	b182      	cbz	r2, 8008b84 <__ieee754_pow+0xbc>
 8008b62:	e05e      	b.n	8008c22 <__ieee754_pow+0x15a>
 8008b64:	2a00      	cmp	r2, #0
 8008b66:	d15a      	bne.n	8008c1e <__ieee754_pow+0x156>
 8008b68:	f1c3 0314 	rsb	r3, r3, #20
 8008b6c:	fa45 f103 	asr.w	r1, r5, r3
 8008b70:	fa01 f303 	lsl.w	r3, r1, r3
 8008b74:	42ab      	cmp	r3, r5
 8008b76:	f040 8483 	bne.w	8009480 <__ieee754_pow+0x9b8>
 8008b7a:	f001 0101 	and.w	r1, r1, #1
 8008b7e:	f1c1 0302 	rsb	r3, r1, #2
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	4b59      	ldr	r3, [pc, #356]	; (8008cec <__ieee754_pow+0x224>)
 8008b86:	429d      	cmp	r5, r3
 8008b88:	d130      	bne.n	8008bec <__ieee754_pow+0x124>
 8008b8a:	2e00      	cmp	r6, #0
 8008b8c:	f280 8474 	bge.w	8009478 <__ieee754_pow+0x9b0>
 8008b90:	463a      	mov	r2, r7
 8008b92:	4643      	mov	r3, r8
 8008b94:	2000      	movs	r0, #0
 8008b96:	4955      	ldr	r1, [pc, #340]	; (8008cec <__ieee754_pow+0x224>)
 8008b98:	f7f7 fdc8 	bl	800072c <__aeabi_ddiv>
 8008b9c:	e02f      	b.n	8008bfe <__ieee754_pow+0x136>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	2a00      	cmp	r2, #0
 8008ba4:	d13d      	bne.n	8008c22 <__ieee754_pow+0x15a>
 8008ba6:	4b4e      	ldr	r3, [pc, #312]	; (8008ce0 <__ieee754_pow+0x218>)
 8008ba8:	429d      	cmp	r5, r3
 8008baa:	d1eb      	bne.n	8008b84 <__ieee754_pow+0xbc>
 8008bac:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008bb0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008bb4:	ea53 030a 	orrs.w	r3, r3, sl
 8008bb8:	f000 8454 	beq.w	8009464 <__ieee754_pow+0x99c>
 8008bbc:	4b4c      	ldr	r3, [pc, #304]	; (8008cf0 <__ieee754_pow+0x228>)
 8008bbe:	429c      	cmp	r4, r3
 8008bc0:	dd0d      	ble.n	8008bde <__ieee754_pow+0x116>
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	f280 8454 	bge.w	8009470 <__ieee754_pow+0x9a8>
 8008bc8:	f04f 0b00 	mov.w	fp, #0
 8008bcc:	f04f 0c00 	mov.w	ip, #0
 8008bd0:	4658      	mov	r0, fp
 8008bd2:	4661      	mov	r1, ip
 8008bd4:	b013      	add	sp, #76	; 0x4c
 8008bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bda:	2302      	movs	r3, #2
 8008bdc:	e7e0      	b.n	8008ba0 <__ieee754_pow+0xd8>
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	daf2      	bge.n	8008bc8 <__ieee754_pow+0x100>
 8008be2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8008be6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8008bea:	e7f1      	b.n	8008bd0 <__ieee754_pow+0x108>
 8008bec:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8008bf0:	d108      	bne.n	8008c04 <__ieee754_pow+0x13c>
 8008bf2:	463a      	mov	r2, r7
 8008bf4:	4643      	mov	r3, r8
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	4641      	mov	r1, r8
 8008bfa:	f7f7 fc6d 	bl	80004d8 <__aeabi_dmul>
 8008bfe:	4683      	mov	fp, r0
 8008c00:	468c      	mov	ip, r1
 8008c02:	e7e5      	b.n	8008bd0 <__ieee754_pow+0x108>
 8008c04:	4b3b      	ldr	r3, [pc, #236]	; (8008cf4 <__ieee754_pow+0x22c>)
 8008c06:	429e      	cmp	r6, r3
 8008c08:	d10b      	bne.n	8008c22 <__ieee754_pow+0x15a>
 8008c0a:	f1b9 0f00 	cmp.w	r9, #0
 8008c0e:	db08      	blt.n	8008c22 <__ieee754_pow+0x15a>
 8008c10:	4638      	mov	r0, r7
 8008c12:	4641      	mov	r1, r8
 8008c14:	b013      	add	sp, #76	; 0x4c
 8008c16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1a:	f000 bc6b 	b.w	80094f4 <__ieee754_sqrt>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	4638      	mov	r0, r7
 8008c24:	4641      	mov	r1, r8
 8008c26:	f000 fd11 	bl	800964c <fabs>
 8008c2a:	4683      	mov	fp, r0
 8008c2c:	468c      	mov	ip, r1
 8008c2e:	f1ba 0f00 	cmp.w	sl, #0
 8008c32:	d129      	bne.n	8008c88 <__ieee754_pow+0x1c0>
 8008c34:	b124      	cbz	r4, 8008c40 <__ieee754_pow+0x178>
 8008c36:	4b2d      	ldr	r3, [pc, #180]	; (8008cec <__ieee754_pow+0x224>)
 8008c38:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d123      	bne.n	8008c88 <__ieee754_pow+0x1c0>
 8008c40:	2e00      	cmp	r6, #0
 8008c42:	da07      	bge.n	8008c54 <__ieee754_pow+0x18c>
 8008c44:	465a      	mov	r2, fp
 8008c46:	4663      	mov	r3, ip
 8008c48:	2000      	movs	r0, #0
 8008c4a:	4928      	ldr	r1, [pc, #160]	; (8008cec <__ieee754_pow+0x224>)
 8008c4c:	f7f7 fd6e 	bl	800072c <__aeabi_ddiv>
 8008c50:	4683      	mov	fp, r0
 8008c52:	468c      	mov	ip, r1
 8008c54:	f1b9 0f00 	cmp.w	r9, #0
 8008c58:	daba      	bge.n	8008bd0 <__ieee754_pow+0x108>
 8008c5a:	9b00      	ldr	r3, [sp, #0]
 8008c5c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008c60:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008c64:	4323      	orrs	r3, r4
 8008c66:	d108      	bne.n	8008c7a <__ieee754_pow+0x1b2>
 8008c68:	465a      	mov	r2, fp
 8008c6a:	4663      	mov	r3, ip
 8008c6c:	4658      	mov	r0, fp
 8008c6e:	4661      	mov	r1, ip
 8008c70:	f7f7 fa7a 	bl	8000168 <__aeabi_dsub>
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	e78e      	b.n	8008b98 <__ieee754_pow+0xd0>
 8008c7a:	9b00      	ldr	r3, [sp, #0]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d1a7      	bne.n	8008bd0 <__ieee754_pow+0x108>
 8008c80:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008c84:	469c      	mov	ip, r3
 8008c86:	e7a3      	b.n	8008bd0 <__ieee754_pow+0x108>
 8008c88:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c92:	9b00      	ldr	r3, [sp, #0]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	d104      	bne.n	8008ca2 <__ieee754_pow+0x1da>
 8008c98:	463a      	mov	r2, r7
 8008c9a:	4643      	mov	r3, r8
 8008c9c:	4638      	mov	r0, r7
 8008c9e:	4641      	mov	r1, r8
 8008ca0:	e7e6      	b.n	8008c70 <__ieee754_pow+0x1a8>
 8008ca2:	4b15      	ldr	r3, [pc, #84]	; (8008cf8 <__ieee754_pow+0x230>)
 8008ca4:	429d      	cmp	r5, r3
 8008ca6:	f340 80f9 	ble.w	8008e9c <__ieee754_pow+0x3d4>
 8008caa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008cae:	429d      	cmp	r5, r3
 8008cb0:	4b0f      	ldr	r3, [pc, #60]	; (8008cf0 <__ieee754_pow+0x228>)
 8008cb2:	dd09      	ble.n	8008cc8 <__ieee754_pow+0x200>
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	dc0c      	bgt.n	8008cd2 <__ieee754_pow+0x20a>
 8008cb8:	2e00      	cmp	r6, #0
 8008cba:	da85      	bge.n	8008bc8 <__ieee754_pow+0x100>
 8008cbc:	a306      	add	r3, pc, #24	; (adr r3, 8008cd8 <__ieee754_pow+0x210>)
 8008cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc2:	4610      	mov	r0, r2
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	e798      	b.n	8008bfa <__ieee754_pow+0x132>
 8008cc8:	429c      	cmp	r4, r3
 8008cca:	dbf5      	blt.n	8008cb8 <__ieee754_pow+0x1f0>
 8008ccc:	4b07      	ldr	r3, [pc, #28]	; (8008cec <__ieee754_pow+0x224>)
 8008cce:	429c      	cmp	r4, r3
 8008cd0:	dd14      	ble.n	8008cfc <__ieee754_pow+0x234>
 8008cd2:	2e00      	cmp	r6, #0
 8008cd4:	dcf2      	bgt.n	8008cbc <__ieee754_pow+0x1f4>
 8008cd6:	e777      	b.n	8008bc8 <__ieee754_pow+0x100>
 8008cd8:	8800759c 	.word	0x8800759c
 8008cdc:	7e37e43c 	.word	0x7e37e43c
 8008ce0:	7ff00000 	.word	0x7ff00000
 8008ce4:	0800c768 	.word	0x0800c768
 8008ce8:	433fffff 	.word	0x433fffff
 8008cec:	3ff00000 	.word	0x3ff00000
 8008cf0:	3fefffff 	.word	0x3fefffff
 8008cf4:	3fe00000 	.word	0x3fe00000
 8008cf8:	41e00000 	.word	0x41e00000
 8008cfc:	4661      	mov	r1, ip
 8008cfe:	2200      	movs	r2, #0
 8008d00:	4658      	mov	r0, fp
 8008d02:	4b61      	ldr	r3, [pc, #388]	; (8008e88 <__ieee754_pow+0x3c0>)
 8008d04:	f7f7 fa30 	bl	8000168 <__aeabi_dsub>
 8008d08:	a355      	add	r3, pc, #340	; (adr r3, 8008e60 <__ieee754_pow+0x398>)
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	4604      	mov	r4, r0
 8008d10:	460d      	mov	r5, r1
 8008d12:	f7f7 fbe1 	bl	80004d8 <__aeabi_dmul>
 8008d16:	a354      	add	r3, pc, #336	; (adr r3, 8008e68 <__ieee754_pow+0x3a0>)
 8008d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1c:	4606      	mov	r6, r0
 8008d1e:	460f      	mov	r7, r1
 8008d20:	4620      	mov	r0, r4
 8008d22:	4629      	mov	r1, r5
 8008d24:	f7f7 fbd8 	bl	80004d8 <__aeabi_dmul>
 8008d28:	2200      	movs	r2, #0
 8008d2a:	4682      	mov	sl, r0
 8008d2c:	468b      	mov	fp, r1
 8008d2e:	4620      	mov	r0, r4
 8008d30:	4629      	mov	r1, r5
 8008d32:	4b56      	ldr	r3, [pc, #344]	; (8008e8c <__ieee754_pow+0x3c4>)
 8008d34:	f7f7 fbd0 	bl	80004d8 <__aeabi_dmul>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	a14c      	add	r1, pc, #304	; (adr r1, 8008e70 <__ieee754_pow+0x3a8>)
 8008d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d42:	f7f7 fa11 	bl	8000168 <__aeabi_dsub>
 8008d46:	4622      	mov	r2, r4
 8008d48:	462b      	mov	r3, r5
 8008d4a:	f7f7 fbc5 	bl	80004d8 <__aeabi_dmul>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	2000      	movs	r0, #0
 8008d54:	494e      	ldr	r1, [pc, #312]	; (8008e90 <__ieee754_pow+0x3c8>)
 8008d56:	f7f7 fa07 	bl	8000168 <__aeabi_dsub>
 8008d5a:	4622      	mov	r2, r4
 8008d5c:	462b      	mov	r3, r5
 8008d5e:	4680      	mov	r8, r0
 8008d60:	4689      	mov	r9, r1
 8008d62:	4620      	mov	r0, r4
 8008d64:	4629      	mov	r1, r5
 8008d66:	f7f7 fbb7 	bl	80004d8 <__aeabi_dmul>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4640      	mov	r0, r8
 8008d70:	4649      	mov	r1, r9
 8008d72:	f7f7 fbb1 	bl	80004d8 <__aeabi_dmul>
 8008d76:	a340      	add	r3, pc, #256	; (adr r3, 8008e78 <__ieee754_pow+0x3b0>)
 8008d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7c:	f7f7 fbac 	bl	80004d8 <__aeabi_dmul>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4650      	mov	r0, sl
 8008d86:	4659      	mov	r1, fp
 8008d88:	f7f7 f9ee 	bl	8000168 <__aeabi_dsub>
 8008d8c:	f04f 0a00 	mov.w	sl, #0
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4604      	mov	r4, r0
 8008d96:	460d      	mov	r5, r1
 8008d98:	4630      	mov	r0, r6
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 f9e6 	bl	800016c <__adddf3>
 8008da0:	4632      	mov	r2, r6
 8008da2:	463b      	mov	r3, r7
 8008da4:	4650      	mov	r0, sl
 8008da6:	468b      	mov	fp, r1
 8008da8:	f7f7 f9de 	bl	8000168 <__aeabi_dsub>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4620      	mov	r0, r4
 8008db2:	4629      	mov	r1, r5
 8008db4:	f7f7 f9d8 	bl	8000168 <__aeabi_dsub>
 8008db8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008dbc:	9b00      	ldr	r3, [sp, #0]
 8008dbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	f04f 0600 	mov.w	r6, #0
 8008dc8:	f04f 0200 	mov.w	r2, #0
 8008dcc:	bf0c      	ite	eq
 8008dce:	4b31      	ldreq	r3, [pc, #196]	; (8008e94 <__ieee754_pow+0x3cc>)
 8008dd0:	4b2d      	ldrne	r3, [pc, #180]	; (8008e88 <__ieee754_pow+0x3c0>)
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	460d      	mov	r5, r1
 8008dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dda:	e9cd 2300 	strd	r2, r3, [sp]
 8008dde:	4632      	mov	r2, r6
 8008de0:	463b      	mov	r3, r7
 8008de2:	f7f7 f9c1 	bl	8000168 <__aeabi_dsub>
 8008de6:	4652      	mov	r2, sl
 8008de8:	465b      	mov	r3, fp
 8008dea:	f7f7 fb75 	bl	80004d8 <__aeabi_dmul>
 8008dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008df2:	4680      	mov	r8, r0
 8008df4:	4689      	mov	r9, r1
 8008df6:	4620      	mov	r0, r4
 8008df8:	4629      	mov	r1, r5
 8008dfa:	f7f7 fb6d 	bl	80004d8 <__aeabi_dmul>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	4640      	mov	r0, r8
 8008e04:	4649      	mov	r1, r9
 8008e06:	f7f7 f9b1 	bl	800016c <__adddf3>
 8008e0a:	4632      	mov	r2, r6
 8008e0c:	463b      	mov	r3, r7
 8008e0e:	4680      	mov	r8, r0
 8008e10:	4689      	mov	r9, r1
 8008e12:	4650      	mov	r0, sl
 8008e14:	4659      	mov	r1, fp
 8008e16:	f7f7 fb5f 	bl	80004d8 <__aeabi_dmul>
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	460d      	mov	r5, r1
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4602      	mov	r2, r0
 8008e22:	4649      	mov	r1, r9
 8008e24:	4640      	mov	r0, r8
 8008e26:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008e2a:	f7f7 f99f 	bl	800016c <__adddf3>
 8008e2e:	4b1a      	ldr	r3, [pc, #104]	; (8008e98 <__ieee754_pow+0x3d0>)
 8008e30:	4682      	mov	sl, r0
 8008e32:	4299      	cmp	r1, r3
 8008e34:	460f      	mov	r7, r1
 8008e36:	460e      	mov	r6, r1
 8008e38:	f340 82ed 	ble.w	8009416 <__ieee754_pow+0x94e>
 8008e3c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008e40:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008e44:	4303      	orrs	r3, r0
 8008e46:	f000 81e7 	beq.w	8009218 <__ieee754_pow+0x750>
 8008e4a:	a30d      	add	r3, pc, #52	; (adr r3, 8008e80 <__ieee754_pow+0x3b8>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e54:	f7f7 fb40 	bl	80004d8 <__aeabi_dmul>
 8008e58:	a309      	add	r3, pc, #36	; (adr r3, 8008e80 <__ieee754_pow+0x3b8>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	e6cc      	b.n	8008bfa <__ieee754_pow+0x132>
 8008e60:	60000000 	.word	0x60000000
 8008e64:	3ff71547 	.word	0x3ff71547
 8008e68:	f85ddf44 	.word	0xf85ddf44
 8008e6c:	3e54ae0b 	.word	0x3e54ae0b
 8008e70:	55555555 	.word	0x55555555
 8008e74:	3fd55555 	.word	0x3fd55555
 8008e78:	652b82fe 	.word	0x652b82fe
 8008e7c:	3ff71547 	.word	0x3ff71547
 8008e80:	8800759c 	.word	0x8800759c
 8008e84:	7e37e43c 	.word	0x7e37e43c
 8008e88:	3ff00000 	.word	0x3ff00000
 8008e8c:	3fd00000 	.word	0x3fd00000
 8008e90:	3fe00000 	.word	0x3fe00000
 8008e94:	bff00000 	.word	0xbff00000
 8008e98:	408fffff 	.word	0x408fffff
 8008e9c:	4bd4      	ldr	r3, [pc, #848]	; (80091f0 <__ieee754_pow+0x728>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	ea09 0303 	and.w	r3, r9, r3
 8008ea4:	b943      	cbnz	r3, 8008eb8 <__ieee754_pow+0x3f0>
 8008ea6:	4658      	mov	r0, fp
 8008ea8:	4661      	mov	r1, ip
 8008eaa:	4bd2      	ldr	r3, [pc, #840]	; (80091f4 <__ieee754_pow+0x72c>)
 8008eac:	f7f7 fb14 	bl	80004d8 <__aeabi_dmul>
 8008eb0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008eb4:	4683      	mov	fp, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	1523      	asrs	r3, r4, #20
 8008eba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008ebe:	4413      	add	r3, r2
 8008ec0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ec2:	4bcd      	ldr	r3, [pc, #820]	; (80091f8 <__ieee754_pow+0x730>)
 8008ec4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008ec8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008ecc:	429c      	cmp	r4, r3
 8008ece:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008ed2:	dd08      	ble.n	8008ee6 <__ieee754_pow+0x41e>
 8008ed4:	4bc9      	ldr	r3, [pc, #804]	; (80091fc <__ieee754_pow+0x734>)
 8008ed6:	429c      	cmp	r4, r3
 8008ed8:	f340 819c 	ble.w	8009214 <__ieee754_pow+0x74c>
 8008edc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ede:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ee6:	2600      	movs	r6, #0
 8008ee8:	00f3      	lsls	r3, r6, #3
 8008eea:	930d      	str	r3, [sp, #52]	; 0x34
 8008eec:	4bc4      	ldr	r3, [pc, #784]	; (8009200 <__ieee754_pow+0x738>)
 8008eee:	4658      	mov	r0, fp
 8008ef0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ef4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ef8:	4629      	mov	r1, r5
 8008efa:	461a      	mov	r2, r3
 8008efc:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008f00:	4623      	mov	r3, r4
 8008f02:	f7f7 f931 	bl	8000168 <__aeabi_dsub>
 8008f06:	46da      	mov	sl, fp
 8008f08:	462b      	mov	r3, r5
 8008f0a:	4652      	mov	r2, sl
 8008f0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008f10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f14:	f7f7 f92a 	bl	800016c <__adddf3>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	49b9      	ldr	r1, [pc, #740]	; (8009204 <__ieee754_pow+0x73c>)
 8008f20:	f7f7 fc04 	bl	800072c <__aeabi_ddiv>
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008f30:	f7f7 fad2 	bl	80004d8 <__aeabi_dmul>
 8008f34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008f38:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008f3c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008f40:	2300      	movs	r3, #0
 8008f42:	2200      	movs	r2, #0
 8008f44:	46ab      	mov	fp, r5
 8008f46:	106d      	asrs	r5, r5, #1
 8008f48:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008f4c:	9304      	str	r3, [sp, #16]
 8008f4e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008f52:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008f56:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	4649      	mov	r1, r9
 8008f5e:	4614      	mov	r4, r2
 8008f60:	461d      	mov	r5, r3
 8008f62:	f7f7 fab9 	bl	80004d8 <__aeabi_dmul>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008f6e:	f7f7 f8fb 	bl	8000168 <__aeabi_dsub>
 8008f72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f76:	4606      	mov	r6, r0
 8008f78:	460f      	mov	r7, r1
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	f7f7 f8f3 	bl	8000168 <__aeabi_dsub>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	4650      	mov	r0, sl
 8008f88:	4659      	mov	r1, fp
 8008f8a:	f7f7 f8ed 	bl	8000168 <__aeabi_dsub>
 8008f8e:	4642      	mov	r2, r8
 8008f90:	464b      	mov	r3, r9
 8008f92:	f7f7 faa1 	bl	80004d8 <__aeabi_dmul>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	f7f7 f8e3 	bl	8000168 <__aeabi_dsub>
 8008fa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008fa6:	f7f7 fa97 	bl	80004d8 <__aeabi_dmul>
 8008faa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008fb2:	4610      	mov	r0, r2
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	f7f7 fa8f 	bl	80004d8 <__aeabi_dmul>
 8008fba:	a37b      	add	r3, pc, #492	; (adr r3, 80091a8 <__ieee754_pow+0x6e0>)
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	460d      	mov	r5, r1
 8008fc4:	f7f7 fa88 	bl	80004d8 <__aeabi_dmul>
 8008fc8:	a379      	add	r3, pc, #484	; (adr r3, 80091b0 <__ieee754_pow+0x6e8>)
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	f7f7 f8cd 	bl	800016c <__adddf3>
 8008fd2:	4622      	mov	r2, r4
 8008fd4:	462b      	mov	r3, r5
 8008fd6:	f7f7 fa7f 	bl	80004d8 <__aeabi_dmul>
 8008fda:	a377      	add	r3, pc, #476	; (adr r3, 80091b8 <__ieee754_pow+0x6f0>)
 8008fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe0:	f7f7 f8c4 	bl	800016c <__adddf3>
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	462b      	mov	r3, r5
 8008fe8:	f7f7 fa76 	bl	80004d8 <__aeabi_dmul>
 8008fec:	a374      	add	r3, pc, #464	; (adr r3, 80091c0 <__ieee754_pow+0x6f8>)
 8008fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff2:	f7f7 f8bb 	bl	800016c <__adddf3>
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	462b      	mov	r3, r5
 8008ffa:	f7f7 fa6d 	bl	80004d8 <__aeabi_dmul>
 8008ffe:	a372      	add	r3, pc, #456	; (adr r3, 80091c8 <__ieee754_pow+0x700>)
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	f7f7 f8b2 	bl	800016c <__adddf3>
 8009008:	4622      	mov	r2, r4
 800900a:	462b      	mov	r3, r5
 800900c:	f7f7 fa64 	bl	80004d8 <__aeabi_dmul>
 8009010:	a36f      	add	r3, pc, #444	; (adr r3, 80091d0 <__ieee754_pow+0x708>)
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	f7f7 f8a9 	bl	800016c <__adddf3>
 800901a:	4622      	mov	r2, r4
 800901c:	4606      	mov	r6, r0
 800901e:	460f      	mov	r7, r1
 8009020:	462b      	mov	r3, r5
 8009022:	4620      	mov	r0, r4
 8009024:	4629      	mov	r1, r5
 8009026:	f7f7 fa57 	bl	80004d8 <__aeabi_dmul>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4630      	mov	r0, r6
 8009030:	4639      	mov	r1, r7
 8009032:	f7f7 fa51 	bl	80004d8 <__aeabi_dmul>
 8009036:	4604      	mov	r4, r0
 8009038:	460d      	mov	r5, r1
 800903a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800903e:	4642      	mov	r2, r8
 8009040:	464b      	mov	r3, r9
 8009042:	f7f7 f893 	bl	800016c <__adddf3>
 8009046:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800904a:	f7f7 fa45 	bl	80004d8 <__aeabi_dmul>
 800904e:	4622      	mov	r2, r4
 8009050:	462b      	mov	r3, r5
 8009052:	f7f7 f88b 	bl	800016c <__adddf3>
 8009056:	4642      	mov	r2, r8
 8009058:	4606      	mov	r6, r0
 800905a:	460f      	mov	r7, r1
 800905c:	464b      	mov	r3, r9
 800905e:	4640      	mov	r0, r8
 8009060:	4649      	mov	r1, r9
 8009062:	f7f7 fa39 	bl	80004d8 <__aeabi_dmul>
 8009066:	2200      	movs	r2, #0
 8009068:	4b67      	ldr	r3, [pc, #412]	; (8009208 <__ieee754_pow+0x740>)
 800906a:	4682      	mov	sl, r0
 800906c:	468b      	mov	fp, r1
 800906e:	f7f7 f87d 	bl	800016c <__adddf3>
 8009072:	4632      	mov	r2, r6
 8009074:	463b      	mov	r3, r7
 8009076:	f7f7 f879 	bl	800016c <__adddf3>
 800907a:	9c04      	ldr	r4, [sp, #16]
 800907c:	460d      	mov	r5, r1
 800907e:	4622      	mov	r2, r4
 8009080:	460b      	mov	r3, r1
 8009082:	4640      	mov	r0, r8
 8009084:	4649      	mov	r1, r9
 8009086:	f7f7 fa27 	bl	80004d8 <__aeabi_dmul>
 800908a:	2200      	movs	r2, #0
 800908c:	4680      	mov	r8, r0
 800908e:	4689      	mov	r9, r1
 8009090:	4620      	mov	r0, r4
 8009092:	4629      	mov	r1, r5
 8009094:	4b5c      	ldr	r3, [pc, #368]	; (8009208 <__ieee754_pow+0x740>)
 8009096:	f7f7 f867 	bl	8000168 <__aeabi_dsub>
 800909a:	4652      	mov	r2, sl
 800909c:	465b      	mov	r3, fp
 800909e:	f7f7 f863 	bl	8000168 <__aeabi_dsub>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4630      	mov	r0, r6
 80090a8:	4639      	mov	r1, r7
 80090aa:	f7f7 f85d 	bl	8000168 <__aeabi_dsub>
 80090ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090b2:	f7f7 fa11 	bl	80004d8 <__aeabi_dmul>
 80090b6:	4622      	mov	r2, r4
 80090b8:	4606      	mov	r6, r0
 80090ba:	460f      	mov	r7, r1
 80090bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80090c0:	462b      	mov	r3, r5
 80090c2:	f7f7 fa09 	bl	80004d8 <__aeabi_dmul>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4630      	mov	r0, r6
 80090cc:	4639      	mov	r1, r7
 80090ce:	f7f7 f84d 	bl	800016c <__adddf3>
 80090d2:	4606      	mov	r6, r0
 80090d4:	460f      	mov	r7, r1
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4640      	mov	r0, r8
 80090dc:	4649      	mov	r1, r9
 80090de:	f7f7 f845 	bl	800016c <__adddf3>
 80090e2:	a33d      	add	r3, pc, #244	; (adr r3, 80091d8 <__ieee754_pow+0x710>)
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	9c04      	ldr	r4, [sp, #16]
 80090ea:	460d      	mov	r5, r1
 80090ec:	4620      	mov	r0, r4
 80090ee:	f7f7 f9f3 	bl	80004d8 <__aeabi_dmul>
 80090f2:	4642      	mov	r2, r8
 80090f4:	464b      	mov	r3, r9
 80090f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090fa:	4620      	mov	r0, r4
 80090fc:	4629      	mov	r1, r5
 80090fe:	f7f7 f833 	bl	8000168 <__aeabi_dsub>
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	4630      	mov	r0, r6
 8009108:	4639      	mov	r1, r7
 800910a:	f7f7 f82d 	bl	8000168 <__aeabi_dsub>
 800910e:	a334      	add	r3, pc, #208	; (adr r3, 80091e0 <__ieee754_pow+0x718>)
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	f7f7 f9e0 	bl	80004d8 <__aeabi_dmul>
 8009118:	a333      	add	r3, pc, #204	; (adr r3, 80091e8 <__ieee754_pow+0x720>)
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	4606      	mov	r6, r0
 8009120:	460f      	mov	r7, r1
 8009122:	4620      	mov	r0, r4
 8009124:	4629      	mov	r1, r5
 8009126:	f7f7 f9d7 	bl	80004d8 <__aeabi_dmul>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	4630      	mov	r0, r6
 8009130:	4639      	mov	r1, r7
 8009132:	f7f7 f81b 	bl	800016c <__adddf3>
 8009136:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009138:	4b34      	ldr	r3, [pc, #208]	; (800920c <__ieee754_pow+0x744>)
 800913a:	4413      	add	r3, r2
 800913c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009140:	f7f7 f814 	bl	800016c <__adddf3>
 8009144:	4680      	mov	r8, r0
 8009146:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009148:	4689      	mov	r9, r1
 800914a:	f7f7 f95b 	bl	8000404 <__aeabi_i2d>
 800914e:	4604      	mov	r4, r0
 8009150:	460d      	mov	r5, r1
 8009152:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009154:	4b2e      	ldr	r3, [pc, #184]	; (8009210 <__ieee754_pow+0x748>)
 8009156:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800915a:	4413      	add	r3, r2
 800915c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009160:	4642      	mov	r2, r8
 8009162:	464b      	mov	r3, r9
 8009164:	f7f7 f802 	bl	800016c <__adddf3>
 8009168:	4632      	mov	r2, r6
 800916a:	463b      	mov	r3, r7
 800916c:	f7f6 fffe 	bl	800016c <__adddf3>
 8009170:	4622      	mov	r2, r4
 8009172:	462b      	mov	r3, r5
 8009174:	f7f6 fffa 	bl	800016c <__adddf3>
 8009178:	f8dd a010 	ldr.w	sl, [sp, #16]
 800917c:	4622      	mov	r2, r4
 800917e:	462b      	mov	r3, r5
 8009180:	4650      	mov	r0, sl
 8009182:	468b      	mov	fp, r1
 8009184:	f7f6 fff0 	bl	8000168 <__aeabi_dsub>
 8009188:	4632      	mov	r2, r6
 800918a:	463b      	mov	r3, r7
 800918c:	f7f6 ffec 	bl	8000168 <__aeabi_dsub>
 8009190:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009194:	f7f6 ffe8 	bl	8000168 <__aeabi_dsub>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4640      	mov	r0, r8
 800919e:	4649      	mov	r1, r9
 80091a0:	e608      	b.n	8008db4 <__ieee754_pow+0x2ec>
 80091a2:	bf00      	nop
 80091a4:	f3af 8000 	nop.w
 80091a8:	4a454eef 	.word	0x4a454eef
 80091ac:	3fca7e28 	.word	0x3fca7e28
 80091b0:	93c9db65 	.word	0x93c9db65
 80091b4:	3fcd864a 	.word	0x3fcd864a
 80091b8:	a91d4101 	.word	0xa91d4101
 80091bc:	3fd17460 	.word	0x3fd17460
 80091c0:	518f264d 	.word	0x518f264d
 80091c4:	3fd55555 	.word	0x3fd55555
 80091c8:	db6fabff 	.word	0xdb6fabff
 80091cc:	3fdb6db6 	.word	0x3fdb6db6
 80091d0:	33333303 	.word	0x33333303
 80091d4:	3fe33333 	.word	0x3fe33333
 80091d8:	e0000000 	.word	0xe0000000
 80091dc:	3feec709 	.word	0x3feec709
 80091e0:	dc3a03fd 	.word	0xdc3a03fd
 80091e4:	3feec709 	.word	0x3feec709
 80091e8:	145b01f5 	.word	0x145b01f5
 80091ec:	be3e2fe0 	.word	0xbe3e2fe0
 80091f0:	7ff00000 	.word	0x7ff00000
 80091f4:	43400000 	.word	0x43400000
 80091f8:	0003988e 	.word	0x0003988e
 80091fc:	000bb679 	.word	0x000bb679
 8009200:	0800c7d0 	.word	0x0800c7d0
 8009204:	3ff00000 	.word	0x3ff00000
 8009208:	40080000 	.word	0x40080000
 800920c:	0800c7f0 	.word	0x0800c7f0
 8009210:	0800c7e0 	.word	0x0800c7e0
 8009214:	2601      	movs	r6, #1
 8009216:	e667      	b.n	8008ee8 <__ieee754_pow+0x420>
 8009218:	a39d      	add	r3, pc, #628	; (adr r3, 8009490 <__ieee754_pow+0x9c8>)
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	4640      	mov	r0, r8
 8009220:	4649      	mov	r1, r9
 8009222:	f7f6 ffa3 	bl	800016c <__adddf3>
 8009226:	4622      	mov	r2, r4
 8009228:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800922c:	462b      	mov	r3, r5
 800922e:	4650      	mov	r0, sl
 8009230:	4639      	mov	r1, r7
 8009232:	f7f6 ff99 	bl	8000168 <__aeabi_dsub>
 8009236:	4602      	mov	r2, r0
 8009238:	460b      	mov	r3, r1
 800923a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800923e:	f7f7 fbdb 	bl	80009f8 <__aeabi_dcmpgt>
 8009242:	2800      	cmp	r0, #0
 8009244:	f47f ae01 	bne.w	8008e4a <__ieee754_pow+0x382>
 8009248:	4aa5      	ldr	r2, [pc, #660]	; (80094e0 <__ieee754_pow+0xa18>)
 800924a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800924e:	4293      	cmp	r3, r2
 8009250:	f340 8103 	ble.w	800945a <__ieee754_pow+0x992>
 8009254:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009258:	2000      	movs	r0, #0
 800925a:	151b      	asrs	r3, r3, #20
 800925c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009260:	fa4a f303 	asr.w	r3, sl, r3
 8009264:	4433      	add	r3, r6
 8009266:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800926a:	4f9e      	ldr	r7, [pc, #632]	; (80094e4 <__ieee754_pow+0xa1c>)
 800926c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009270:	4117      	asrs	r7, r2
 8009272:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009276:	ea23 0107 	bic.w	r1, r3, r7
 800927a:	f1c2 0214 	rsb	r2, r2, #20
 800927e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009282:	460b      	mov	r3, r1
 8009284:	fa4a fa02 	asr.w	sl, sl, r2
 8009288:	2e00      	cmp	r6, #0
 800928a:	4602      	mov	r2, r0
 800928c:	4629      	mov	r1, r5
 800928e:	4620      	mov	r0, r4
 8009290:	bfb8      	it	lt
 8009292:	f1ca 0a00 	rsblt	sl, sl, #0
 8009296:	f7f6 ff67 	bl	8000168 <__aeabi_dsub>
 800929a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800929e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092a2:	2400      	movs	r4, #0
 80092a4:	4642      	mov	r2, r8
 80092a6:	464b      	mov	r3, r9
 80092a8:	f7f6 ff60 	bl	800016c <__adddf3>
 80092ac:	a37a      	add	r3, pc, #488	; (adr r3, 8009498 <__ieee754_pow+0x9d0>)
 80092ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b2:	4620      	mov	r0, r4
 80092b4:	460d      	mov	r5, r1
 80092b6:	f7f7 f90f 	bl	80004d8 <__aeabi_dmul>
 80092ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092be:	4606      	mov	r6, r0
 80092c0:	460f      	mov	r7, r1
 80092c2:	4620      	mov	r0, r4
 80092c4:	4629      	mov	r1, r5
 80092c6:	f7f6 ff4f 	bl	8000168 <__aeabi_dsub>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4640      	mov	r0, r8
 80092d0:	4649      	mov	r1, r9
 80092d2:	f7f6 ff49 	bl	8000168 <__aeabi_dsub>
 80092d6:	a372      	add	r3, pc, #456	; (adr r3, 80094a0 <__ieee754_pow+0x9d8>)
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	f7f7 f8fc 	bl	80004d8 <__aeabi_dmul>
 80092e0:	a371      	add	r3, pc, #452	; (adr r3, 80094a8 <__ieee754_pow+0x9e0>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	4680      	mov	r8, r0
 80092e8:	4689      	mov	r9, r1
 80092ea:	4620      	mov	r0, r4
 80092ec:	4629      	mov	r1, r5
 80092ee:	f7f7 f8f3 	bl	80004d8 <__aeabi_dmul>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	4640      	mov	r0, r8
 80092f8:	4649      	mov	r1, r9
 80092fa:	f7f6 ff37 	bl	800016c <__adddf3>
 80092fe:	4604      	mov	r4, r0
 8009300:	460d      	mov	r5, r1
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4630      	mov	r0, r6
 8009308:	4639      	mov	r1, r7
 800930a:	f7f6 ff2f 	bl	800016c <__adddf3>
 800930e:	4632      	mov	r2, r6
 8009310:	463b      	mov	r3, r7
 8009312:	4680      	mov	r8, r0
 8009314:	4689      	mov	r9, r1
 8009316:	f7f6 ff27 	bl	8000168 <__aeabi_dsub>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	4620      	mov	r0, r4
 8009320:	4629      	mov	r1, r5
 8009322:	f7f6 ff21 	bl	8000168 <__aeabi_dsub>
 8009326:	4642      	mov	r2, r8
 8009328:	4606      	mov	r6, r0
 800932a:	460f      	mov	r7, r1
 800932c:	464b      	mov	r3, r9
 800932e:	4640      	mov	r0, r8
 8009330:	4649      	mov	r1, r9
 8009332:	f7f7 f8d1 	bl	80004d8 <__aeabi_dmul>
 8009336:	a35e      	add	r3, pc, #376	; (adr r3, 80094b0 <__ieee754_pow+0x9e8>)
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	4604      	mov	r4, r0
 800933e:	460d      	mov	r5, r1
 8009340:	f7f7 f8ca 	bl	80004d8 <__aeabi_dmul>
 8009344:	a35c      	add	r3, pc, #368	; (adr r3, 80094b8 <__ieee754_pow+0x9f0>)
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	f7f6 ff0d 	bl	8000168 <__aeabi_dsub>
 800934e:	4622      	mov	r2, r4
 8009350:	462b      	mov	r3, r5
 8009352:	f7f7 f8c1 	bl	80004d8 <__aeabi_dmul>
 8009356:	a35a      	add	r3, pc, #360	; (adr r3, 80094c0 <__ieee754_pow+0x9f8>)
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	f7f6 ff06 	bl	800016c <__adddf3>
 8009360:	4622      	mov	r2, r4
 8009362:	462b      	mov	r3, r5
 8009364:	f7f7 f8b8 	bl	80004d8 <__aeabi_dmul>
 8009368:	a357      	add	r3, pc, #348	; (adr r3, 80094c8 <__ieee754_pow+0xa00>)
 800936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936e:	f7f6 fefb 	bl	8000168 <__aeabi_dsub>
 8009372:	4622      	mov	r2, r4
 8009374:	462b      	mov	r3, r5
 8009376:	f7f7 f8af 	bl	80004d8 <__aeabi_dmul>
 800937a:	a355      	add	r3, pc, #340	; (adr r3, 80094d0 <__ieee754_pow+0xa08>)
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	f7f6 fef4 	bl	800016c <__adddf3>
 8009384:	4622      	mov	r2, r4
 8009386:	462b      	mov	r3, r5
 8009388:	f7f7 f8a6 	bl	80004d8 <__aeabi_dmul>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	4640      	mov	r0, r8
 8009392:	4649      	mov	r1, r9
 8009394:	f7f6 fee8 	bl	8000168 <__aeabi_dsub>
 8009398:	4604      	mov	r4, r0
 800939a:	460d      	mov	r5, r1
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	4640      	mov	r0, r8
 80093a2:	4649      	mov	r1, r9
 80093a4:	f7f7 f898 	bl	80004d8 <__aeabi_dmul>
 80093a8:	2200      	movs	r2, #0
 80093aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093b2:	4620      	mov	r0, r4
 80093b4:	4629      	mov	r1, r5
 80093b6:	f7f6 fed7 	bl	8000168 <__aeabi_dsub>
 80093ba:	4602      	mov	r2, r0
 80093bc:	460b      	mov	r3, r1
 80093be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093c2:	f7f7 f9b3 	bl	800072c <__aeabi_ddiv>
 80093c6:	4632      	mov	r2, r6
 80093c8:	4604      	mov	r4, r0
 80093ca:	460d      	mov	r5, r1
 80093cc:	463b      	mov	r3, r7
 80093ce:	4640      	mov	r0, r8
 80093d0:	4649      	mov	r1, r9
 80093d2:	f7f7 f881 	bl	80004d8 <__aeabi_dmul>
 80093d6:	4632      	mov	r2, r6
 80093d8:	463b      	mov	r3, r7
 80093da:	f7f6 fec7 	bl	800016c <__adddf3>
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	4620      	mov	r0, r4
 80093e4:	4629      	mov	r1, r5
 80093e6:	f7f6 febf 	bl	8000168 <__aeabi_dsub>
 80093ea:	4642      	mov	r2, r8
 80093ec:	464b      	mov	r3, r9
 80093ee:	f7f6 febb 	bl	8000168 <__aeabi_dsub>
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	2000      	movs	r0, #0
 80093f8:	493b      	ldr	r1, [pc, #236]	; (80094e8 <__ieee754_pow+0xa20>)
 80093fa:	f7f6 feb5 	bl	8000168 <__aeabi_dsub>
 80093fe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009402:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009406:	da2b      	bge.n	8009460 <__ieee754_pow+0x998>
 8009408:	4652      	mov	r2, sl
 800940a:	f000 f9b5 	bl	8009778 <scalbn>
 800940e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009412:	f7ff bbf2 	b.w	8008bfa <__ieee754_pow+0x132>
 8009416:	4b35      	ldr	r3, [pc, #212]	; (80094ec <__ieee754_pow+0xa24>)
 8009418:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800941c:	429f      	cmp	r7, r3
 800941e:	f77f af13 	ble.w	8009248 <__ieee754_pow+0x780>
 8009422:	4b33      	ldr	r3, [pc, #204]	; (80094f0 <__ieee754_pow+0xa28>)
 8009424:	440b      	add	r3, r1
 8009426:	4303      	orrs	r3, r0
 8009428:	d00b      	beq.n	8009442 <__ieee754_pow+0x97a>
 800942a:	a32b      	add	r3, pc, #172	; (adr r3, 80094d8 <__ieee754_pow+0xa10>)
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009434:	f7f7 f850 	bl	80004d8 <__aeabi_dmul>
 8009438:	a327      	add	r3, pc, #156	; (adr r3, 80094d8 <__ieee754_pow+0xa10>)
 800943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943e:	f7ff bbdc 	b.w	8008bfa <__ieee754_pow+0x132>
 8009442:	4622      	mov	r2, r4
 8009444:	462b      	mov	r3, r5
 8009446:	f7f6 fe8f 	bl	8000168 <__aeabi_dsub>
 800944a:	4642      	mov	r2, r8
 800944c:	464b      	mov	r3, r9
 800944e:	f7f7 fac9 	bl	80009e4 <__aeabi_dcmpge>
 8009452:	2800      	cmp	r0, #0
 8009454:	f43f aef8 	beq.w	8009248 <__ieee754_pow+0x780>
 8009458:	e7e7      	b.n	800942a <__ieee754_pow+0x962>
 800945a:	f04f 0a00 	mov.w	sl, #0
 800945e:	e71e      	b.n	800929e <__ieee754_pow+0x7d6>
 8009460:	4621      	mov	r1, r4
 8009462:	e7d4      	b.n	800940e <__ieee754_pow+0x946>
 8009464:	f04f 0b00 	mov.w	fp, #0
 8009468:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80094e8 <__ieee754_pow+0xa20>
 800946c:	f7ff bbb0 	b.w	8008bd0 <__ieee754_pow+0x108>
 8009470:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009474:	f7ff bbac 	b.w	8008bd0 <__ieee754_pow+0x108>
 8009478:	4638      	mov	r0, r7
 800947a:	4641      	mov	r1, r8
 800947c:	f7ff bbbf 	b.w	8008bfe <__ieee754_pow+0x136>
 8009480:	9200      	str	r2, [sp, #0]
 8009482:	f7ff bb7f 	b.w	8008b84 <__ieee754_pow+0xbc>
 8009486:	2300      	movs	r3, #0
 8009488:	f7ff bb69 	b.w	8008b5e <__ieee754_pow+0x96>
 800948c:	f3af 8000 	nop.w
 8009490:	652b82fe 	.word	0x652b82fe
 8009494:	3c971547 	.word	0x3c971547
 8009498:	00000000 	.word	0x00000000
 800949c:	3fe62e43 	.word	0x3fe62e43
 80094a0:	fefa39ef 	.word	0xfefa39ef
 80094a4:	3fe62e42 	.word	0x3fe62e42
 80094a8:	0ca86c39 	.word	0x0ca86c39
 80094ac:	be205c61 	.word	0xbe205c61
 80094b0:	72bea4d0 	.word	0x72bea4d0
 80094b4:	3e663769 	.word	0x3e663769
 80094b8:	c5d26bf1 	.word	0xc5d26bf1
 80094bc:	3ebbbd41 	.word	0x3ebbbd41
 80094c0:	af25de2c 	.word	0xaf25de2c
 80094c4:	3f11566a 	.word	0x3f11566a
 80094c8:	16bebd93 	.word	0x16bebd93
 80094cc:	3f66c16c 	.word	0x3f66c16c
 80094d0:	5555553e 	.word	0x5555553e
 80094d4:	3fc55555 	.word	0x3fc55555
 80094d8:	c2f8f359 	.word	0xc2f8f359
 80094dc:	01a56e1f 	.word	0x01a56e1f
 80094e0:	3fe00000 	.word	0x3fe00000
 80094e4:	000fffff 	.word	0x000fffff
 80094e8:	3ff00000 	.word	0x3ff00000
 80094ec:	4090cbff 	.word	0x4090cbff
 80094f0:	3f6f3400 	.word	0x3f6f3400

080094f4 <__ieee754_sqrt>:
 80094f4:	f8df c150 	ldr.w	ip, [pc, #336]	; 8009648 <__ieee754_sqrt+0x154>
 80094f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094fc:	ea3c 0c01 	bics.w	ip, ip, r1
 8009500:	460b      	mov	r3, r1
 8009502:	4606      	mov	r6, r0
 8009504:	460d      	mov	r5, r1
 8009506:	460a      	mov	r2, r1
 8009508:	4607      	mov	r7, r0
 800950a:	4604      	mov	r4, r0
 800950c:	d10e      	bne.n	800952c <__ieee754_sqrt+0x38>
 800950e:	4602      	mov	r2, r0
 8009510:	f7f6 ffe2 	bl	80004d8 <__aeabi_dmul>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	4630      	mov	r0, r6
 800951a:	4629      	mov	r1, r5
 800951c:	f7f6 fe26 	bl	800016c <__adddf3>
 8009520:	4606      	mov	r6, r0
 8009522:	460d      	mov	r5, r1
 8009524:	4630      	mov	r0, r6
 8009526:	4629      	mov	r1, r5
 8009528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800952c:	2900      	cmp	r1, #0
 800952e:	dc0d      	bgt.n	800954c <__ieee754_sqrt+0x58>
 8009530:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009534:	ea5c 0707 	orrs.w	r7, ip, r7
 8009538:	d0f4      	beq.n	8009524 <__ieee754_sqrt+0x30>
 800953a:	b139      	cbz	r1, 800954c <__ieee754_sqrt+0x58>
 800953c:	4602      	mov	r2, r0
 800953e:	f7f6 fe13 	bl	8000168 <__aeabi_dsub>
 8009542:	4602      	mov	r2, r0
 8009544:	460b      	mov	r3, r1
 8009546:	f7f7 f8f1 	bl	800072c <__aeabi_ddiv>
 800954a:	e7e9      	b.n	8009520 <__ieee754_sqrt+0x2c>
 800954c:	1512      	asrs	r2, r2, #20
 800954e:	d074      	beq.n	800963a <__ieee754_sqrt+0x146>
 8009550:	2000      	movs	r0, #0
 8009552:	07d5      	lsls	r5, r2, #31
 8009554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009558:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800955c:	bf5e      	ittt	pl
 800955e:	0fe3      	lsrpl	r3, r4, #31
 8009560:	0064      	lslpl	r4, r4, #1
 8009562:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8009566:	0fe3      	lsrs	r3, r4, #31
 8009568:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800956c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8009570:	2516      	movs	r5, #22
 8009572:	4601      	mov	r1, r0
 8009574:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009578:	1076      	asrs	r6, r6, #1
 800957a:	0064      	lsls	r4, r4, #1
 800957c:	188f      	adds	r7, r1, r2
 800957e:	429f      	cmp	r7, r3
 8009580:	bfde      	ittt	le
 8009582:	1bdb      	suble	r3, r3, r7
 8009584:	18b9      	addle	r1, r7, r2
 8009586:	1880      	addle	r0, r0, r2
 8009588:	005b      	lsls	r3, r3, #1
 800958a:	3d01      	subs	r5, #1
 800958c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009590:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009594:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009598:	d1f0      	bne.n	800957c <__ieee754_sqrt+0x88>
 800959a:	462a      	mov	r2, r5
 800959c:	f04f 0e20 	mov.w	lr, #32
 80095a0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80095a4:	428b      	cmp	r3, r1
 80095a6:	eb07 0c05 	add.w	ip, r7, r5
 80095aa:	dc02      	bgt.n	80095b2 <__ieee754_sqrt+0xbe>
 80095ac:	d113      	bne.n	80095d6 <__ieee754_sqrt+0xe2>
 80095ae:	45a4      	cmp	ip, r4
 80095b0:	d811      	bhi.n	80095d6 <__ieee754_sqrt+0xe2>
 80095b2:	f1bc 0f00 	cmp.w	ip, #0
 80095b6:	eb0c 0507 	add.w	r5, ip, r7
 80095ba:	da43      	bge.n	8009644 <__ieee754_sqrt+0x150>
 80095bc:	2d00      	cmp	r5, #0
 80095be:	db41      	blt.n	8009644 <__ieee754_sqrt+0x150>
 80095c0:	f101 0801 	add.w	r8, r1, #1
 80095c4:	1a5b      	subs	r3, r3, r1
 80095c6:	4641      	mov	r1, r8
 80095c8:	45a4      	cmp	ip, r4
 80095ca:	bf88      	it	hi
 80095cc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80095d0:	eba4 040c 	sub.w	r4, r4, ip
 80095d4:	443a      	add	r2, r7
 80095d6:	005b      	lsls	r3, r3, #1
 80095d8:	f1be 0e01 	subs.w	lr, lr, #1
 80095dc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80095e0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80095e4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80095e8:	d1dc      	bne.n	80095a4 <__ieee754_sqrt+0xb0>
 80095ea:	4323      	orrs	r3, r4
 80095ec:	d006      	beq.n	80095fc <__ieee754_sqrt+0x108>
 80095ee:	1c54      	adds	r4, r2, #1
 80095f0:	bf0b      	itete	eq
 80095f2:	4672      	moveq	r2, lr
 80095f4:	3201      	addne	r2, #1
 80095f6:	3001      	addeq	r0, #1
 80095f8:	f022 0201 	bicne.w	r2, r2, #1
 80095fc:	1043      	asrs	r3, r0, #1
 80095fe:	07c1      	lsls	r1, r0, #31
 8009600:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009604:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009608:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800960c:	bf48      	it	mi
 800960e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009612:	4610      	mov	r0, r2
 8009614:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009618:	e782      	b.n	8009520 <__ieee754_sqrt+0x2c>
 800961a:	0ae3      	lsrs	r3, r4, #11
 800961c:	3915      	subs	r1, #21
 800961e:	0564      	lsls	r4, r4, #21
 8009620:	2b00      	cmp	r3, #0
 8009622:	d0fa      	beq.n	800961a <__ieee754_sqrt+0x126>
 8009624:	02de      	lsls	r6, r3, #11
 8009626:	d50a      	bpl.n	800963e <__ieee754_sqrt+0x14a>
 8009628:	f1c2 0020 	rsb	r0, r2, #32
 800962c:	fa24 f000 	lsr.w	r0, r4, r0
 8009630:	1e55      	subs	r5, r2, #1
 8009632:	4094      	lsls	r4, r2
 8009634:	4303      	orrs	r3, r0
 8009636:	1b4a      	subs	r2, r1, r5
 8009638:	e78a      	b.n	8009550 <__ieee754_sqrt+0x5c>
 800963a:	4611      	mov	r1, r2
 800963c:	e7f0      	b.n	8009620 <__ieee754_sqrt+0x12c>
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	3201      	adds	r2, #1
 8009642:	e7ef      	b.n	8009624 <__ieee754_sqrt+0x130>
 8009644:	4688      	mov	r8, r1
 8009646:	e7bd      	b.n	80095c4 <__ieee754_sqrt+0xd0>
 8009648:	7ff00000 	.word	0x7ff00000

0800964c <fabs>:
 800964c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009650:	4770      	bx	lr

08009652 <finite>:
 8009652:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009656:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800965a:	0fc0      	lsrs	r0, r0, #31
 800965c:	4770      	bx	lr
	...

08009660 <rint>:
 8009660:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8009664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009666:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800966a:	2f13      	cmp	r7, #19
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	460c      	mov	r4, r1
 8009672:	4605      	mov	r5, r0
 8009674:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8009678:	dc59      	bgt.n	800972e <rint+0xce>
 800967a:	2f00      	cmp	r7, #0
 800967c:	da2a      	bge.n	80096d4 <rint+0x74>
 800967e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009682:	4301      	orrs	r1, r0
 8009684:	d022      	beq.n	80096cc <rint+0x6c>
 8009686:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800968a:	4301      	orrs	r1, r0
 800968c:	424d      	negs	r5, r1
 800968e:	430d      	orrs	r5, r1
 8009690:	4936      	ldr	r1, [pc, #216]	; (800976c <rint+0x10c>)
 8009692:	0c5c      	lsrs	r4, r3, #17
 8009694:	0b2d      	lsrs	r5, r5, #12
 8009696:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800969a:	0464      	lsls	r4, r4, #17
 800969c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80096a0:	ea45 0304 	orr.w	r3, r5, r4
 80096a4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80096a8:	4620      	mov	r0, r4
 80096aa:	4629      	mov	r1, r5
 80096ac:	f7f6 fd5e 	bl	800016c <__adddf3>
 80096b0:	e9cd 0100 	strd	r0, r1, [sp]
 80096b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096b8:	462b      	mov	r3, r5
 80096ba:	4622      	mov	r2, r4
 80096bc:	f7f6 fd54 	bl	8000168 <__aeabi_dsub>
 80096c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80096c4:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4610      	mov	r0, r2
 80096ce:	4619      	mov	r1, r3
 80096d0:	b003      	add	sp, #12
 80096d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d4:	4926      	ldr	r1, [pc, #152]	; (8009770 <rint+0x110>)
 80096d6:	4139      	asrs	r1, r7
 80096d8:	ea03 0001 	and.w	r0, r3, r1
 80096dc:	4310      	orrs	r0, r2
 80096de:	d0f5      	beq.n	80096cc <rint+0x6c>
 80096e0:	084b      	lsrs	r3, r1, #1
 80096e2:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 80096e6:	ea52 0501 	orrs.w	r5, r2, r1
 80096ea:	d00c      	beq.n	8009706 <rint+0xa6>
 80096ec:	ea24 0303 	bic.w	r3, r4, r3
 80096f0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80096f4:	2f13      	cmp	r7, #19
 80096f6:	bf0c      	ite	eq
 80096f8:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80096fc:	2500      	movne	r5, #0
 80096fe:	fa44 f707 	asr.w	r7, r4, r7
 8009702:	ea43 0407 	orr.w	r4, r3, r7
 8009706:	4919      	ldr	r1, [pc, #100]	; (800976c <rint+0x10c>)
 8009708:	4623      	mov	r3, r4
 800970a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800970e:	462a      	mov	r2, r5
 8009710:	e9d6 4500 	ldrd	r4, r5, [r6]
 8009714:	4620      	mov	r0, r4
 8009716:	4629      	mov	r1, r5
 8009718:	f7f6 fd28 	bl	800016c <__adddf3>
 800971c:	e9cd 0100 	strd	r0, r1, [sp]
 8009720:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009724:	4622      	mov	r2, r4
 8009726:	462b      	mov	r3, r5
 8009728:	f7f6 fd1e 	bl	8000168 <__aeabi_dsub>
 800972c:	e7cc      	b.n	80096c8 <rint+0x68>
 800972e:	2f33      	cmp	r7, #51	; 0x33
 8009730:	dd05      	ble.n	800973e <rint+0xde>
 8009732:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8009736:	d1c9      	bne.n	80096cc <rint+0x6c>
 8009738:	f7f6 fd18 	bl	800016c <__adddf3>
 800973c:	e7c4      	b.n	80096c8 <rint+0x68>
 800973e:	f04f 31ff 	mov.w	r1, #4294967295
 8009742:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8009746:	fa21 f10c 	lsr.w	r1, r1, ip
 800974a:	4208      	tst	r0, r1
 800974c:	d0be      	beq.n	80096cc <rint+0x6c>
 800974e:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8009752:	bf18      	it	ne
 8009754:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8009758:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800975c:	bf1e      	ittt	ne
 800975e:	ea20 0303 	bicne.w	r3, r0, r3
 8009762:	fa45 fc0c 	asrne.w	ip, r5, ip
 8009766:	ea43 050c 	orrne.w	r5, r3, ip
 800976a:	e7cc      	b.n	8009706 <rint+0xa6>
 800976c:	0800c800 	.word	0x0800c800
 8009770:	000fffff 	.word	0x000fffff
 8009774:	00000000 	.word	0x00000000

08009778 <scalbn>:
 8009778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800977e:	4604      	mov	r4, r0
 8009780:	460d      	mov	r5, r1
 8009782:	4617      	mov	r7, r2
 8009784:	460b      	mov	r3, r1
 8009786:	b996      	cbnz	r6, 80097ae <scalbn+0x36>
 8009788:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800978c:	4303      	orrs	r3, r0
 800978e:	d039      	beq.n	8009804 <scalbn+0x8c>
 8009790:	4b35      	ldr	r3, [pc, #212]	; (8009868 <scalbn+0xf0>)
 8009792:	2200      	movs	r2, #0
 8009794:	f7f6 fea0 	bl	80004d8 <__aeabi_dmul>
 8009798:	4b34      	ldr	r3, [pc, #208]	; (800986c <scalbn+0xf4>)
 800979a:	4604      	mov	r4, r0
 800979c:	429f      	cmp	r7, r3
 800979e:	460d      	mov	r5, r1
 80097a0:	da0f      	bge.n	80097c2 <scalbn+0x4a>
 80097a2:	a32d      	add	r3, pc, #180	; (adr r3, 8009858 <scalbn+0xe0>)
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f7f6 fe96 	bl	80004d8 <__aeabi_dmul>
 80097ac:	e006      	b.n	80097bc <scalbn+0x44>
 80097ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80097b2:	4296      	cmp	r6, r2
 80097b4:	d10a      	bne.n	80097cc <scalbn+0x54>
 80097b6:	4602      	mov	r2, r0
 80097b8:	f7f6 fcd8 	bl	800016c <__adddf3>
 80097bc:	4604      	mov	r4, r0
 80097be:	460d      	mov	r5, r1
 80097c0:	e020      	b.n	8009804 <scalbn+0x8c>
 80097c2:	460b      	mov	r3, r1
 80097c4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80097c8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80097cc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80097d0:	19b9      	adds	r1, r7, r6
 80097d2:	4291      	cmp	r1, r2
 80097d4:	dd0e      	ble.n	80097f4 <scalbn+0x7c>
 80097d6:	a322      	add	r3, pc, #136	; (adr r3, 8009860 <scalbn+0xe8>)
 80097d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097dc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80097e0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80097e4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80097e8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80097ec:	4820      	ldr	r0, [pc, #128]	; (8009870 <scalbn+0xf8>)
 80097ee:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80097f2:	e7d9      	b.n	80097a8 <scalbn+0x30>
 80097f4:	2900      	cmp	r1, #0
 80097f6:	dd08      	ble.n	800980a <scalbn+0x92>
 80097f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80097fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009800:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009804:	4620      	mov	r0, r4
 8009806:	4629      	mov	r1, r5
 8009808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800980a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800980e:	da16      	bge.n	800983e <scalbn+0xc6>
 8009810:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009814:	429f      	cmp	r7, r3
 8009816:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800981a:	dd08      	ble.n	800982e <scalbn+0xb6>
 800981c:	4c15      	ldr	r4, [pc, #84]	; (8009874 <scalbn+0xfc>)
 800981e:	4814      	ldr	r0, [pc, #80]	; (8009870 <scalbn+0xf8>)
 8009820:	f363 74df 	bfi	r4, r3, #31, #1
 8009824:	a30e      	add	r3, pc, #56	; (adr r3, 8009860 <scalbn+0xe8>)
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	4621      	mov	r1, r4
 800982c:	e7bc      	b.n	80097a8 <scalbn+0x30>
 800982e:	4c12      	ldr	r4, [pc, #72]	; (8009878 <scalbn+0x100>)
 8009830:	4812      	ldr	r0, [pc, #72]	; (800987c <scalbn+0x104>)
 8009832:	f363 74df 	bfi	r4, r3, #31, #1
 8009836:	a308      	add	r3, pc, #32	; (adr r3, 8009858 <scalbn+0xe0>)
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	e7f5      	b.n	800982a <scalbn+0xb2>
 800983e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009842:	3136      	adds	r1, #54	; 0x36
 8009844:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009848:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800984c:	4620      	mov	r0, r4
 800984e:	4629      	mov	r1, r5
 8009850:	2200      	movs	r2, #0
 8009852:	4b0b      	ldr	r3, [pc, #44]	; (8009880 <scalbn+0x108>)
 8009854:	e7a8      	b.n	80097a8 <scalbn+0x30>
 8009856:	bf00      	nop
 8009858:	c2f8f359 	.word	0xc2f8f359
 800985c:	01a56e1f 	.word	0x01a56e1f
 8009860:	8800759c 	.word	0x8800759c
 8009864:	7e37e43c 	.word	0x7e37e43c
 8009868:	43500000 	.word	0x43500000
 800986c:	ffff3cb0 	.word	0xffff3cb0
 8009870:	8800759c 	.word	0x8800759c
 8009874:	7e37e43c 	.word	0x7e37e43c
 8009878:	01a56e1f 	.word	0x01a56e1f
 800987c:	c2f8f359 	.word	0xc2f8f359
 8009880:	3c900000 	.word	0x3c900000

08009884 <_init>:
 8009884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009886:	bf00      	nop
 8009888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800988a:	bc08      	pop	{r3}
 800988c:	469e      	mov	lr, r3
 800988e:	4770      	bx	lr

08009890 <_fini>:
 8009890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009892:	bf00      	nop
 8009894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009896:	bc08      	pop	{r3}
 8009898:	469e      	mov	lr, r3
 800989a:	4770      	bx	lr
